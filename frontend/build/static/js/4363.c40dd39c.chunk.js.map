{"version":3,"file":"static/js/4363.c40dd39c.chunk.js","mappings":"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","sources":["Components/adminpanel/Jobseekers/APManageCertificate.js","../node_modules/@mui/icons-material/Delete.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport APNavBar from \"../Elements/APNavBar\";\r\nimport APSidebar from \"../APSidebar/APSidebar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Link from \"@mui/material/Link\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../../api/BaseApi\";\r\nimport ApiKey from \"../../api/ApiKey\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport Cookies from \"js-cookie\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport APFooter from \"../Elements/APFooter\";\r\n\r\nconst APManageCertificate = () => {\r\n  const [selectedCV, setSelectedCV] = useState();\r\n  const [selectedFileName, setSelectedFileName] = useState([]);\r\n  const [userData, setUserData] = useState([]);\r\n  const [certificatesData, setCertificatesData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const tokenKey = Cookies.get(\"token\");\r\n  const adminID = Cookies.get(\"adminID\");\r\n\r\n  const navigate = useNavigate();\r\n  const { slug } = useParams();\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + `/admin/candidates/certificates/${slug}`,\r\n        null, // Pass null as the request body if not required\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n            adminid: adminID,\r\n          },\r\n        }\r\n      );\r\n      setLoading(false);\r\n      setCertificatesData(response.data.response.certificates);\r\n      setUserData(response.data.response);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.log(\"Cannot get profile photo data\");\r\n    }\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      // if (!logo || logo === null) {\r\n      //   Swal.fire({\r\n      //     title: \"Please select a Logo!\",\r\n      //     icon: \"warning\",\r\n      //     confirmButtonText: \"Close\",\r\n      //   });\r\n      // } else {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Upload Certificates?\",\r\n        text: \"Do you want to upload certificates?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        // setLoading(true);\r\n\r\n        const updatedData = {\r\n          ...userData,\r\n          selectedCV: selectedCV, // Include the selected CV here\r\n          selectedFileName: selectedFileName,\r\n        };\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"selectedCV\", selectedCV);\r\n        selectedFileName.forEach((fileName, index) => {\r\n          formData.append(`selectedFileNames[${index}]`, fileName);\r\n        });\r\n\r\n        const response = await axios.post(\r\n          BaseApi + `/admin/candidates/certificates/${slug}`,\r\n          updatedData,\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n        if (response.data.status === 200) {\r\n          Swal.fire({\r\n            title: \"Logo updated successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n          getData();\r\n\r\n          window.scrollTo(0, 0);\r\n        } else {\r\n          Swal.fire({\r\n            title: response.data.message,\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n      }\r\n      // }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Could not update logo. Please try after some time!\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Could not update photo!\");\r\n    }\r\n  };\r\n\r\n  const convertFileToBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = (event) => {\r\n        resolve(event.target.result);\r\n      };\r\n      reader.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    });\r\n  };\r\n\r\n  const deleteCertificate = async (e, id) => {\r\n    e.preventDefault();\r\n    console.log(id);\r\n\r\n    try {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Delete certificate?\",\r\n        text: \"Do you want to delete this certificate?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        const response = await axios.post(\r\n          BaseApi + `/admin/candidates/deleteCertificate/${id}`,\r\n          null,\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n        if (response.data.status === 200) {\r\n          Swal.fire({\r\n            title: \"Certificate deleted successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n          getData();\r\n          window.scrollTo(0, 0);\r\n        } else {\r\n          Swal.fire({\r\n            title: response.data.message,\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed!\",\r\n        text: \"Could not delete certificate. Please try after some time!\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Could not delete cover!\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/admin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  return (\r\n    <>\r\n      <APNavBar />\r\n      <div className=\"APBasic\">\r\n        <APSidebar />\r\n\r\n        {loading ? (\r\n          <>\r\n            <div className=\"loader-container\"></div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"site-min-height\">\r\n              <div className=\"breadCumb1\" role=\"presentation\">\r\n                <Breadcrumbs\r\n                  aria-label=\"breadcrumb\"\r\n                  separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                >\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/admins/dashboard\")}\r\n                  >\r\n                    Dashboard\r\n                  </Link>\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/candidates\")}\r\n                  >\r\n                    Jobseekers\r\n                  </Link>\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/admins/dashboard\")}\r\n                  >\r\n                    {userData.first_name} {userData.last_name}\r\n                  </Link>\r\n                  <Typography color=\"text.primary\">Certificates</Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n              <h2 className=\"mt-4\">Manage Jobseeker Document/Certificates</h2>\r\n              <form className=\"adminForm\">\r\n                <div className=\"mb-4 mt-5\">\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <form>\r\n                      <div className=\"mb-4 mt-5\">\r\n                        <div class=\"mb-5 DashBoardInputBx\">\r\n                          <label for=\"formFile\" class=\"form-label\">\r\n                            CV Document/Certificates\r\n                          </label>\r\n                          <input\r\n                            type=\"file\"\r\n                            id=\"formFile\"\r\n                            className=\"form-control\"\r\n                            name=\"file\"\r\n                            multiple\r\n                            onChange={(e) => {\r\n                              const files = Array.from(e.target.files);\r\n\r\n                              // Capture the selected file names\r\n                              const fileNames = files.map((file) => file.name);\r\n                              setSelectedFileName(fileNames);\r\n\r\n                              // Convert each selected file to base64 encoding\r\n                              Promise.all(\r\n                                files.map((file) => convertFileToBase64(file))\r\n                              )\r\n                                .then((base64Array) => {\r\n                                  setSelectedCV(base64Array);\r\n                                })\r\n                                .catch((error) => {\r\n                                  console.error(\r\n                                    \"Error converting files to base64:\",\r\n                                    error\r\n                                  );\r\n                                });\r\n                            }}\r\n                          />\r\n\r\n                          <div id=\"emailHelp\" class=\"form-text\">\r\n                            Supported File Types: pdf, doc and docx, gif, jpg,\r\n                            jpeg, png (Max. 4 MB). Min file size 150 X 150\r\n                            pixels for image\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </form>\r\n                  </div>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button1\"\r\n                    onClick={handleClick}\r\n                  >\r\n                    UPLOAD\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button2\"\r\n                    onClick={() => navigate(\"/admin/candidates/index\")}\r\n                  >\r\n                    CANCEL\r\n                  </button>\r\n                </div>\r\n              </form>\r\n              <div className=\"row certificateBoxParent\">\r\n                {certificatesData.map((i) => {\r\n                  return (\r\n                    <>\r\n                      <div className=\"col-md-4 manageCertificateBox APActionButton\">\r\n                        <div className=\"certificateFloatingButton\">\r\n                          <button\r\n                            className=\"btn btn-secondary\"\r\n                            onClick={(e) => deleteCertificate(e, i.slug)}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </button>\r\n                        </div>\r\n                        <img src={i.document} alt=\"Certificate\" />\r\n                      </div>\r\n                    </>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n            <APFooter />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default APManageCertificate;\r\n\r\n// function convertToBase64(file) {\r\n//   return new Promise((resolve, reject) => {\r\n//     const fileReader = new FileReader();\r\n//     fileReader.readAsDataURL(file);\r\n//     fileReader.onload = () => {\r\n//       resolve(fileReader.result);\r\n//     };\r\n//     fileReader.onerror = (error) => {\r\n//       reject(error);\r\n//     };\r\n//   });\r\n// }\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\nexports.default = _default;"],"names":["APManageCertificate","selectedCV","setSelectedCV","useState","selectedFileName","setSelectedFileName","userData","setUserData","certificatesData","setCertificatesData","loading","setLoading","tokenKey","Cookies","adminID","navigate","useNavigate","slug","useParams","getData","async","response","axios","BaseApi","headers","key","ApiKey","token","adminid","data","certificates","error","console","log","useEffect","window","scrollTo","_jsxs","_Fragment","children","_jsx","APNavBar","className","APSidebar","role","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","underline","color","onClick","first_name","last_name","Typography","class","for","type","id","name","multiple","onChange","e","files","Array","from","target","fileNames","map","file","Promise","all","resolve","reject","reader","FileReader","onload","event","result","onerror","readAsDataURL","convertFileToBase64","then","base64Array","catch","Swal","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","isConfirmed","updatedData","formData","FormData","append","forEach","fileName","index","status","message","i","preventDefault","deleteCertificate","DeleteIcon","src","document","alt","APFooter","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}