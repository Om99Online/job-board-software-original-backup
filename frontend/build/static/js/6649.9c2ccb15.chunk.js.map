{"version":3,"file":"static/js/6649.9c2ccb15.chunk.js","mappings":"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","sources":["Components/adminpanel/Manage Newsletter/APUnsubscribeUserlist.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport APNavBar from \"../Elements/APNavBar\";\r\nimport APSidebar from \"../APSidebar/APSidebar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Link from \"@mui/material/Link\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../../api/BaseApi\";\r\nimport ApiKey from \"../../api/ApiKey\";\r\nimport Swal from \"sweetalert2\";\r\nimport CalendarMonthIcon from \"@mui/icons-material/CalendarMonth\";\r\nimport CreateIcon from \"@mui/icons-material/Create\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\r\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\r\nimport BlockIcon from \"@mui/icons-material/Block\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport Pagination from \"@mui/material/Pagination\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport VerifiedIcon from \"@mui/icons-material/Verified\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Cookies from \"js-cookie\";\r\nimport APFooter from \"../Elements/APFooter\";\r\n\r\nconst APUnsubscribeUserlist = () => {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n  const [listData, setListData] = useState([]);\r\n  const [checkedData, setCheckedData] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n  const tokenKey = Cookies.get(\"token\");\r\n  const adminID = Cookies.get(\"adminID\");\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [dataPerPage, setDataPerPage] = useState([]);\r\n  const itemsPerPage = 20;\r\n  // const [open, setOpen] = useState(false);\r\n  // const [selectedPlan, setSelectedPlan] = useState(null);\r\n  // const handleOpen = (plan) => {\r\n  //   setSelectedPlan(plan);\r\n  //   setOpen(true);\r\n  // };\r\n\r\n  // const handleClose = () => {\r\n  //   setSelectedPlan(null);\r\n  //   setOpen(false);\r\n  // };\r\n\r\n  // const style = {\r\n  //   position: \"absolute\",\r\n  //   top: \"50%\",\r\n  //   left: \"50%\",\r\n  //   transform: \"translate(-50%, -50%)\",\r\n  //   width: 400,\r\n  //   bgcolor: \"background.paper\",\r\n  //   border: \"2px solid #000\",\r\n  //   boxShadow: 24,\r\n  //   p: 4,\r\n  // };\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + \"/admin/newsletter/unsubscriberlist\",\r\n        null, // Pass null as the request body if not required\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n            adminid: adminID,\r\n          },\r\n        }\r\n      );\r\n      setLoading(false);\r\n      setListData(response.data.response);\r\n      //   console.log(paymentHistory);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.log(\"Cannot get plans data at APmanageplans\");\r\n    }\r\n  };\r\n  const handleActivate = async (slug) => {\r\n    try {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Activate Sub-Admin\",\r\n        text: \"Do you want to Activate this Sub-Admin?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        // setLoading(true);\r\n        const response = await axios.post(\r\n          BaseApi + `/admin/activateuser/${slug}`,\r\n          null, // Pass null as the request body if not required\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n        // setLoading(false);\r\n        if (response.data.status === 200) {\r\n          Swal.fire({\r\n            title: \"Sub-Admin Activated successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        } else {\r\n          Swal.fire({\r\n            title: response.data.message,\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n        getData();\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed. Please try after some time!\",\r\n        text: \"Could not Activate Sub-Admin\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Couldn't activate the record!\", error.message);\r\n    }\r\n  };\r\n  const handleDeactivate = async (slug) => {\r\n    try {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Deactivate Sub-Admin\",\r\n        text: \"Do you want to Deactivate this Sub-Admin?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        // setLoading(true);\r\n        const response = await axios.post(\r\n          BaseApi + `/admin/deactivateuser/${slug}`,\r\n          null, // Pass null as the request body if not required\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n        // setLoading(false);\r\n        if (response.data.status === 200) {\r\n          Swal.fire({\r\n            title: \"Sub-Admin Deactivated successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        } else {\r\n          Swal.fire({\r\n            title: response.data.message,\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n        getData();\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed. Please try after some time!\",\r\n        text: \"Could not Deactivate Sub-Admin\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Couldn't deactivate the record!\", error.message);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (slug) => {\r\n    try {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Delete Sub-Admin\",\r\n        text: \"Do you want to Delete this Sub-Admin?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        // setLoading(true);\r\n        const response = await axios.post(\r\n          BaseApi + `/admin/deleteadmins/${slug}`,\r\n          null, // Pass null as the request body if not required\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n        // setLoading(false);\r\n        if (response.data.status === 200) {\r\n          Swal.fire({\r\n            title: \"Sub-Admin deleted successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        } else {\r\n          Swal.fire({\r\n            title: response.data.message,\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n        getData();\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed. Please try after some time!\",\r\n        text: \"Could not Delete Sub-Admin\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Couldn't delete the record!\", error.message);\r\n    }\r\n  };\r\n\r\n  const handleCheck = (id) => {\r\n    if (checkedData.includes(id)) {\r\n      // If the ID is already in the array, remove it\r\n      setCheckedData(checkedData.filter((checkedId) => checkedId !== id));\r\n    } else {\r\n      // If the ID is not in the array, add it\r\n      setCheckedData([...checkedData, id]);\r\n    }\r\n  };\r\n\r\n  const handleMultipleDeactivate = async () => {\r\n    try {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Deactivate Sub-Admins\",\r\n        text: \"Do you want to Deactivate Sub-Admins?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        const ids = checkedData.join(\",\");\r\n        console.log(ids);\r\n        // setLoading(true);\r\n        const response = await axios.post(\r\n          BaseApi + \"/admin/manage\",\r\n          {\r\n            idList: ids,\r\n            action: \"deactivate\",\r\n          }, // Pass null as the request body if not required\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n        // setLoading(false);\r\n        if (response.data.status === 200) {\r\n          Swal.fire({\r\n            title: \"Sub-Admins Deactivated successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        } else {\r\n          Swal.fire({\r\n            title: \"Couldn't Deactivate!\",\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n        getData();\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed. Please try after some time!\",\r\n        text: \"Could not Deactivate Sub-Admins\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Couldn't deactivate the record!\", error.message);\r\n    }\r\n  };\r\n  const handleMultipleActivate = async () => {\r\n    try {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Activate Sub-Admins\",\r\n        text: \"Do you want to Activate Sub-Admins?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        let ids = checkedData.toString();\r\n        console.log(ids);\r\n        // setLoading(true);\r\n        const response = await axios.post(\r\n          BaseApi + \"/admin/manage\",\r\n          {\r\n            idList: ids,\r\n            action: \"activate\",\r\n          }, // Pass null as the request body if not required\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n        // setLoading(false);\r\n        if (response.data.status === 200) {\r\n          Swal.fire({\r\n            title: \"Sub-Admins Activated successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        } else {\r\n          Swal.fire({\r\n            title: \"Couldn't Activate!\",\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n        getData();\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed. Please try after some time!\",\r\n        text: \"Could not Activate Sub-Admins\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Couldn't activate the record!\", error.message);\r\n    }\r\n  };\r\n  const handleMultipleDelete = async () => {\r\n    try {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Delete Sub-Admins\",\r\n        text: \"Do you want to Delete Sub-Admins?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        let ids = checkedData.toString();\r\n        console.log(ids);\r\n        // setLoading(true);\r\n        const response = await axios.post(\r\n          BaseApi + \"/admin/manage\",\r\n          {\r\n            idList: ids,\r\n            action: \"delete\",\r\n          }, // Pass null as the request body if not required\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n        // setLoading(false);\r\n        if (response.data.status === 200) {\r\n          Swal.fire({\r\n            title: \"Sub-Admins Delete successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        } else {\r\n          Swal.fire({\r\n            title: \"Couldn't Delete!\",\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n        getData();\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed. Please try after some time!\",\r\n        text: \"Could not Delete Sub-Admins\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Couldn't Delete the record!\", error.message);\r\n    }\r\n  };\r\n\r\n  const sortAndFilterData = (array, key, direction, query) => {\r\n    const sortedAndFilteredArray = [...array]\r\n      .filter(\r\n        (item) =>\r\n          item.first_name.toLowerCase().includes(query) ||\r\n          item.last_name.toLowerCase().includes(query) ||\r\n          item.username.toLowerCase().includes(query) ||\r\n          item.email.toLowerCase().includes(query)\r\n      )\r\n      .sort((a, b) => {\r\n        if (a[key] < b[key]) {\r\n          return direction === \"ascending\" ? -1 : 1;\r\n        }\r\n        if (a[key] > b[key]) {\r\n          return direction === \"ascending\" ? 1 : -1;\r\n        }\r\n        return 0;\r\n      });\r\n    return sortedAndFilteredArray;\r\n  };\r\n  const [sortConfig, setSortConfig] = useState({\r\n    key: \"\",\r\n    direction: \"ascending\",\r\n  });\r\n  const [symbol, setSymbol] = useState(\"🔺\");\r\n\r\n  const sortedAndFilteredData = sortAndFilterData(\r\n    listData,\r\n    sortConfig.key,\r\n    sortConfig.direction,\r\n    searchQuery\r\n  );\r\n\r\n  const filteredData = listData.filter((item) => {\r\n    const searchString = searchQuery.toLowerCase();\r\n    return (\r\n      item.first_name.toLowerCase().includes(searchString) ||\r\n      item.last_name.toLowerCase().includes(searchString) ||\r\n      item.username.toLowerCase().includes(searchString) ||\r\n      item.email.toLowerCase().includes(searchString)\r\n    );\r\n  });\r\n\r\n  const indexOfLastItem = currentPage * itemsPerPage;\r\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n  const currentItems = sortedAndFilteredData.slice(\r\n    indexOfFirstItem,\r\n    indexOfLastItem\r\n  );\r\n\r\n  const totalPages = Math.ceil(sortedAndFilteredData.length / itemsPerPage);\r\n\r\n  const pageNumbers = [];\r\n  for (let i = 1; i <= totalPages; i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/admin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  useEffect(() => {\r\n    setCurrentPage(1); // Reset currentPage to 1 when searchQuery changes\r\n  }, [searchQuery]);\r\n\r\n  const handleColumnClick = (key) => {\r\n    let direction = \"ascending\";\r\n    if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\r\n      direction = \"descending\";\r\n      setSymbol(\"🔻\");\r\n    } else {\r\n      setSymbol(\"🔺\");\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n  const handleSearchChange = (e) => {\r\n    const newQuery = e.target.value.toLowerCase();\r\n    setSearchQuery(newQuery);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <APNavBar />\r\n      <div className=\"APBasic APManageSubadmin\">\r\n        <APSidebar />\r\n\r\n        {loading ? (\r\n          <>\r\n            <div className=\"loader-container\"></div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"site-min-height\">\r\n              <div className=\"breadCumb1\" role=\"presentation\">\r\n                <Breadcrumbs\r\n                  aria-label=\"breadcrumb\"\r\n                  separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                >\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/admins/dashboard\")}\r\n                  >\r\n                    Dashboard\r\n                  </Link>\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/newsletters\")}\r\n                  >\r\n                    Newsletter\r\n                  </Link>\r\n\r\n                  <Typography color=\"text.primary\">\r\n                    Unsubscriber User List\r\n                  </Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n              <div className=\"ManageSubAdminHeader\">\r\n                <h2 className=\"\">Unsubscriber User List</h2>\r\n              </div>\r\n              <div className=\"manageSubadminPart1\">\r\n                <form>\r\n                  <div className=\"manageSubadminPart1Sec1\">\r\n                    <h4>Search Unsubscribe users by email address</h4>\r\n                    <div class=\"APDashboardSearchBx\">\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"form3Example1\"\r\n                        className=\"form-control\"\r\n                        name=\"searchQuery\"\r\n                        placeholder=\"Search..\"\r\n                        value={searchQuery}\r\n                        onChange={handleSearchChange}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n                <h4>\r\n                  No. of Results {indexOfFirstItem + 1}-\r\n                  {Math.min(\r\n                    indexOfLastItem,\r\n                    filteredData.length || listData.length\r\n                  )}{\" \"}\r\n                  of {listData.length}\r\n                </h4>\r\n              </div>\r\n              <div className=\"manageSubadminPart2\">\r\n                {listData.length === 0 ? (\r\n                  <div className=\"unsubscribeListNoData\">\r\n                    <p>No. Records Found</p>\r\n                  </div>\r\n                ) : (\r\n                  <table class=\"table\">\r\n                    {/* <thead>\r\n                      <tr>\r\n                        <th scope=\"col\">#</th>\r\n                        <th onClick={() => handleColumnClick(\"email_address\")}>\r\n                          Email Address{symbol}\r\n                        </th>\r\n                        <th>User Type</th>\r\n                        <th onClick={() => handleColumnClick(\"subject\")}>\r\n                          Subject{symbol}\r\n                        </th>\r\n                        <th onClick={() => handleColumnClick(\"mail_status\")}>\r\n                          <CalendarMonthIcon /> Mail Status{symbol}\r\n                        </th>\r\n                        <th onClick={() => handleColumnClick(\"mail_sent_time\")}>\r\n                          <CalendarMonthIcon /> Mail Sent Time{symbol}\r\n                        </th>\r\n                        <th scope=\"col\">Action</th>\r\n                      </tr>\r\n                    </thead> */}\r\n                    {/* <tbody>\r\n                      {currentItems.map((i) => {\r\n                        return (\r\n                          <>\r\n                            <tr>\r\n                              <td className=\"checkBoxCol\">\r\n                                <input\r\n                                  type=\"checkbox\"\r\n                                  className=\"tableCheckBox\"\r\n                                  checked={checkedData.includes(i.id)} // Check if the current ID is in checkedData\r\n                                  onChange={() => handleCheck(i.id)} // Pass the ID to the handler\r\n                                />\r\n                              </td>\r\n                              <td>{i.first_name}</td>\r\n                              <td className=\"APActionButton\">\r\n                                <button\r\n                                  className=\"btn btn-secondary\"\r\n                                  onClick={() => handleDelete(i.slug)}\r\n                                >\r\n                                  <Tooltip title=\"Delete\">\r\n                                    <DeleteIcon />\r\n                                  </Tooltip>\r\n                                </button>\r\n                              </td>\r\n                            </tr>\r\n                          </>\r\n                        );\r\n                      })}\r\n                    </tbody> */}\r\n                  </table>\r\n                )}\r\n              </div>\r\n              {/* <div className=\"manageSubadminpart3\">\r\n                  <div className=\"functionalityButton\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-primary APButton4\"\r\n                      onClick={() => handleMultipleDelete()}\r\n                    >\r\n                      DELETE\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"pagination\">\r\n                    <Stack spacing={2}>\r\n                      <Pagination\r\n                        count={totalPages}\r\n                        color=\"primary\"\r\n                        page={currentPage}\r\n                        onChange={(event, page) => setCurrentPage(page)}\r\n                      />\r\n                    </Stack>\r\n                  </div>\r\n                </div> */}\r\n            </div>\r\n            <APFooter />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default APUnsubscribeUserlist;\r\n"],"names":["APUnsubscribeUserlist","navigate","useNavigate","loading","setLoading","useState","listData","setListData","checkedData","setCheckedData","searchQuery","setSearchQuery","tokenKey","Cookies","adminID","currentPage","setCurrentPage","dataPerPage","setDataPerPage","getData","async","response","axios","BaseApi","headers","key","ApiKey","token","adminid","data","error","console","log","sortConfig","setSortConfig","direction","symbol","setSymbol","sortedAndFilteredData","array","query","filter","item","first_name","toLowerCase","includes","last_name","username","email","sort","a","b","sortAndFilterData","filteredData","searchString","indexOfLastItem","indexOfFirstItem","totalPages","slice","Math","ceil","length","pageNumbers","i","push","useEffect","window","scrollTo","_jsxs","_Fragment","children","_jsx","APNavBar","className","APSidebar","role","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","underline","color","onClick","Typography","class","type","id","name","placeholder","value","onChange","e","newQuery","target","min","APFooter"],"sourceRoot":""}