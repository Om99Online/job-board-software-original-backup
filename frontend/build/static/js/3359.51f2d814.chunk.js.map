{"version":3,"file":"static/js/3359.51f2d814.chunk.js","mappings":"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","sources":["Components/login/JobseekerLogin.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport NavBar from \"../element/NavBar\";\r\nimport Footer from \"../element/Footer\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../api/BaseApi\";\r\nimport Swal from \"sweetalert2\";\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\nimport Cookies from \"js-cookie\";\r\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\r\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\r\nimport { Tooltip } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst JobseekerLogin = () => {\r\n  const [loginData, setLoginData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [isCaptchaVerified, setIsCaptchaVerified] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setLoginData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      [name]: \"\",\r\n    }));\r\n  };\r\n\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n  const userType = Cookies.get(\"user_type\");\r\n  const tokenClient = Cookies.get(\"tokenClient\");\r\n  const [t, i18n] = useTranslation(\"global\");\r\n  const recaptchaLanguage = Cookies.get(\"selectedLanguage\");\r\n  // const [pageChanges, setPageChanges] = useState();\r\n  const [hoverLoginColor, setHoverLoginColor] = useState(false);\r\n  const currentLanguage = Cookies.get(\"selectedLanguage\") || \"en\";\r\n\r\n  const handleLoginEnter = () => {\r\n    setHoverLoginColor(true);\r\n    // console.log(hoverColor)\r\n  };\r\n\r\n  const handleLoginLeave = () => {\r\n    setHoverLoginColor(false);\r\n  };\r\n\r\n  let primaryColor = Cookies.get(\"primaryColor\");\r\n  let secondaryColor = Cookies.get(\"secondaryColor\");\r\n  let siteLogo = Cookies.get(\"siteLogo\");\r\n  let captchaKey = Cookies.get(\"captchaKey\");\r\n\r\n  // const getSiteData = async () => {\r\n  //   try {\r\n  //     const response = await axios.get(BaseApi + \"/getconstant\");\r\n  //     setPageChanges(response.data.response.site_logo);\r\n  //   } catch (error) {\r\n  //     console.log(\"Error getting navbar logo information!\");\r\n  //   }\r\n  // };\r\n  // useEffect(() => {\r\n  //   getSiteData();\r\n  //   // window.scrollTo(0, 0);\r\n  // }, []);\r\n\r\n  const getData = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const newErrors = {};\r\n\r\n      if (loginData.email === \"\") {\r\n        newErrors.email = t(\"jobseekerLogin.emailRequired\");\r\n        window.scrollTo(0, 0);\r\n      } else if (!isValidEmail(loginData.email)) {\r\n        newErrors.email = t(\"jobseekerLogin.invalidEmail\");\r\n        window.scrollTo(0, 0);\r\n      }\r\n      if (loginData.password === \"\") {\r\n        newErrors.password = t(\"jobseekerLogin.passwordRequired\");\r\n        window.scrollTo(0, 0);\r\n      }\r\n      if (!isCaptchaVerified) {\r\n        newErrors.captcha = t(\"jobseekerLogin.captchaRequired\");\r\n      }\r\n\r\n      setErrors(newErrors);\r\n\r\n      // Function to validate email format\r\n      function isValidEmail(email) {\r\n        // Use a regular expression to validate email format\r\n        const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\r\n        return emailPattern.test(email);\r\n      }\r\n\r\n      if (Object.keys(newErrors).length === 0) {\r\n        if (isCaptchaVerified) {\r\n          setLoading(true);\r\n          const updatedData = {\r\n            ...loginData,\r\n            language: currentLanguage,\r\n          };\r\n\r\n          const response = await axios.post(\r\n            BaseApi + \"/users/login\",\r\n            updatedData\r\n          );\r\n          // console.log(response.data);\r\n          let status = response.data.status;\r\n\r\n          setLoading(false);\r\n          // console.log(\"Request sent successfully\");\r\n          if (status === 200 && response.data.response.user.token !== \"\") {\r\n            let userType = response.data.response.user.user_type;\r\n            if (userType !== \"candidate\") {\r\n              Swal.fire({\r\n                title: t(\"jobseekerLogin.wrongCredentials\"),\r\n                icon: \"error\",\r\n                confirmButtonText: t(\"jobseekerLogin.close\"),\r\n              });\r\n              setIsCaptchaVerified(false);\r\n            } else {\r\n              let tokenFetch = response.data.response.user.token;\r\n              let fnameFetch = response.data.response.user.first_name;\r\n              let usertypeFetch = response.data.response.user.user_type;\r\n              Cookies.set(\"tokenClient\", tokenFetch);\r\n              Cookies.set(\"fname\", fnameFetch);\r\n              Cookies.set(\"user_type\", usertypeFetch);\r\n              navigate(\"/candidates/myaccount\");\r\n              const Toast = Swal.mixin({\r\n                toast: true,\r\n                position: \"top-end\",\r\n                showConfirmButton: false,\r\n                timer: 3000,\r\n                timerProgressBar: true,\r\n                didOpen: (toast) => {\r\n                  toast.addEventListener(\"mouseenter\", Swal.stopTimer);\r\n                  toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\r\n                },\r\n              });\r\n\r\n              Toast.fire({\r\n                icon: \"success\",\r\n                title: t(\"jobseekerLogin.welcome\") + \" \" + fnameFetch,\r\n              });\r\n              setIsCaptchaVerified(false);\r\n            }\r\n          } else if (status === 500) {\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"error\",\r\n              // confirmButtonText: \"Close\",\r\n              timer: 3000,\r\n              timerProgressBar: true,\r\n            });\r\n            setIsCaptchaVerified(false);\r\n            // console.log(\"Error with credentials!\");\r\n            // const Toast = Swal.mixin({\r\n            //   toast: true,\r\n            //   position: \"top-end\",\r\n            //   showConfirmButton: false,\r\n            //   timer: 3000,\r\n            //   timerProgressBar: true,\r\n            //   didOpen: (toast) => {\r\n            //     toast.addEventListener(\"mouseenter\", Swal.stopTimer);\r\n            //     toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\r\n            //   },\r\n            // });\r\n\r\n            // Toast.fire({\r\n            //   icon: \"error\",\r\n            //   title: response.data.message,\r\n            // });\r\n          } else {\r\n            console.log(\"Nothing works\");\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: t(\"jobseekerLogin.failedTitle\"),\r\n        icon: \"error\",\r\n        confirmButtonText: t(\"jobseekerLogin.close\"),\r\n      });\r\n      setIsCaptchaVerified(false);\r\n      // console.log(\"Error sending login credentails\");\r\n    }\r\n  };\r\n\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setShowPassword(!showPassword);\r\n    console.log(setShowPassword);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      (tokenClient && userType === \"recruiter\") ||\r\n      (tokenClient && userType === \"candidate\")\r\n    ) {\r\n      navigate(\"/\");\r\n      const Toast = Swal.mixin({\r\n        toast: true,\r\n        position: \"top-end\",\r\n        showConfirmButton: false,\r\n        timer: 3000,\r\n        timerProgressBar: true,\r\n        didOpen: (toast) => {\r\n          toast.addEventListener(\"mouseenter\", Swal.stopTimer);\r\n          toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\r\n        },\r\n      });\r\n\r\n      Toast.fire({\r\n        icon: \"warning\",\r\n        title: t(\"jobseekerLogin.alreadyLoggedIn\"),\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      {loading ? (\r\n        <div className=\"loader-container\"></div>\r\n      ) : (\r\n        <>\r\n          <div className=\"container jobseekerLogin employerLogin\">\r\n            <div className=\"card rounded\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6 leftSection\">\r\n                  <img src=\"/Images/jobseekerLogin.jpg\" alt=\"\" />\r\n                </div>\r\n                <div className=\"col-md-6 mt-5\">\r\n                  <div className=\"text-center\">\r\n                    {siteLogo && <img src={siteLogo} alt=\"logo\" />}\r\n                    {!siteLogo && <img src=\"/Images/logo.png\" alt=\"\" />}\r\n                    {/* <img src=\"/Images/logo.png\" alt=\"\" /> */}\r\n                  </div>\r\n\r\n                  <div className=\"card-title text-center h3 pt-5\">\r\n                    {t(\"jobseekerLogin.jobseekerLogin\")}\r\n                  </div>\r\n                  <div className=\"card-body\">\r\n                    <form className=\"border border-light\" action=\"#!\">\r\n                      <div className=\"mb-4\">\r\n                        <input\r\n                          type=\"email\"\r\n                          id=\"defaultLoginFormEmail\"\r\n                          className={`form-control ${\r\n                            errors.email && \"input-error\"\r\n                          }`}\r\n                          value={loginData.email}\r\n                          placeholder={t(\"jobseekerLogin.email\")}\r\n                          name=\"email\"\r\n                          onChange={handleChange}\r\n                        />\r\n                        {errors.email && (\r\n                          <div className=\"text-danger\">{errors.email}</div>\r\n                        )}\r\n                      </div>\r\n\r\n                      <div className=\"passwordBox\">\r\n                        <input\r\n                          type={showPassword ? \"text\" : \"password\"} // Use the showPassword state variable to toggle the input type\r\n                          id=\"defaultLoginFormPassword\"\r\n                          className={`form-control ${\r\n                            errors.password && \"input-error\"\r\n                          }`}\r\n                          value={loginData.password}\r\n                          name=\"password\"\r\n                          placeholder={t(\"jobseekerLogin.password\")}\r\n                          onChange={handleChange}\r\n                        />\r\n                        <div className=\"passwordVisibility\">\r\n                          <p\r\n                            className=\"btn-primary\"\r\n                            type=\"button\"\r\n                            onClick={togglePasswordVisibility}\r\n                          >\r\n                            {showPassword ? (\r\n                              <>\r\n                                <Tooltip title=\"Hide Password\">\r\n                                  <VisibilityOffIcon />\r\n                                </Tooltip>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <Tooltip title=\"View Password\">\r\n                                  <VisibilityIcon />\r\n                                </Tooltip>\r\n                              </>\r\n                            )}\r\n                          </p>\r\n                        </div>\r\n                        {errors.password && (\r\n                          <div className=\"text-danger\">{errors.password}</div>\r\n                        )}\r\n                      </div>\r\n\r\n                      <div className=\"reCaptchaLogin\">\r\n                        <ReCAPTCHA\r\n                          sitekey={captchaKey}\r\n                          // hl={recaptchaLanguage}\r\n                          onChange={(value) => setIsCaptchaVerified(value)}\r\n                        />\r\n                        {errors.captcha && (\r\n                          <div className=\"text-danger CaptchaVerify\">\r\n                            {errors.captcha}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                      <div className=\"forgotPassword\">\r\n                        <Link to=\"/users/forgotpassword\">\r\n                          {t(\"jobseekerLogin.forgotPassword\")}\r\n                        </Link>\r\n                      </div>\r\n                      <div className=\"text-center\">\r\n                        <button\r\n                          onClick={getData}\r\n                          className=\"btn button1 my-4\"\r\n                          type=\"submit\"\r\n                          style={{\r\n                            backgroundColor: hoverLoginColor\r\n                              ? secondaryColor\r\n                              : primaryColor,\r\n                            border: hoverLoginColor\r\n                              ? secondaryColor\r\n                              : primaryColor,\r\n                          }}\r\n                          onMouseEnter={handleLoginEnter}\r\n                          onMouseLeave={handleLoginLeave}\r\n                        >\r\n                          {t(\"jobseekerLogin.login\")}\r\n                        </button>\r\n                      </div>\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Footer />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JobseekerLogin;\r\n"],"names":["JobseekerLogin","loginData","setLoginData","useState","email","password","errors","setErrors","isCaptchaVerified","setIsCaptchaVerified","handleChange","e","name","value","target","prev","navigate","useNavigate","loading","setLoading","userType","Cookies","tokenClient","t","i18n","useTranslation","hoverLoginColor","setHoverLoginColor","currentLanguage","primaryColor","secondaryColor","siteLogo","captchaKey","showPassword","setShowPassword","useEffect","window","scrollTo","Swal","toast","position","showConfirmButton","timer","timerProgressBar","didOpen","addEventListener","fire","icon","title","_jsxs","_Fragment","children","_jsx","NavBar","className","src","alt","action","type","id","placeholder","onChange","onClick","togglePasswordVisibility","console","log","Tooltip","VisibilityOffIcon","VisibilityIcon","ReCAPTCHA","sitekey","captcha","Link","to","async","preventDefault","newErrors","isValidEmail","test","Object","keys","length","updatedData","language","response","axios","BaseApi","status","data","user","token","user_type","confirmButtonText","tokenFetch","fnameFetch","first_name","usertypeFetch","message","error","style","backgroundColor","border","onMouseEnter","handleLoginEnter","onMouseLeave","handleLoginLeave","Footer"],"sourceRoot":""}