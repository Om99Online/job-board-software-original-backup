{"version":3,"file":"static/js/2508.ddf9340f.chunk.js","mappings":"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","sources":["Components/element/CheckoutForm.js","../node_modules/@stripe/stripe-js/dist/stripe.esm.js","Components/element/PaymentOption.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  PaymentElement,\r\n  useStripe,\r\n  useElements,\r\n} from \"@stripe/react-stripe-js\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../api/BaseApi\";\r\nimport ApiKey from \"../api/ApiKey\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nexport default function CheckoutForm() {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const navigate = useNavigate();\r\n  let transactionID = {\r\n    transaction_id: \"\",\r\n  };\r\n  const [message, setMessage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [paymentStatus, setPaymentStatus] = useState(false);\r\n  const { slug } = useParams();\r\n  const userType = Cookies.get(\"user_type\");\r\n  const tokenKey = Cookies.get(\"tokenClient\");\r\n\r\n\r\n  const handleSuccessApi = async (orderID) => {\r\n    try {\r\n      // console.log(orderID);\r\n      if (orderID) {\r\n        var currentSlug = sessionStorage.getItem(\"prePaymentSlug\");\r\n        transactionID.transaction_id = orderID;\r\n        // setPostPaymentDetail({ ...postPaymentDetail, transaction_id: orderID });\r\n        const response = await axios.post(\r\n          BaseApi + `/payments/checkoutSuccess/${currentSlug}`,\r\n          transactionID,\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n            },\r\n          }\r\n        );\r\n      } else {\r\n        console.log(\"Failed to generate order ID\");\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in handle success api\");\r\n    }\r\n  };\r\n\r\n  function generateRandomID() {\r\n    const characters =\r\n      \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n    const idLength = 17;\r\n    let randomID = \"\";\r\n\r\n    for (let i = 0; i < idLength; i++) {\r\n      const randomIndex = Math.floor(Math.random() * characters.length);\r\n      randomID += characters.charAt(randomIndex);\r\n    }\r\n\r\n    return randomID;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!stripe) {\r\n      return;\r\n    }\r\n\r\n    const clientSecret = new URLSearchParams(window.location.search).get(\r\n      \"payment_intent_client_secret\"\r\n    );\r\n\r\n    if (!clientSecret) {\r\n      return;\r\n    }\r\n\r\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\r\n      switch (paymentIntent.status) {\r\n        case \"succeeded\":\r\n          setMessage(\"Payment succeeded!\");\r\n          const randomTransactionID = generateRandomID();\r\n          console.log(randomTransactionID);\r\n          handleSuccessApi(randomTransactionID);\r\n          Swal.fire({\r\n            title: \"Payment succeeded!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n          if (userType === \"candidate\") {\r\n            navigate(\"/candidates/myaccount\");\r\n          }\r\n          if (userType === \"recruiter\") {\r\n            navigate(\"/user/myprofile\");\r\n          }\r\n          break;\r\n        case \"processing\":\r\n          setMessage(\"Your payment is processing.\");\r\n          Swal.fire({\r\n            title: \"Your payment is processing\",\r\n            icon: \"warning\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n          if (userType === \"candidate\") {\r\n            navigate(\"/candidates/myaccount\");\r\n          }\r\n          if (userType === \"recruiter\") {\r\n            navigate(\"/user/myprofile\");\r\n          }\r\n          break;\r\n        case \"requires_payment_method\":\r\n          setMessage(\"Your payment was not successful, please try again.\");\r\n          Swal.fire({\r\n            title: \"Your payment was not successful, please try again\",\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n          if (userType === \"candidate\") {\r\n            navigate(\"/candidates/myaccount\");\r\n          }\r\n          if (userType === \"recruiter\") {\r\n            navigate(\"/user/myprofile\");\r\n          }\r\n          break;\r\n        default:\r\n          setMessage(\"Something went wrong.\");\r\n          Swal.fire({\r\n            title: \"Something went wrong\",\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n          if (userType === \"candidate\") {\r\n            navigate(\"/candidates/myaccount\");\r\n          }\r\n          if (userType === \"recruiter\") {\r\n            navigate(\"/user/myprofile\");\r\n          }\r\n          break;\r\n      }\r\n    });\r\n  }, [stripe]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js hasn't yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    const { error } = await stripe.confirmPayment({\r\n      elements,\r\n      confirmParams: {\r\n        // Make sure to change this to your payment completion page\r\n        return_url:  `https://job-board-software.logicspice.com/payment/paymentoption/${slug}`,\r\n      },\r\n    });\r\n\r\n    // This point will only be reached if there is an immediate error when\r\n    // confirming the payment. Otherwise, your customer will be redirected to\r\n    // your `return_url`. For some payment methods like iDEAL, your customer will\r\n    // be redirected to an intermediate site first to authorize the payment, then\r\n    // redirected to the `return_url`.\r\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n      setMessage(error.message);\r\n      Swal.fire({\r\n        title: error.message,\r\n        icon: \"warning\",\r\n        confirmButtonText: \"Close\",\r\n      })\r\n    } else {\r\n      console.log(error.message);\r\n      Swal.fire({\r\n        title: error.message,\r\n        icon: \"warning\",\r\n        confirmButtonText: \"Close\",\r\n      })\r\n      setMessage(\"An unexpected error occurred.\");\r\n    }\r\n\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const paymentElementOptions = {\r\n    layout: \"tabs\",\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"stripeFormBox\"\r\n        style={{\r\n          padding: \"40px\",\r\n          margin: \"auto\",\r\n          marginTop: \"200px\",\r\n          width: \"600px\",\r\n          boxShadow: \"rgba(0, 0, 0, 0.24) 0px 3px 8px\",\r\n          borderRadius: \"5px\",\r\n          display: `${paymentStatus} && none`,\r\n        }}\r\n      >\r\n        <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n          <PaymentElement\r\n            id=\"payment-element\"\r\n            options={paymentElementOptions}\r\n          />\r\n          <button\r\n            className=\"payButtonStripe\"\r\n            disabled={isLoading || !stripe || !elements}\r\n            id=\"submit\"\r\n          >\r\n            <span id=\"button-text\">\r\n              {isLoading ? (\r\n                <div className=\"spinner\" id=\"spinner\"></div>\r\n              ) : (\r\n                \"Pay now\"\r\n              )}\r\n            </span>\r\n          </button>\r\n        </form>\r\n      </div>\r\n\r\n      {/* Show any error or success messages */}\r\n      {message && (\r\n        <>\r\n          <div id=\"payment-message\" className=\"stripePaymentMessage\"></div>\r\n          <Link to={userType === \"candidate\" ? \"/candidates/myaccount\" : \"/user/myprofile\"} className=\"navButton1\">My Profile</Link>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","var V3_URL = 'https://js.stripe.com/v3';\nvar V3_URL_REGEX = /^https:\\/\\/js\\.stripe\\.com\\/v3\\/?(\\?.*)?$/;\nvar EXISTING_SCRIPT_MESSAGE = 'loadStripe.setLoadParameters was called but an existing Stripe.js script already exists in the document; existing script parameters will be used';\nvar findScript = function findScript() {\n  var scripts = document.querySelectorAll(\"script[src^=\\\"\".concat(V3_URL, \"\\\"]\"));\n\n  for (var i = 0; i < scripts.length; i++) {\n    var script = scripts[i];\n\n    if (!V3_URL_REGEX.test(script.src)) {\n      continue;\n    }\n\n    return script;\n  }\n\n  return null;\n};\n\nvar injectScript = function injectScript(params) {\n  var queryString = params && !params.advancedFraudSignals ? '?advancedFraudSignals=false' : '';\n  var script = document.createElement('script');\n  script.src = \"\".concat(V3_URL).concat(queryString);\n  var headOrBody = document.head || document.body;\n\n  if (!headOrBody) {\n    throw new Error('Expected document.body not to be null. Stripe.js requires a <body> element.');\n  }\n\n  headOrBody.appendChild(script);\n  return script;\n};\n\nvar registerWrapper = function registerWrapper(stripe, startTime) {\n  if (!stripe || !stripe._registerWrapper) {\n    return;\n  }\n\n  stripe._registerWrapper({\n    name: 'stripe-js',\n    version: \"2.2.0\",\n    startTime: startTime\n  });\n};\n\nvar stripePromise = null;\nvar loadScript = function loadScript(params) {\n  // Ensure that we only attempt to load Stripe.js at most once\n  if (stripePromise !== null) {\n    return stripePromise;\n  }\n\n  stripePromise = new Promise(function (resolve, reject) {\n    if (typeof window === 'undefined' || typeof document === 'undefined') {\n      // Resolve to null when imported server side. This makes the module\n      // safe to import in an isomorphic code base.\n      resolve(null);\n      return;\n    }\n\n    if (window.Stripe && params) {\n      console.warn(EXISTING_SCRIPT_MESSAGE);\n    }\n\n    if (window.Stripe) {\n      resolve(window.Stripe);\n      return;\n    }\n\n    try {\n      var script = findScript();\n\n      if (script && params) {\n        console.warn(EXISTING_SCRIPT_MESSAGE);\n      } else if (!script) {\n        script = injectScript(params);\n      }\n\n      script.addEventListener('load', function () {\n        if (window.Stripe) {\n          resolve(window.Stripe);\n        } else {\n          reject(new Error('Stripe.js not available'));\n        }\n      });\n      script.addEventListener('error', function () {\n        reject(new Error('Failed to load Stripe.js'));\n      });\n    } catch (error) {\n      reject(error);\n      return;\n    }\n  });\n  return stripePromise;\n};\nvar initStripe = function initStripe(maybeStripe, args, startTime) {\n  if (maybeStripe === null) {\n    return null;\n  }\n\n  var stripe = maybeStripe.apply(undefined, args);\n  registerWrapper(stripe, startTime);\n  return stripe;\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n// own script injection.\n\nvar stripePromise$1 = Promise.resolve().then(function () {\n  return loadScript(null);\n});\nvar loadCalled = false;\nstripePromise$1[\"catch\"](function (err) {\n  if (!loadCalled) {\n    console.warn(err);\n  }\n});\nvar loadStripe = function loadStripe() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  loadCalled = true;\n  var startTime = Date.now();\n  return stripePromise$1.then(function (maybeStripe) {\n    return initStripe(maybeStripe, args, startTime);\n  });\n};\n\nexport { loadStripe };\n","import React, { useEffect, useState } from \"react\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport CheckoutForm from \"../element/CheckoutForm\";\r\nimport BaseApi from \"../api/BaseApi\";\r\nimport ApiKey from \"../api/ApiKey\";\r\nimport Cookies from \"js-cookie\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\n// stripe publishable key\r\n\r\nlet stripe_pk = Cookies.get(\"stripe_pk\");\r\n// This is your test publishable API key.\r\nconst stripePromise = loadStripe(stripe_pk);\r\n\r\nconst PaymentOption = () => {\r\n  const [clientSecret, setClientSecret] = useState(\"\");\r\n  const tokenKey = Cookies.get(\"tokenClient\");\r\n  const userType = Cookies.get(\"user_type\");\r\n  const navigate = useNavigate();\r\n\r\n  const { slug } = useParams();\r\n\r\n  useEffect(() => {\r\n    // Create PaymentIntent as soon as the page loads\r\n    fetch(BaseApi + \"/payments/PayWithStripe\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        key: ApiKey,\r\n        token: tokenKey,\r\n      },\r\n      body: JSON.stringify({\r\n        plan_id: slug,\r\n        payment_option: \"stripe\",\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => setClientSecret(data.clientSecret));\r\n  }, []);\r\n\r\n\r\n  let PrePaymentSlug = \"\";\r\n\r\n  const paymentButtonClick = async (slug) => {\r\n    // console.log(details);\r\n    try {\r\n      const response = await axios.post(\r\n        BaseApi + \"/payments/planpurchase\",\r\n        {\r\n          plan_id: slug,\r\n          payment_option: \"stripe\",\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n          },\r\n        }\r\n      );\r\n      if (response.data.status === 200) {\r\n        PrePaymentSlug = response.data.response.slug;\r\n      } else{\r\n        if (userType === \"candidate\") {\r\n          navigate(\"/candidates/myaccount\");\r\n        }\r\n        if (userType === \"recruiter\") {\r\n          navigate(\"/user/myprofile\");\r\n        }\r\n      }\r\n      sessionStorage.setItem(\"prePaymentSlug\", PrePaymentSlug);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    paymentButtonClick(slug);\r\n  }, []);\r\n\r\n  const appearance = {\r\n    theme: \"stripe\",\r\n  };\r\n  const options = {\r\n    clientSecret,\r\n    appearance,\r\n  };\r\n  return (\r\n    <div>\r\n      {clientSecret ? (\r\n        <Elements options={options} stripe={stripePromise}>\r\n          <CheckoutForm />\r\n        </Elements>\r\n      ) : (\r\n        <>\r\n          <div className=\"pleaseWaitStripe\">\r\n            <img src=\"/Images/credit-card.gif\" alt=\"payment\" />\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaymentOption;\r\n"],"names":["CheckoutForm","stripe","useStripe","elements","useElements","navigate","useNavigate","transactionID","transaction_id","message","setMessage","useState","isLoading","setIsLoading","paymentStatus","setPaymentStatus","slug","useParams","userType","Cookies","tokenKey","useEffect","clientSecret","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","_ref","paymentIntent","status","randomTransactionID","characters","randomID","i","randomIndex","Math","floor","random","charAt","generateRandomID","console","log","async","orderID","currentSlug","sessionStorage","getItem","axios","BaseApi","headers","key","ApiKey","token","error","handleSuccessApi","Swal","title","icon","confirmButtonText","_jsxs","_Fragment","children","_jsx","className","style","padding","margin","marginTop","width","boxShadow","borderRadius","display","id","onSubmit","e","preventDefault","confirmPayment","confirmParams","return_url","type","PaymentElement","options","layout","disabled","Link","to","V3_URL","V3_URL_REGEX","EXISTING_SCRIPT_MESSAGE","stripePromise","loadScript","params","Promise","resolve","reject","document","Stripe","warn","script","scripts","querySelectorAll","concat","length","test","src","findScript","queryString","advancedFraudSignals","createElement","headOrBody","head","body","Error","appendChild","injectScript","addEventListener","stripePromise$1","loadCalled","err","_len","arguments","args","Array","_key","startTime","Date","now","maybeStripe","apply","undefined","_registerWrapper","name","version","registerWrapper","initStripe","loadStripe","PaymentOption","setClientSecret","fetch","method","JSON","stringify","plan_id","payment_option","res","json","data","PrePaymentSlug","response","setItem","paymentButtonClick","appearance","theme","Elements","alt"],"sourceRoot":""}