{"version":3,"file":"static/js/8610.8d9de3b4.chunk.js","mappings":"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","sources":["Components/adminpanel/Jobs/APImportJobElements.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport APNavBar from \"../Elements/APNavBar\";\r\nimport APSidebar from \"../APSidebar/APSidebar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Link from \"@mui/material/Link\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../../api/BaseApi\";\r\nimport ApiKey from \"../../api/ApiKey\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Cookies from \"js-cookie\";\r\nimport APFooter from \"../Elements/APFooter\";\r\n\r\nconst APImportJobElements = () => {\r\n  const [userData, setUserData] = useState({\r\n    xml_url: \"\",\r\n    employer_id: \"\",\r\n    job_title: \"\",\r\n    job_discription: \"\",\r\n    job_category: \"\",\r\n    job_skills: \"\",\r\n    job_designation: \"\",\r\n    job_location: \"\",\r\n    work_type: \"\",\r\n    expirydate: \"\",\r\n    comapany_name: \"\",\r\n    comapany_website: \"\",\r\n    contact_person: \"\",\r\n    tagNames: \"\",\r\n    // company_name: \"\"\r\n  });\r\n\r\n  const [xmlData, setXmlData] = useState({\r\n    xml_url: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    xml_url: \"\",\r\n    employer_id: \"\",\r\n    job_title: \"\",\r\n    job_discription: \"\",\r\n    job_category: \"\",\r\n    job_skills: \"\",\r\n    job_designation: \"\",\r\n    job_location: \"\",\r\n    work_type: \"\",\r\n    expirydate: \"\",\r\n    comapany_name: \"\",\r\n    comapany_website: \"\",\r\n    contact_person: \"\",\r\n    // company_name: \"\"\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [employersData, setEmployersData] = useState([]);\r\n  const [tagData, setTagData] = useState([]);\r\n\r\n  const tokenKey = Cookies.get(\"token\");\r\n  const adminID = Cookies.get(\"adminID\");\r\n\r\n  const existingXml = Cookies.get(\"xml_url\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUserData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      [name]: \"\",\r\n    }));\r\n    console.log(userData);\r\n  };\r\n\r\n  // function to get the employer data\r\n  const getData = async () => {\r\n    try {\r\n    //   setXmlData((prev) => ({\r\n    //     ...prev,\r\n    //     xml_url: existingXml,\r\n    //   }));\r\n    //   xmlData && \r\n\r\n      console.log(\"xmlData\", existingXml);\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + \"/admin/job/admin_jobimportdata\",\r\n        {xml_url : existingXml},\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n            adminid: adminID,\r\n          },\r\n        }\r\n      );\r\n      setLoading(false);\r\n      setEmployersData(response.data.response.employer_id);\r\n      setTagData(response.data.response.tagNames);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.log(\"Error at import jobs at Admin panel\");\r\n    }\r\n  };\r\n\r\n  // Function to sumbit the data on API\r\n  const handleClick = async () => {\r\n    try {\r\n      const newErrors = {};\r\n\r\n    //   if (userData.xml_url === \"\") {\r\n    //     newErrors.xml_url = \"URL is required\";\r\n    //     window.scrollTo(0, 0);\r\n    //   } else {\r\n    //     // Regular expression pattern to match a valid URL\r\n    //     const urlPattern = /^(https:\\/\\/)(www\\.)?[\\w.-]+\\.[a-z]{2,5}(\\/\\S*)?$/i;\r\n\r\n    //     if (!urlPattern.test(userData.xml_url)) {\r\n    //       newErrors.xml_url = \"Invalid URL format\";\r\n    //       // window.scrollTo(0, 0);\r\n    //     }\r\n    //   }\r\n      if (userData.employer_id === \"\") {\r\n        newErrors.employer_id = \"Please select a company\";\r\n        // window.scrollTo(0, 0);\r\n      }\r\n      if (userData.job_title === \"\") {\r\n        newErrors.job_title = \"Job title is required\";\r\n      }\r\n      if (userData.job_discription === \"\") {\r\n        newErrors.job_discription = \"Job discription is required\";\r\n      }\r\n      if (userData.job_category === \"\") {\r\n        newErrors.job_category = \"Job category is required\";\r\n      }\r\n      if (userData.job_skills === \"\") {\r\n        newErrors.job_skills = \"Job skills is required\";\r\n      }\r\n      if (userData.job_designation === \"\") {\r\n        newErrors.job_designation = \"Job designation is required\";\r\n      }\r\n      if (userData.job_location === \"\") {\r\n        newErrors.job_location = \"Job location is required\";\r\n      }\r\n      if (userData.work_type === \"\") {\r\n        newErrors.work_type = \"Work type is required\";\r\n      }\r\n      if (userData.expirydate === \"\") {\r\n        newErrors.expirydate = \"Expiry date is required\";\r\n      }\r\n\r\n      if (userData.comapany_name === \"\") {\r\n        newErrors.comapany_name = \"Company name is required\";\r\n      }\r\n\r\n      if (userData.comapany_website === \"\") {\r\n        newErrors.comapany_website = \"Company website is required\";\r\n      }\r\n\r\n      if (userData.contact_person === \"\") {\r\n        newErrors.contact_person = \"Contact person is required\";\r\n      }\r\n\r\n      setErrors(newErrors);\r\n\r\n      if (Object.keys(newErrors).length === 0) {\r\n        const confirmationResult = await Swal.fire({\r\n          title: \"Import?\",\r\n          text: \"Do you want to Import Jobs?\",\r\n          icon: \"question\",\r\n          showCancelButton: true,\r\n          confirmButtonText: \"Yes\",\r\n          cancelButtonText: \"No\",\r\n        });\r\n\r\n        if (confirmationResult.isConfirmed) {\r\n          setLoading(true);\r\n\r\n          const updatedData = {\r\n            ...userData,\r\n            tagNames: tagData,\r\n            xml_url: existingXml,\r\n          };\r\n\r\n          const response = await axios.post(\r\n            BaseApi + \"/admin/job/admin_jobimportnew\",\r\n            updatedData,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                key: ApiKey,\r\n                token: tokenKey,\r\n                adminid: adminID,\r\n              },\r\n            }\r\n          );\r\n\r\n          setLoading(false);\r\n\r\n          if (response.data.status === 200) {\r\n            Swal.fire({\r\n              title: \"Jobs Imported successfully!\",\r\n              icon: \"success\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n            // getData();\r\n            // setUserData({\r\n            //   ...userData,\r\n            //   xml_url: \"\",\r\n            //   employer_id: \"\",\r\n            // });\r\n            // window.scrollTo(0, 0);\r\n            navigate(\"/admin/jobs/importlist\");\r\n          } else {\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"error\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed\",\r\n        text: \"Could not Import Jobs. Please try again later!\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Could not change username!\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the login page\r\n      navigate(\"/admin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  return (\r\n    <>\r\n      <APNavBar />\r\n      <div className=\"APBasic\">\r\n        <APSidebar />\r\n\r\n        {loading ? (\r\n          <>\r\n            <div className=\"loader-container\"></div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"site-min-height\">\r\n              <div className=\"breadCumb1\" role=\"presentation\">\r\n                <Breadcrumbs\r\n                  aria-label=\"breadcrumb\"\r\n                  separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                >\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/admins/dashboard\")}\r\n                  >\r\n                    Dashboard\r\n                  </Link>\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/candidates\")}\r\n                  >\r\n                    List Jobs\r\n                  </Link>\r\n\r\n                  <Typography color=\"text.primary\">New Import Jobs</Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n\r\n              <h2 className=\"adminPageHeading\">New Import Jobs</h2>\r\n              <form className=\"adminForm\">\r\n                <div className=\"mb-4 mt-5\">\r\n                  {/* <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      XML Feed URL<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example1\"\r\n                      className={`form-control ${\r\n                        errors.xml_url && \"input-error\"\r\n                      }`}\r\n                      name=\"xml_url\"\r\n                      placeholder=\"XML URL\"\r\n                      value={userData.xml_url}\r\n                      onChange={handleChange}\r\n                    />\r\n                    {errors.xml_url && (\r\n                      <div className=\"text-danger\">{errors.xml_url}</div>\r\n                    )}\r\n                  </div> */}\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Company Name<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.employer_id && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"employer_id\"\r\n                      value={userData.employer_id}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        Select Company\r\n                      </option>\r\n                      {employersData.map((i) => {\r\n                        return (\r\n                          <option value={i.id}>\r\n                            {i.company_name ? i.company_name : i.first_name}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                    </select>\r\n                    {errors.employer_id && (\r\n                      <div className=\"text-danger\">{errors.employer_id}</div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Job Title<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.job_title && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"job_title\"\r\n                      value={userData.job_title}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        Select Tag\r\n                      </option>\r\n                      {Object.entries(tagData).map(([key, values]) => {\r\n                        return <option value={values}>{values}</option>;\r\n                      })}\r\n                    </select>\r\n                    {errors.job_title && (\r\n                      <div className=\"text-danger\">{errors.job_title}</div>\r\n                    )}\r\n                  </div>\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Job Description<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.job_discription && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"job_discription\"\r\n                      value={userData.job_discription}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        Select Tag\r\n                      </option>\r\n                      {Object.entries(tagData).map(([key, values]) => {\r\n                        return <option value={values}>{values}</option>;\r\n                      })}\r\n                    </select>\r\n                    {errors.job_discription && (\r\n                      <div className=\"text-danger\">\r\n                        {errors.job_discription}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Job Category<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.job_category && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"job_category\"\r\n                      value={userData.job_category}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        Select Tag\r\n                      </option>\r\n                      {Object.entries(tagData).map(([key, values]) => {\r\n                        return <option value={values}>{values}</option>;\r\n                      })}\r\n                    </select>\r\n                    {errors.job_category && (\r\n                      <div className=\"text-danger\">{errors.job_category}</div>\r\n                    )}\r\n                  </div>\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Job Skills<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.job_skills && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"job_skills\"\r\n                      value={userData.job_skills}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        Select Tag\r\n                      </option>\r\n                      {Object.entries(tagData).map(([key, values]) => {\r\n                        return <option value={values}>{values}</option>;\r\n                      })}\r\n                    </select>\r\n                    {errors.job_skills && (\r\n                      <div className=\"text-danger\">{errors.job_skills}</div>\r\n                    )}\r\n                  </div>\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Job Designation<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.job_designation && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"job_designation\"\r\n                      value={userData.job_designation}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        Select Tag\r\n                      </option>\r\n                      {Object.entries(tagData).map(([key, values]) => {\r\n                        return <option value={values}>{values}</option>;\r\n                      })}\r\n                    </select>\r\n                    {errors.job_designation && (\r\n                      <div className=\"text-danger\">\r\n                        {errors.job_designation}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Job Location<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.job_location && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"job_location\"\r\n                      value={userData.job_location}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        Select Tag\r\n                      </option>\r\n                      {Object.entries(tagData).map(([key, values]) => {\r\n                        return <option value={values}>{values}</option>;\r\n                      })}\r\n                    </select>\r\n                    {errors.job_location && (\r\n                      <div className=\"text-danger\">{errors.job_location}</div>\r\n                    )}\r\n                  </div>\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Work Type<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.work_type && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"work_type\"\r\n                      value={userData.work_type}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        Select Tag\r\n                      </option>\r\n                      {Object.entries(tagData).map(([key, values]) => {\r\n                        return <option value={values}>{values}</option>;\r\n                      })}\r\n                    </select>\r\n                    {errors.work_type && (\r\n                      <div className=\"text-danger\">{errors.work_type}</div>\r\n                    )}\r\n                  </div>\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Expiry Date<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.expirydate && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"expirydate\"\r\n                      value={userData.expirydate}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        Select Tag\r\n                      </option>\r\n                      {Object.entries(tagData).map(([key, values]) => {\r\n                        return <option value={values}>{values}</option>;\r\n                      })}\r\n                    </select>\r\n                    {errors.expirydate && (\r\n                      <div className=\"text-danger\">{errors.expirydate}</div>\r\n                    )}\r\n                  </div>\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Company Name<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.comapany_name && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"comapany_name\"\r\n                      value={userData.comapany_name}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        Select Tag\r\n                      </option>\r\n                      {Object.entries(tagData).map(([key, values]) => {\r\n                        return <option value={values}>{values}</option>;\r\n                      })}\r\n                    </select>\r\n                    {errors.comapany_name && (\r\n                      <div className=\"text-danger\">{errors.comapany_name}</div>\r\n                    )}\r\n                  </div>\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Company Website<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.comapany_website && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"comapany_website\"\r\n                      value={userData.comapany_website}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        Select Tag\r\n                      </option>\r\n                      {Object.entries(tagData).map(([key, values]) => {\r\n                        return <option value={values}>{values}</option>;\r\n                      })}\r\n                    </select>\r\n                    {errors.comapany_website && (\r\n                      <div className=\"text-danger\">\r\n                        {errors.comapany_website}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Contact Person<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.contact_person && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"contact_person\"\r\n                      value={userData.contact_person}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        Select Tag\r\n                      </option>\r\n                      {Object.entries(tagData).map(([key, values]) => {\r\n                        return <option value={values}>{values}</option>;\r\n                      })}\r\n                    </select>\r\n                    {errors.contact_person && (\r\n                      <div className=\"text-danger\">{errors.contact_person}</div>\r\n                    )}\r\n                  </div>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button1\"\r\n                    onClick={handleClick}\r\n                  >\r\n                    NEXT\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <APFooter />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default APImportJobElements;\r\n"],"names":["APImportJobElements","userData","setUserData","useState","xml_url","employer_id","job_title","job_discription","job_category","job_skills","job_designation","job_location","work_type","expirydate","comapany_name","comapany_website","contact_person","tagNames","xmlData","setXmlData","errors","setErrors","loading","setLoading","employersData","setEmployersData","tagData","setTagData","tokenKey","Cookies","adminID","existingXml","navigate","useNavigate","handleChange","e","name","value","target","prev","console","log","useEffect","async","response","axios","BaseApi","headers","key","ApiKey","token","adminid","data","error","getData","window","scrollTo","_jsxs","_Fragment","children","_jsx","APNavBar","className","APSidebar","role","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","underline","color","onClick","Typography","class","for","onChange","selected","map","i","id","company_name","first_name","Object","entries","_ref","values","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","type","newErrors","keys","length","Swal","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","isConfirmed","updatedData","status","message","APFooter"],"sourceRoot":""}