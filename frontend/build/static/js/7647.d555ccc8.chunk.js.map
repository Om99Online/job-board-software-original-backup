{"version":3,"file":"static/js/7647.d555ccc8.chunk.js","mappings":"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","sources":["Components/login/EmployerLogin.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport NavBar from \"../element/NavBar\";\r\nimport Footer from \"../element/Footer\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../api/BaseApi\";\r\nimport Swal from \"sweetalert2\";\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\nimport Cookies from \"js-cookie\";\r\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\r\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\r\nimport { Tooltip } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst EmployerLogin = () => {\r\n  const [loginData, setLoginData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [isCaptchaVerified, setIsCaptchaVerified] = useState(false);\r\n  const [t, i18n] = useTranslation(\"global\");\r\n  const recaptchaLanguage = Cookies.get(\"selectedLanguage\");\r\n  const currentLanguage = Cookies.get(\"selectedLanguage\") || \"en\";\r\n\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setLoginData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      [name]: \"\",\r\n    }));\r\n  };\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // const [pageChanges, setPageChanges] = useState();\r\n  const [hoverLoginColor, setHoverLoginColor] = useState(false);\r\n\r\n  const handleLoginEnter = () => {\r\n    setHoverLoginColor(true);\r\n    // console.log(hoverColor)\r\n  };\r\n\r\n  const handleLoginLeave = () => {\r\n    setHoverLoginColor(false);\r\n  };\r\n\r\n  let primaryColor = Cookies.get(\"primaryColor\");\r\n  let secondaryColor = Cookies.get(\"secondaryColor\");\r\n  let siteLogo = Cookies.get(\"siteLogo\");\r\n  let captchaKey = Cookies.get(\"captchaKey\");\r\n\r\n  // const getSiteData = async () => {\r\n  //   try {\r\n  //     const response = await axios.get(BaseApi + \"/getconstant\");\r\n  //     setPageChanges(response.data.response.site_logo);\r\n  //   } catch (error) {\r\n  //     console.log(\"Error getting navbar logo information!\");\r\n  //   }\r\n  // };\r\n  // useEffect(() => {\r\n  //   // getSiteData();\r\n  //   // window.scrollTo(0, 0);\r\n  // }, []);\r\n\r\n  const getData = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const newErrors = {};\r\n\r\n      if (loginData.email === \"\") {\r\n        newErrors.email = t(\"employerLogin.emailRequired\");\r\n        window.scrollTo(0, 0);\r\n      } else if (!isValidEmail(loginData.email)) {\r\n        newErrors.email = t(\"employerLogin.invalidEmail\");\r\n        window.scrollTo(0, 0);\r\n      }\r\n      if (loginData.password === \"\") {\r\n        newErrors.password = t(\"employerLogin.passwordRequired\");\r\n        window.scrollTo(0, 0);\r\n      }\r\n      if (!isCaptchaVerified) {\r\n        newErrors.captcha = t(\"employerLogin.captchaRequired\");\r\n      }\r\n\r\n      setErrors(newErrors);\r\n\r\n      // Function to validate email format\r\n      function isValidEmail(email) {\r\n        // Use a regular expression to validate email format\r\n        const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\r\n        return emailPattern.test(email);\r\n      }\r\n\r\n      if (Object.keys(newErrors).length === 0) {\r\n        if (isCaptchaVerified) {\r\n          setLoading(true);\r\n\r\n          const updatedData = {\r\n            ...loginData,\r\n            language: currentLanguage\r\n          }\r\n\r\n          const response = await axios.post(\r\n            BaseApi + \"/users/login\",\r\n            updatedData\r\n          );\r\n\r\n          // console.log(response);\r\n\r\n          let status = response.data.status;\r\n\r\n          setLoading(false);\r\n          // console.log(\"Request sent successfully\", response.data.status);\r\n          if (status == 200 && response.data.response.user.token !== \"\") {\r\n            let userType = response.data.response.user.user_type;\r\n            if (userType !== \"recruiter\") {\r\n              Swal.fire({\r\n                title: t(\"employerLogin.wrongCredentials\"),\r\n                icon: \"error\",\r\n                confirmButtonText: t(\"employerLogin.close\"),\r\n              });\r\n              setIsCaptchaVerified(false);\r\n            } else {\r\n              let tokenFetch = response.data.response.user.token;\r\n              // console.log(\"hai\")\r\n              let fnameFetch = response.data.response.user.first_name;\r\n              let usertypeFetch = response.data.response.user.user_type;\r\n\r\n              // console.log(\"200 hit\");\r\n              // Storing data in sessionStorage\r\n              // sessionStorage.setItem(\"token\", tokenFetch);\r\n              // sessionStorage.setItem(\"fname\", fnameFetch);\r\n              // sessionStorage.setItem(\"user_type\", usertypeFetch);\r\n\r\n              Cookies.set(\"tokenClient\", tokenFetch);\r\n              Cookies.set(\"fname\", fnameFetch);\r\n              Cookies.set(\"user_type\", usertypeFetch);\r\n              navigate(\"/user/myprofile\");\r\n              const Toast = Swal.mixin({\r\n                toast: true,\r\n                position: \"top-end\",\r\n                showConfirmButton: false,\r\n                timer: 3000,\r\n                timerProgressBar: true,\r\n                didOpen: (toast) => {\r\n                  toast.addEventListener(\"mouseenter\", Swal.stopTimer);\r\n                  toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\r\n                },\r\n              });\r\n\r\n              Toast.fire({\r\n                icon: \"success\",\r\n                title: t(\"employerLogin.welcome\")+\" \"+ fnameFetch,\r\n              });\r\n              setIsCaptchaVerified(false);\r\n            }\r\n          }\r\n          if (status == 500) {\r\n            \r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"error\",\r\n              // confirmButtonText: \"Close\",\r\n              timer: 3000,\r\n              timerProgressBar: true,\r\n            });\r\n            setIsCaptchaVerified(false);\r\n\r\n            // Toast.fire({\r\n            //   icon: \"error\",\r\n            //   title: response.data.message,\r\n            // });\r\n          } else {\r\n            console.log(\"Nothing works\");\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: t(\"employerLogin.failedTitle\"),\r\n        icon: \"error\",\r\n        confirmButtonText: t(\"employerLogin.close\"),\r\n      });\r\n      setIsCaptchaVerified(false);\r\n      // console.log(\"Error sending login credentails\");\r\n    }\r\n  };\r\n\r\n  const [showPassword, setShowPassword] = useState(false); // New state variable\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      {loading ? (\r\n        <div className=\"loader-container\"></div>\r\n      ) : (\r\n        <>\r\n          <div className=\"container employerLogin\">\r\n            <div className=\"card rounded\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6 leftSection\">\r\n                  <img src=\"/Images/employerlogin.jpg\" alt=\"\" />\r\n                </div>\r\n                <div className=\"col-md-6  mt-3\">\r\n                  <div className=\"text-center\">\r\n                    {siteLogo && <img src={siteLogo} alt=\"logo\" />}\r\n                    {!siteLogo && <img src=\"/Images/logo.png\" alt=\"\" />}\r\n                  </div>\r\n\r\n                  <div className=\"card-title text-center h3 pt-5\">\r\n                    {t(\"employerLogin.EmployerLogin\")}\r\n                  </div>\r\n                  <div className=\"card-body\">\r\n                    <form className=\" border border-light\">\r\n                      <div className=\"mb-4\">\r\n                        <input\r\n                          type=\"email\"\r\n                          id=\"defaultLoginFormEmail\"\r\n                          className={`form-control ${\r\n                            errors.email && \"input-error\"\r\n                          }`}\r\n                          value={loginData.email}\r\n                          placeholder={t(\"employerLogin.email\")}\r\n                          name=\"email\"\r\n                          onChange={handleChange}\r\n                        />\r\n                        {errors.email && (\r\n                          <div className=\"text-danger\">{errors.email}</div>\r\n                        )}\r\n                      </div>\r\n                      <div className=\"passwordBox\">\r\n                        <input\r\n                          type={showPassword ? \"text\" : \"password\"} // Use the showPassword state variable to toggle the input type\r\n                          id=\"defaultLoginFormPassword\"\r\n                          className={`form-control ${\r\n                            errors.password && \"input-error\"\r\n                          }`}\r\n                          value={loginData.password}\r\n                          name=\"password\"\r\n                          placeholder={t(\"employerLogin.password\")}\r\n                          onChange={handleChange}\r\n                        />\r\n                        <div className=\"passwordVisibility\">\r\n                          <p\r\n                            className=\"btn-primary\"\r\n                            type=\"button\"\r\n                            onClick={togglePasswordVisibility}\r\n                          >\r\n                            {showPassword ? (\r\n                              <>\r\n                                <Tooltip title=\"Hide Password\">\r\n                                  <VisibilityOffIcon />\r\n                                </Tooltip>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <Tooltip title=\"View Password\">\r\n                                  <VisibilityIcon />\r\n                                </Tooltip>\r\n                              </>\r\n                            )}\r\n                          </p>\r\n                        </div>\r\n                        {errors.password && (\r\n                          <div className=\"text-danger\">{errors.password}</div>\r\n                        )}\r\n                      </div>\r\n                      \r\n\r\n                      <div className=\"reCaptchaLogin\">\r\n                        <ReCAPTCHA\r\n                          sitekey={captchaKey}\r\n                          // hl={recaptchaLanguage}\r\n                          onChange={(value) => setIsCaptchaVerified(value)}\r\n                        />\r\n                        {errors.captcha && (\r\n                          <div className=\"text-danger CaptchaVerify\">\r\n                            {errors.captcha}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                      <div className=\"forgotPassword\">\r\n                        <Link to=\"/users/forgotpassword\">{t(\"employerLogin.forgotPassword\")}</Link>\r\n                      </div>\r\n                      <div className=\"text-center\">\r\n                        <button\r\n                          className=\"btn button1 my-4 \"\r\n                          type=\"submit\"\r\n                          onClick={getData}\r\n                          style={{\r\n                            backgroundColor: hoverLoginColor\r\n                              ? secondaryColor\r\n                              : primaryColor,\r\n                            border: hoverLoginColor\r\n                              ? secondaryColor\r\n                              : primaryColor,\r\n                          }}\r\n                          onMouseEnter={handleLoginEnter}\r\n                          onMouseLeave={handleLoginLeave}\r\n                        >\r\n                          {t(\"employerLogin.login\")}\r\n                        </button>\r\n                      </div>\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Footer />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EmployerLogin;\r\n"],"names":["EmployerLogin","loginData","setLoginData","useState","email","password","errors","setErrors","isCaptchaVerified","setIsCaptchaVerified","t","i18n","useTranslation","currentLanguage","Cookies","handleChange","e","name","value","target","prev","navigate","useNavigate","loading","setLoading","hoverLoginColor","setHoverLoginColor","primaryColor","secondaryColor","siteLogo","captchaKey","showPassword","setShowPassword","useEffect","window","scrollTo","_jsxs","_Fragment","children","_jsx","NavBar","className","src","alt","type","id","placeholder","onChange","onClick","togglePasswordVisibility","Tooltip","title","VisibilityOffIcon","VisibilityIcon","ReCAPTCHA","sitekey","captcha","Link","to","async","preventDefault","newErrors","isValidEmail","test","Object","keys","length","updatedData","language","response","axios","BaseApi","status","data","user","token","user_type","Swal","icon","confirmButtonText","tokenFetch","fnameFetch","first_name","usertypeFetch","toast","position","showConfirmButton","timer","timerProgressBar","didOpen","addEventListener","fire","message","console","log","error","style","backgroundColor","border","onMouseEnter","handleLoginEnter","onMouseLeave","handleLoginLeave","Footer"],"sourceRoot":""}