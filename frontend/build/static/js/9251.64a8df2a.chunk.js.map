{"version":3,"file":"static/js/9251.64a8df2a.chunk.js","mappings":"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","sources":["Components/jobseekersSide/JSAppliedJobs.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Footer from \"../element/Footer\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport JSSidebar from \"./JSSidebar\";\r\nimport NavBar from \"../element/NavBar\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../api/BaseApi\";\r\nimport ApiKey from \"../api/ApiKey\";\r\nimport Cookies from \"js-cookie\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Swal from \"sweetalert2\";\r\nimport { CiCircleInfo } from \"react-icons/ci\";\r\n\r\nconst JSAppliedJobs = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [appliedJobs, setAppliedJobs] = useState([]);\r\n\r\n  const tokenKey = Cookies.get(\"tokenClient\");\r\n\r\n  const navigate = useNavigate();\r\n  let primaryColor = Cookies.get(\"primaryColor\");\r\n  let secondaryColor = Cookies.get(\"secondaryColor\");\r\n  const [t, i18n] = useTranslation(\"global\");\r\n\r\n  const [hoverFirstButtonColor, setHoverFirstButtonColor] = useState(false);\r\n\r\n  const handleFirstButtonMouseEnter = () => {\r\n    setHoverFirstButtonColor(true);\r\n  };\r\n\r\n  const handleFirstButtonMouseLeave = () => {\r\n    setHoverFirstButtonColor(false);\r\n  };\r\n\r\n  const [hoverSecondButtonColor, setHoverSecondButtonColor] = useState(false);\r\n\r\n  const handleSecondButtonMouseEnter = () => {\r\n    setHoverSecondButtonColor(true);\r\n  };\r\n\r\n  const handleSecondButtonMouseLeave = () => {\r\n    setHoverSecondButtonColor(false);\r\n  };\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + \"/job/applied\",\r\n        null, // Pass null as the request body if not required\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n          },\r\n        }\r\n      );\r\n      if (response.data.status === 200) {\r\n        setLoading(false);\r\n        setAppliedJobs(response.data.response.jobApplyed);\r\n        // console.log(appliedJobs);\r\n      }\r\n      if (response.data.status === 400) {\r\n        setLoading(false);\r\n        Cookies.remove(\"tokenClient\");\r\n        Cookies.remove(\"user_type\");\r\n        Cookies.remove(\"fname\");\r\n        navigate(\"/\");\r\n        Swal.fire({\r\n          title: response.data.message,\r\n          icon: \"warning\",\r\n          confirmButtonText: t(\"searchJobPage.close\"),\r\n        });\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      if (error.message === \"Network Error\") {\r\n        Cookies.remove(\"tokenClient\");\r\n        Cookies.remove(\"user_type\");\r\n        Cookies.remove(\"fname\");\r\n        navigate(\"/\");\r\n        Swal.fire({\r\n          title: t(\"tokenExpired.tokenExpired\"),\r\n          icon: \"warning\",\r\n          confirmButtonText: t(\"jobDescription.close\"),\r\n        });\r\n        setTimeout(function () {\r\n          window.location.reload();\r\n        }, 3000);\r\n      }\r\n      console.log(\"Cannot get applied jobs data\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/user/jobseekerlogin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  // useEffect(() => {\r\n  //   if (tokenKey === null || tokenKey === \"\") {\r\n  //     navigate(\"/user/jobseekerlogin\");\r\n  //     window.scrollTo(0, 0);\r\n  //   }\r\n  // }, []);\r\n\r\n  const handleClick = async (slug1, slug2, id) => {\r\n    navigate(`/jobdescription/${slug1}/${slug2}`);\r\n    sessionStorage.setItem(\"id\", id);\r\n  };\r\n\r\n  // Pagination state\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const jobsPerPage = 10;\r\n\r\n  // Get current jobs to display based on pagination\r\n  const indexOfLastJob = currentPage * jobsPerPage;\r\n  const indexOfFirstJob = indexOfLastJob - jobsPerPage;\r\n  const currentData = appliedJobs\r\n    ? appliedJobs.slice(indexOfFirstJob, indexOfLastJob)\r\n    : appliedJobs.slice(indexOfFirstJob, indexOfLastJob);\r\n\r\n  // Function to handle pagination page change\r\n  const handlePageChange = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      {loading ? (\r\n        <div className=\"loader-container\"></div>\r\n      ) : (\r\n        <>\r\n          <div className=\"container paymentHistory\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-3 col-md-3\">\r\n                <JSSidebar />\r\n              </div>\r\n\r\n              <div\r\n                className=\"col-lg-9 col-md-9 mb-5\"\r\n                style={{\r\n                  borderLeft: \"2px solid #e6e8e7\",\r\n                  borderRight: \"2px solid #e6e8e7\",\r\n                }}\r\n              >\r\n                <div className=\"PHHeader\">\r\n                  <div className=\"d-flex PageHeader\">\r\n                    <img\r\n                      src=\"/Images/jobseekerSide/Applied-Jobs-color.png\"\r\n                      alt=\"\"\r\n                    />\r\n                    <h3 className=\"ms-1\" style={{ color: \"#8cbcdc\" }}>\r\n                      {t(\"jobseekerAppliedJobs.appliedJobs\")}\r\n                    </h3>\r\n                  </div>\r\n\r\n                  <div className=\"PHBody mt-5\">\r\n                    <table className=\"table\">\r\n                      <thead>\r\n                        <tr className=\"table-active TrFirst\">\r\n                          <th className=\"\" scope=\"col p-3\">\r\n                            {t(\"jobseekerAppliedJobs.SNo.\")}\r\n                          </th>\r\n                          <th className=\"\" scope=\"col p-3\">\r\n                            {t(\"jobseekerAppliedJobs.jobTitle\")}\r\n                          </th>\r\n                          <th className=\"\" scope=\"col p-3\">\r\n                            {t(\"jobseekerAppliedJobs.jobType\")}\r\n                          </th>\r\n                          <th className=\"\" scope=\"col p-3\">\r\n                            {t(\"jobseekerAppliedJobs.appliedDate\")}\r\n                          </th>\r\n                          <th className=\"\" scope=\"col p-3\">\r\n                            {t(\"jobseekerAppliedJobs.status\")}\r\n                          </th>\r\n                          <th className=\"\" scope=\"col p-3\">\r\n                            {t(\"jobseekerAppliedJobs.action\")}\r\n                          </th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {currentData.map((i, index) => {\r\n                          return (\r\n                            <tr className=\"TrDefoult\">\r\n                              <td className=\"\">{index + 1}</td>\r\n                              <td className=\"\">{i.title}</td>\r\n                              <td className=\"\">{i.worktype}</td>\r\n                              <td className=\"\">{i.created}</td>\r\n                              <td className=\"\">{i.status}</td>\r\n                              <td className=\"TrActions\">\r\n                                <button\r\n                                  // to={`/jobdescription/${i.slug}/${i.cat_slug}`}\r\n                                  className=\"btn btn-primary\"\r\n                                  onClick={() =>\r\n                                    handleClick(i.slug, i.cat_slug, i.id)\r\n                                  }\r\n                                  style={{\r\n                                    backgroundColor: primaryColor,\r\n                                    color: \"white\",\r\n                                  }}\r\n                                >\r\n                                  {/* <i class=\"fa-solid fa-circle-info\"></i> */}\r\n                                  <CiCircleInfo />\r\n                                </button>\r\n                              </td>\r\n                            </tr>\r\n                          );\r\n                        })}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n                <div className=\"JSAppliedJobsPagination\">\r\n                  <p className=\"text-muted empPaginationData\">\r\n                    {t(\"pagination.NoofRecords\")}{\" \"}\r\n                    {appliedJobs.length > 0\r\n                      ? indexOfFirstJob + 1\r\n                      : indexOfFirstJob}\r\n                    -{Math.min(indexOfLastJob, appliedJobs.length)} of{\" \"}\r\n                    {appliedJobs ? appliedJobs.length : appliedJobs.length}\r\n                  </p>\r\n                  {/* Custom Pagination */}\r\n                  <div className=\"d-flex justify-content-center empPaginationButton\">\r\n                    <button\r\n                      className=\"navButton1 me-2\"\r\n                      disabled={currentPage === 1}\r\n                      onClick={() => handlePageChange(currentPage - 1)}\r\n                      style={{\r\n                        backgroundColor: hoverFirstButtonColor\r\n                          ? secondaryColor\r\n                          : primaryColor,\r\n                        border: hoverFirstButtonColor\r\n                          ? secondaryColor\r\n                          : primaryColor,\r\n                      }}\r\n                      onMouseEnter={handleFirstButtonMouseEnter}\r\n                      onMouseLeave={handleFirstButtonMouseLeave}\r\n                    >\r\n                      {t(\"pagination.Prev\")}\r\n                    </button>\r\n                    <button\r\n                      className=\"navButton1\"\r\n                      disabled={\r\n                        appliedJobs\r\n                          ? indexOfLastJob >= appliedJobs.length\r\n                          : indexOfLastJob >= appliedJobs.length\r\n                      }\r\n                      onClick={() => handlePageChange(currentPage + 1)}\r\n                      style={{\r\n                        backgroundColor: hoverSecondButtonColor\r\n                          ? secondaryColor\r\n                          : primaryColor,\r\n\r\n                        border: hoverSecondButtonColor\r\n                          ? secondaryColor\r\n                          : primaryColor,\r\n                      }}\r\n                      onMouseEnter={handleSecondButtonMouseEnter}\r\n                      onMouseLeave={handleSecondButtonMouseLeave}\r\n                    >\r\n                      {t(\"pagination.Next\")}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <Footer />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JSAppliedJobs;\r\n"],"names":["JSAppliedJobs","loading","setLoading","useState","appliedJobs","setAppliedJobs","tokenKey","Cookies","navigate","useNavigate","primaryColor","secondaryColor","t","i18n","useTranslation","hoverFirstButtonColor","setHoverFirstButtonColor","hoverSecondButtonColor","setHoverSecondButtonColor","useEffect","async","response","axios","BaseApi","headers","key","ApiKey","token","data","status","jobApplyed","Swal","title","message","icon","confirmButtonText","error","setTimeout","window","location","reload","console","log","getData","scrollTo","currentPage","setCurrentPage","indexOfLastJob","indexOfFirstJob","currentData","slice","handlePageChange","pageNumber","_jsxs","_Fragment","children","_jsx","NavBar","className","JSSidebar","style","borderLeft","borderRight","src","alt","color","scope","map","i","index","worktype","created","onClick","slug1","slug2","id","sessionStorage","setItem","handleClick","slug","cat_slug","backgroundColor","CiCircleInfo","length","Math","min","disabled","border","onMouseEnter","handleFirstButtonMouseEnter","onMouseLeave","handleFirstButtonMouseLeave","handleSecondButtonMouseEnter","handleSecondButtonMouseLeave","Footer"],"sourceRoot":""}