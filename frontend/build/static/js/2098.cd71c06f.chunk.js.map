{"version":3,"file":"static/js/2098.cd71c06f.chunk.js","mappings":"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","sources":["Components/adminpanel/Configuration/APChangeColorTheme.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport APNavBar from \"../Elements/APNavBar\";\r\nimport APSidebar from \"../APSidebar/APSidebar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Link from \"@mui/material/Link\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../../api/BaseApi\";\r\nimport ApiKey from \"../../api/ApiKey\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Cookies from \"js-cookie\";\r\nimport {\r\n  SketchPicker,\r\n  AlphaPicker,\r\n  BlockPicker,\r\n  ChromePicker,\r\n  CirclePicker,\r\n  GithubPicker,\r\n  HuePicker,\r\n  MaterialPicker,\r\n  SliderPicker,\r\n  SwatchesPicker,\r\n  TwitterPicker,\r\n} from \"react-color\";\r\nimport APFooter from \"../Elements/APFooter\";\r\n\r\nconst APChangeColorTheme = () => {\r\n  const [colorTheme, setColorTheme] = useState({\r\n    theme_color: \"\",\r\n    theme_background: \"\",\r\n    is_default: \"\",\r\n  });\r\n\r\n  const [errors, setErrors] = useState({\r\n    theme_color: \"\",\r\n    theme_background: \"\",\r\n  });\r\n\r\n  const [defaultCheck, setDefaultCheck] = useState(false);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const tokenKey = Cookies.get(\"token\");\r\n  const adminID = Cookies.get(\"adminID\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + \"/admin/changecolorscheme\",\r\n        null, // Pass null as the request body if not required\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n            adminid: adminID,\r\n          },\r\n        }\r\n      );\r\n      setLoading(false);\r\n      setColorTheme(response.data.response);\r\n      if (\r\n        colorTheme.theme_color === \"#294a9c\" &&\r\n        colorTheme.theme_background === \"#f3734c\"\r\n      ) {\r\n        setDefaultCheck(true);\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.log(\"Cannot get profile photo data\");\r\n    }\r\n  };\r\n\r\n  const handleDefaultColorChange = (e) => {\r\n    if (e.target.checked) {\r\n      // setColorTheme({...colorTheme, theme_background: \"#f3734c\"});\r\n      setColorTheme({\r\n        ...colorTheme,\r\n        theme_color: \"#294a9c\",\r\n        theme_background: \"#f3734c\",\r\n        is_default: 1,\r\n      });\r\n      setDefaultCheck(true);\r\n    }\r\n    if (!e.target.checked) {\r\n      setColorTheme({\r\n        ...colorTheme,\r\n        theme_color: \"\",\r\n        theme_background: \"\",\r\n        is_default: 0,\r\n      });\r\n      setDefaultCheck(false);\r\n    }\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      theme_color: \"\",\r\n      theme_background: \"\",\r\n    }));\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    // console.log(primaryColor, secondaryColor);\r\n    try {\r\n      const newErrors = {};\r\n\r\n      if (colorTheme.theme_color === \"\") {\r\n        newErrors.theme_color = \"Please select the theme color\";\r\n        // window.scrollTo(0, 0);\r\n      }\r\n      if (colorTheme.theme_background === \"\") {\r\n        newErrors.theme_background = \"Please select the theme background\";\r\n        // window.scrollTo(0, 0);\r\n      }\r\n      setErrors(newErrors);\r\n\r\n      if (Object.keys(newErrors).length === 0) {\r\n        const confirmationResult = await Swal.fire({\r\n          title: \"Change Theme?\",\r\n          text: \"Do you want to change the theme?\",\r\n          icon: \"question\",\r\n          showCancelButton: true,\r\n          confirmButtonText: \"Yes\",\r\n          cancelButtonText: \"No\",\r\n        });\r\n        if (confirmationResult.isConfirmed) {\r\n          console.log(colorTheme, \"color\");\r\n          setLoading(true);\r\n          const response = await axios.post(\r\n            BaseApi + \"/admin/changecolorscheme\",\r\n            colorTheme,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                key: ApiKey,\r\n                token: tokenKey,\r\n                adminid: adminID,\r\n              },\r\n            }\r\n          );\r\n          if (response.data.status === 200) {\r\n            Swal.fire({\r\n              title: \"Theme updated successfully!\",\r\n              icon: \"success\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n            getData();\r\n\r\n            window.scrollTo(0, 0);\r\n          } else {\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"error\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Could not update theme. Please try after some time!\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Could not update theme!\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/admin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      getData();\r\n      if (\r\n        colorTheme.theme_color === \"#294a9c\" &&\r\n        colorTheme.theme_background === \"#f3734c\"\r\n      ) {\r\n        setDefaultCheck(true);\r\n      }\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  return (\r\n    <>\r\n      <APNavBar />\r\n      <div className=\"APBasic\">\r\n        <APSidebar />\r\n\r\n        {loading ? (\r\n          <>\r\n            <div className=\"loader-container\"></div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"site-min-height\">\r\n              <div className=\"breadCumb1\" role=\"presentation\">\r\n                <Breadcrumbs\r\n                  aria-label=\"breadcrumb\"\r\n                  separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                >\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/admins/dashboard\")}\r\n                  >\r\n                    Dashboard\r\n                  </Link>\r\n                  <Typography color=\"text.primary\">\r\n                    Change Color Theme\r\n                  </Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n              <h2 className=\"adminPageHeading\">Change Color Theme</h2>\r\n              <form className=\"adminForm\">\r\n                <div className=\"mb-4 mt-5 colorPickerBody\">\r\n                  <div className=\"color-picker primaryColor\">\r\n                    <label>Primary Color:</label>\r\n                    <ChromePicker\r\n                      color={colorTheme.theme_color}\r\n                      onChange={(color) => (\r\n                        setColorTheme({\r\n                          ...colorTheme,\r\n                          theme_color: color.hex,\r\n                          is_default: 0\r\n                        }),\r\n                        setDefaultCheck(false),\r\n                        setErrors({ ...errors, theme_color: \"\" })\r\n                      )}\r\n                    />\r\n                    {errors.theme_color && (\r\n                      <div className=\"text-danger\">{errors.theme_color}</div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"color-picker secondaryColor\">\r\n                    <label>Secondary Color:</label>\r\n                    <ChromePicker\r\n                      color={colorTheme.theme_background}\r\n                      onChange={(color) => (\r\n                        setColorTheme({\r\n                          ...colorTheme,\r\n                          theme_background: color.hex,\r\n                          is_default: 0\r\n                        }),\r\n                        setDefaultCheck(false),\r\n                        setErrors({ ...errors, theme_color: \"\" })\r\n                      )}\r\n                    />\r\n                    {errors.theme_background && (\r\n                      <div className=\"text-danger\">\r\n                        {errors.theme_background}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div class=\"mb-5 siteSettingPaymentInfo checkBoxCol defaultColor\">\r\n                    <label htmlFor=\"formFile\" class=\"form-label\">\r\n                      Set default colors\r\n                    </label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      className=\"tableCheckBox\"\r\n                      checked={defaultCheck || colorTheme.is_default === 1}\r\n                      onChange={handleDefaultColorChange}\r\n                      name=\"is_default\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary button1\"\r\n                  onClick={handleClick}\r\n                >\r\n                  UPDATE\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary button2\"\r\n                  onClick={() => navigate(\"/admin/admins/dashboard\")}\r\n                >\r\n                  CANCEL\r\n                </button>\r\n              </form>\r\n            </div>\r\n            <APFooter />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default APChangeColorTheme;\r\n"],"names":["APChangeColorTheme","colorTheme","setColorTheme","useState","theme_color","theme_background","is_default","errors","setErrors","defaultCheck","setDefaultCheck","loading","setLoading","tokenKey","Cookies","adminID","navigate","useNavigate","getData","async","response","axios","BaseApi","headers","key","ApiKey","token","adminid","data","error","console","log","useEffect","window","scrollTo","_jsxs","_Fragment","children","_jsx","APNavBar","className","APSidebar","role","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","underline","color","onClick","Typography","ChromePicker","onChange","hex","class","htmlFor","type","checked","e","target","prev","name","newErrors","Object","keys","length","Swal","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","isConfirmed","status","message","APFooter"],"sourceRoot":""}