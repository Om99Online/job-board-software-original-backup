{"version":3,"file":"static/js/9390.a7ed0101.chunk.js","mappings":"6ZAsBA,MAo4CA,EAp4CkBA,MACDC,EAAAA,EAAAA,QAAO,MAAtB,MACMC,EAAWC,EAAAA,EAAAA,IAAY,eACvBC,GAAWC,EAAAA,EAAAA,OACVC,EAAGC,IAAQC,EAAAA,EAAAA,IAAe,WAE1BC,EAAMC,IAAWC,EAAAA,EAAAA,WAAS,IAC1BC,EAAiBC,IAAsBF,EAAAA,EAAAA,UAAS,MAOjDG,EAAcA,KAClBD,EAAmB,MACnBH,GAAQ,EAAM,GAGhBK,EAAAA,EAAAA,YAAU,KAEHb,EAMHc,OAAOC,SAAS,EAAG,GAJnBb,EAAS,sBAKX,GACC,CAACF,EAAUE,IAEd,IAAIc,EAAef,EAAAA,EAAAA,IAAY,gBAC3BgB,EAAiBhB,EAAAA,EAAAA,IAAY,kBACjC,MAAMiB,EAASjB,EAAAA,EAAAA,IAAY,WAEpBkB,EAAkBC,IAAuBX,EAAAA,EAAAA,WAAS,IAUlDY,EAAoBC,IAAyBb,EAAAA,EAAAA,WAAS,IAUtDc,EAAgBC,IAAqBf,EAAAA,EAAAA,UAAS,KAE9CgB,EAAsBC,IAA2BjB,EAAAA,EAAAA,UAAS,KAe1DkB,EAASC,IAAcnB,EAAAA,EAAAA,UAAS,CACrCoB,UAAW,GACXC,SAAU,GACVC,YAAa,GACbC,eAAgB,GAChBC,aAAc,GACdC,MAAO,GACPC,eAAgB,GAChBC,UAAW,GACXC,aAAc,GACdC,eAAgB,GAChBC,gBAAiB,GACjBC,YAAa,GACbC,SAAU,GACVC,WAAY,GACZC,cAAe,GACfC,KAAM,GACNC,UAAW,MAGNC,EAAWC,IAAgBtC,EAAAA,EAAAA,UAAS,KACpCuC,EAAeC,IAAoBxC,EAAAA,EAAAA,UAAS,KAC5CyC,EAAeC,IAAoB1C,EAAAA,EAAAA,UAAS,KAC5C2C,EAAiBC,IAAsB5C,EAAAA,EAAAA,UAAS,KAChD6C,EAAWC,IAAgB9C,EAAAA,EAAAA,UAAS,KACpCiC,EAAYc,IAAiB/C,EAAAA,EAAAA,UAAS,KACtCgD,GAAQC,KAAajD,EAAAA,EAAAA,UAAS,KAC9BkD,GAAUC,KAAenD,EAAAA,EAAAA,UAAS,KAClCoD,GAASC,KAAcrD,EAAAA,EAAAA,WAAS,IAChCsD,GAAoBC,KAA4BvD,EAAAA,EAAAA,UAAS,KAEzDwD,GAAQC,KAAazD,EAAAA,EAAAA,UAAS,CACnCoB,UAAW,GACXC,SAAU,GACVC,YAAa,GACbC,eAAgB,GAChBC,aAAc,GACdE,eAAgB,GAChBC,UAAW,GACXC,aAAc,GACdC,eAAgB,GAChBC,gBAAiB,GACjBL,MAAO,GACPM,YAAa,GACbC,SAAU,GACVC,WAAY,GACZC,cAAe,GACfE,UAAW,KAiBPsB,GAAgBC,IACpB,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAEb,iBAATF,EACFtB,GAAcyB,IAAa,IACtBA,EACHvC,aAAcqC,MAGE,mBAATD,EACTtB,GAAcyB,IAAa,IACtBA,EACHlC,eAAgBgC,MAIA,mBAATD,EACTtB,GAAcyB,IAAa,IACtBA,EACHrC,eAAgBmC,MAGA,gBAATD,EACTzC,GAAY6C,IAAW,IAClBA,EACH1C,YAAa,CAACuC,QAGhB1C,GAAY6C,IAAW,IAClBA,EACH,CAACJ,GAAOC,MAEVJ,IAAWQ,IAAI,IACVA,EACH,CAACL,GAAO,OAEZ,EAYF,MAuDMM,GAAmBC,UACvBZ,GAAyB,IACzB,IACE,MAAMa,QAAmBC,EAAAA,EAAAA,KACvBC,EAAAA,EAAW,8BAA6BC,IACxC,KACA,CACEC,QAAS,CACP,eAAgB,mBAChBC,IAAKC,EAAAA,EACLC,MAAOpF,KAIbmD,EAAiB0B,EAAWQ,KAAKC,SACnC,CAAE,MAAOC,GACPC,QAAQC,IAAI,kCACd,IAGF5E,EAAAA,EAAAA,YAAU,KA3EM+D,WACd,IACE,MAAMU,QAAiBR,EAAAA,EAAAA,KAAWC,EAAAA,EAAU,iBAAkB,KAAM,CAClEE,QAAS,CACP,eAAgB,mBAChBC,IAAKC,EAAAA,EACLC,MAAOpF,KAGkB,MAAzBsF,EAASD,KAAKK,QAChB3C,EAAauC,EAASD,KAAKC,SAAS3D,SACpCsB,EAAiBqC,EAASD,KAAKC,SAASK,YACxCtC,EAAmBiC,EAASD,KAAKC,SAASM,kBAE1CrC,EAAa+B,EAASD,KAAKC,SAAShC,WACpCE,EAAc8B,EAASD,KAAKC,SAAS5C,YACrCgB,GAAU4B,EAASD,KAAKC,SAASO,SACjCjC,GAAY0B,EAASD,KAAKC,SAASQ,WACD,MAAzBR,EAASD,KAAKK,QACvBzF,EAAAA,EAAAA,OAAe,eACfA,EAAAA,EAAAA,OAAe,aACfA,EAAAA,EAAAA,OAAe,SACfC,EAAS,KACT6F,IAAAA,KAAU,CACRC,MAAOV,EAASD,KAAKY,QACrBC,KAAM,UACNC,kBAAmB/F,EAAE,+BAGvBF,EAAS,mBACT6F,IAAAA,KAAU,CACRC,MAAOV,EAASD,KAAKY,QACrBC,KAAM,UACNC,kBAAmB/F,EAAE,6BAG3B,CAAE,MAAOmF,GACe,kBAAlBA,EAAMU,UACRhG,EAAAA,EAAAA,OAAe,eACfA,EAAAA,EAAAA,OAAe,aACfA,EAAAA,EAAAA,OAAe,SACfC,EAAS,KACT6F,IAAAA,KAAU,CACRC,MAAO5F,EAAE,6BACT8F,KAAM,UACNC,kBAAmB/F,EAAE,0BAEvBgG,YAAW,WACTtF,OAAO2B,SAAS4D,QAClB,GAAG,MAELb,QAAQC,IAAI,mBACd,GAwBAa,GACA3B,KACA7D,OAAOC,SAAS,EAAG,EAAE,GACpB,IAEH,MA+MMwF,GAAmB3B,UACvB,MAAM4B,EAAOpC,EAAEG,OAAOkC,MAAM,GAG5B,GAAID,EAAKE,KAAO,MAOd,OANAX,IAAAA,KAAU,CACRC,MAAO5F,EAAE,uCACT8F,KAAM,UACNC,kBAAmB/F,EAAE,qCAEvBgE,EAAEG,OAAOD,MAAQ,IAKnB,MAAMqC,EAAYC,IAAIC,gBAAgBL,GAChCM,EAAQ,IAAIC,MAGZC,EAAmB,IAAIC,SAASC,IACpCJ,EAAMK,OAAS,KACbD,EAAQ,CACNE,MAAON,EAAMM,MACbC,OAAQP,EAAMO,QACd,CACH,IAGHP,EAAMQ,IAAMX,EAEZ,MAAMY,QAAmBP,EAGzB,GAAIO,EAAWH,MAAQ,KAAOG,EAAWF,OAAS,IAOhD,OANAtB,IAAAA,KAAU,CACRC,MAAO5F,EAAE,oCACT8F,KAAM,UACNC,kBAAmB/F,EAAE,qCAEvBgE,EAAEG,OAAOD,MAAQ,IAKnB,MAAMkD,QAk4BV,SAAyBhB,GACvB,OAAO,IAAIS,SAAQ,CAACC,EAASO,KAC3B,MAAMC,EAAa,IAAIC,WACvBD,EAAWE,cAAcpB,GACzBkB,EAAWP,OAAS,KAClBD,EAAQQ,EAAWG,OAAO,EAE5BH,EAAWI,QAAWvC,IACpBkC,EAAOlC,EAAM,CACd,GAEL,CA74ByBwC,CAAgBvB,GAGrC5E,EAAW,IAAKD,EAASiB,KAAM4E,GAAS,EAGpCQ,GAAehD,GACT,GAANA,EACK,YAEC,GAANA,EACK,YAEC,GAANA,EACK,SAEC,GAANA,EACK,WAEC,GAANA,EACK,kBADT,GA2BKiD,GAAqBC,KAA0BzH,EAAAA,EAAAA,UAAS,OACxD0H,GAAaC,KAAkB3H,EAAAA,EAAAA,UAAS,KAE/CI,EAAAA,EAAAA,YAAU,KAER,MAAMwH,EAASC,SAASC,cAAc,UAUtC,OATAF,EAAOf,IAAO,+CAA8CpG,qBAC5DmH,EAAOlB,OAAS,KACde,GACE,IAAIpH,OAAO0H,OAAOC,KAAKC,OAAOC,oBAC/B,EAGHL,SAASM,KAAKC,YAAYR,GAEnB,KACLC,SAASM,KAAKE,YAAYT,EAAO,CAClC,GACA,IAEH,MAAMU,GAAwB3E,IAC5B,MAAM,MAAEE,GAAUF,EAAEG,OACpByE,IAAmB,GACN,IAAT1E,GACF0E,IAAmB,GAER,IAAT1E,GACFJ,GAAU,CACRzB,SAAU,KAIdb,GAAYqH,IAAU,IACjBA,EACHxG,SAAU6B,MAGR2D,IAEFA,GAAoBiB,oBAClB,CACEC,MAAO7E,EACP8E,MAAO,CAAC,cAEV,CAACC,EAAa3D,KAEV0C,GADa,OAAX1C,GAAmB2D,EAEnBA,EAAYC,KAAKC,GAAeA,EAAWC,cAG9B,GACjB,IAImB,KAArB7H,EAAQc,UACV2F,GAAe,GACjB,GAEKqB,GAAiBT,KAAsBvI,EAAAA,EAAAA,WAAS,GA4BvD,OACEiJ,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IACNjG,IACCgG,EAAAA,EAAAA,KAAA,OAAKE,UAAU,sBAEfL,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,sBAAqBH,UAClCF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,MAAKH,SAAA,EAClBC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,WAAUH,UACvBC,EAAAA,EAAAA,KAACG,EAAAA,EAAO,OAGVN,EAAAA,EAAAA,MAAA,OACEK,UAAU,6BACVE,MAAO,CACLC,WAAY,oBACZC,YAAa,qBACbP,SAAA,EAEFF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,oBAAmBH,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAKvC,IAAI,sCAAsC8C,IAAI,MACnDP,EAAAA,EAAAA,KAAA,MAAIE,UAAU,OAAMH,SAAExJ,EAAE,qCAE1BsJ,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,YAAWH,SAAA,EACxBF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,sDAAqDH,SAAA,EAClEF,EAAAA,EAAAA,MAAA,SAAOK,UAAU,aAAaM,QAAQ,gBAAeT,SAAA,CAClDxJ,EAAE,+BACHyJ,EAAAA,EAAAA,KAAA,QAAME,UAAU,UAASH,SAAC,UAE5BC,EAAAA,EAAAA,KAAA,SACES,KAAK,OACLtF,GAAG,gBACH+E,UAAY,gBACV9F,GAAOpC,WAAa,gBAEtBwC,KAAK,YACLC,MAAO3C,EAAQE,UACf0I,YAAanK,EAAE,8BACfoK,SAAUrG,KAEXF,GAAOpC,YACNgI,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cAAaH,SAAE3F,GAAOpC,gBA2BzC6H,EAAAA,EAAAA,MAAA,OAAKK,UAAU,sDAAqDH,SAAA,EAClEF,EAAAA,EAAAA,MAAA,SAAOK,UAAU,aAAaM,QAAQ,gBAAeT,SAAA,CAClDxJ,EAAE,+BACHyJ,EAAAA,EAAAA,KAAA,QAAME,UAAU,UAASH,SAAC,UAE5BF,EAAAA,EAAAA,MAAA,UACEK,UAAY,eACV9F,GAAOnC,UAAY,gBAErB,aAAW,yBACXuC,KAAK,WACLC,MAAO3C,EAAQG,SACf0I,SAAWpG,IACTD,GAAaC,GACbO,GAAiBP,EAAEG,OAAOD,MAAM,EAChCsF,SAAA,EAEFC,EAAAA,EAAAA,KAAA,UAAQvF,MAAM,GAAEsF,SACbxJ,EAAE,yCAEJ4C,EAAcsG,KAAI,CAACmB,EAAGC,KACrBb,EAAAA,EAAAA,KAAA,UAAQvF,MAAOmG,EAAEzF,GAAG4E,SACjBa,EAAEpG,MADqBqG,QAK7BzG,GAAOnC,WACN+H,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cAAaH,SAAE3F,GAAOnC,iBAI1CH,EAAQG,UAAYoB,GACnBwG,EAAAA,EAAAA,MAAA,OAAKK,UAAU,kFAAiFH,SAAA,EAC9FC,EAAAA,EAAAA,KAAA,SAAOE,UAAU,aAAaM,QAAQ,gBAAeT,SAClDxJ,EAAE,oCAGLyJ,EAAAA,EAAAA,KAACc,EAAAA,GACC,CACAC,SAAO,EACPC,cAAY,EACZxG,KAAK,cACLyG,QAAS5H,EAAcoG,KAAKmB,IAAC,CAC3BnG,MAAOmG,EAAEzF,GACT+F,MAAON,EAAEpG,SAEX0F,UAAU,qBACVzF,MAAOP,GACPiH,gBAAiB5K,EACf,uCAEFoK,SAxoBKS,IAGzBjH,GAAyBiH,GAEzB,MAAMC,EAAMD,EAAe3B,KAAK6B,GAASA,EAAK7G,QAG9C1C,GAAY6C,IAAW,IAClBA,EACH1C,YAAamJ,KACZ,OAioBa,IAGFxB,EAAAA,EAAAA,MAAA,OAAKK,UAAU,sDAAqDH,SAAA,EAClEF,EAAAA,EAAAA,MAAA,SAAOK,UAAU,aAAaM,QAAQ,gBAAeT,SAAA,CAClDxJ,EAAE,qCACHyJ,EAAAA,EAAAA,KAAA,QAAME,UAAU,UAASH,SAAC,UAkB5BC,EAAAA,EAAAA,KAACuB,IAAU,CACTC,MAAM,OACN/G,MAAO3C,EAAQK,eACfwI,SAAWlG,GACTH,GAAa,CACXI,OAAQ,CAAEF,KAAM,iBAAkBC,WAGtC2F,MAAO,CAAEqB,UAAW,QAASjE,OAAQ,SACrCkD,YAAanK,EAAE,4BAEhB6D,GAAOjC,iBACN6H,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cAAaH,SAAE3F,GAAOjC,qBAGzC0H,EAAAA,EAAAA,MAAA,OAAKK,UAAU,sDAAqDH,SAAA,EAClEF,EAAAA,EAAAA,MAAA,SAAOK,UAAU,aAAaM,QAAQ,gBAAeT,SAAA,CAClDxJ,EAAE,kCACHyJ,EAAAA,EAAAA,KAAA,QAAME,UAAU,UAASH,SAAC,UAE5BC,EAAAA,EAAAA,KAAA,SACES,KAAK,OACLtF,GAAG,gBACH+E,UAAY,gBACV9F,GAAOhC,cAAgB,gBAEzBoC,KAAK,eACLC,MAAOxB,EAAUb,aACjBsI,YAAanK,EAAE,iCACfoK,SAAUrG,KAEXF,GAAOhC,eACN4H,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cAAaH,SAAE3F,GAAOhC,mBAGzCyH,EAAAA,EAAAA,MAAA,OAAKK,UAAU,sDAAqDH,SAAA,EAClEF,EAAAA,EAAAA,MAAA,SAAOK,UAAU,aAAaM,QAAQ,gBAAeT,SAAA,CAClDxJ,EAAE,qCACHyJ,EAAAA,EAAAA,KAAA,QAAME,UAAU,UAASH,SAAC,UAiB5BC,EAAAA,EAAAA,KAACuB,IAAU,CACTC,MAAM,OACN/G,MAAOxB,EAAUX,eACjBqI,SAAWrI,GACTgC,GAAa,CACXI,OAAQ,CACNF,KAAM,iBACNC,MAAOnC,KAIb8H,MAAO,CAAEqB,UAAW,QAASjE,OAAQ,SACrCkD,YAAanK,EAAE,4BAEhB6D,GAAO9B,iBACN0H,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cAAaH,SAAE3F,GAAO9B,qBAGzCuH,EAAAA,EAAAA,MAAA,OAAKK,UAAU,sDAAqDH,SAAA,EAClEF,EAAAA,EAAAA,MAAA,SAAOK,UAAU,aAAaM,QAAQ,gBAAeT,SAAA,CAClDxJ,EAAE,+BACHyJ,EAAAA,EAAAA,KAAA,QAAME,UAAU,UAASH,SAAC,UAE5BF,EAAAA,EAAAA,MAAA,UACEK,UAAY,eACV9F,GAAO7B,WAAa,gBAEtB,aAAW,yBACXiC,KAAK,YACLC,MAAO3C,EAAQS,UACfoI,SAAUrG,GAAayF,SAAA,EAEvBC,EAAAA,EAAAA,KAAA,UAAQ0B,UAAQ,EAACjH,MAAM,GAAEsF,SACtBxJ,EAAE,sCAEJoL,OAAOC,QAAQ9H,IAAU2F,KAAIoC,IAAmB,IAAjBxG,EAAKZ,GAAMoH,EACzC,OACE7B,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,KAAA,UAEEvF,MAAOY,EACP0E,SAECtF,GAJIY,IAMN,OAIRjB,GAAO7B,YACNyH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cAAaH,SAAE3F,GAAO7B,gBAIzCsH,EAAAA,EAAAA,MAAA,OAAKK,UAAU,sDAAqDH,SAAA,EAClEF,EAAAA,EAAAA,MAAA,SAAOK,UAAU,aAAaM,QAAQ,gBAAeT,SAAA,CAClDxJ,EAAE,kCACHyJ,EAAAA,EAAAA,KAAA,QAAME,UAAU,UAASH,SAAC,UAE5BC,EAAAA,EAAAA,KAAA,SACES,KAAK,OACLtF,GAAG,gBACH+E,UAAY,gBACV9F,GAAO5B,cAAgB,gBAEzBgC,KAAK,eACLC,MAAO3C,EAAQU,aACfkI,YAAanK,EAAE,iCACfoK,SAAUrG,KAEXF,GAAO5B,eACNwH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cAAaH,SAAE3F,GAAO5B,mBAGzCqH,EAAAA,EAAAA,MAAA,OAAKK,UAAU,sDAAqDH,SAAA,EAClEF,EAAAA,EAAAA,MAAA,SAAOK,UAAU,aAAaM,QAAQ,gBAAeT,SAAA,CAClDxJ,EAAE,oCACHyJ,EAAAA,EAAAA,KAAA,QAAME,UAAU,UAASH,SAAC,UAE5BC,EAAAA,EAAAA,KAAA,SACES,KAAK,OACLtF,GAAG,qBACH+E,UAAY,gBACV9F,GAAO3B,gBAAkB,gBAE3B+B,KAAK,iBACLC,MAAOxB,EAAUR,eACjBiI,YAAanK,EAAE,mCACfoK,SAAUrG,KAEXF,GAAO3B,iBACNuH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cAAaH,SAAE3F,GAAO3B,qBAGzCoH,EAAAA,EAAAA,MAAA,OAAKK,UAAU,sDAAqDH,SAAA,EAClEC,EAAAA,EAAAA,KAAA,SAAOE,UAAU,aAAaM,QAAQ,gBAAeT,SAClDxJ,EAAE,uCAELyJ,EAAAA,EAAAA,KAAA,SACES,KAAK,OACLtF,GAAG,gBACH+E,UAAY,gBACV9F,GAAO1B,iBAAmB,gBAE5B8B,KAAK,kBACLC,MAAO3C,EAAQY,gBACfgI,YAAanK,EAAE,oCACfoK,SAAUrG,KAEXF,GAAO1B,kBACNsH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cAAaH,SACzB3F,GAAO1B,mBAGZsH,EAAAA,EAAAA,KAAA,OAAK7E,GAAG,YAAY+E,UAAU,YAAWH,SAAC,yDAI5CF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,mEAAkEH,SAAA,EAC/EC,EAAAA,EAAAA,KAAA,SAAOE,UAAU,aAAaM,QAAQ,gBAAeT,SAClDxJ,EAAE,+BAILyJ,EAAAA,EAAAA,KAACc,EAAAA,GACC,CACAC,SAAO,EACPC,cAAY,EACZxG,KAAK,QACLyG,QAASxH,EAAUgG,KAAKmB,IAAC,CACvBnG,MAAOmG,EAAEzF,GACT+F,MAAON,EAAEpG,SAEX0F,UAAU,qBACVzF,MAAO/C,EACPyJ,gBAAiB5K,EAAE,kCACnBoK,SAl6BOmB,IACzBnK,EAAkBmK,EAAgB,QAu6BpBjC,EAAAA,EAAAA,MAAA,OAAKK,UAAU,sDAAqDH,SAAA,EAClEF,EAAAA,EAAAA,MAAA,SAAOK,UAAU,aAAaM,QAAQ,gBAAeT,SAAA,CAClDxJ,EAAE,sCACHyJ,EAAAA,EAAAA,KAAA,QAAME,UAAU,UAASH,SAAC,UAE5BF,EAAAA,EAAAA,MAAA,UACE1E,GAAG,oBACH+E,UAAY,eACV9F,GAAOzB,aAAe,gBAExB,aAAW,yBACX6B,KAAK,cACLC,MAAO3C,EAAQa,YACfgI,SAAUrG,GAAayF,SAAA,EAEvBC,EAAAA,EAAAA,KAAA,UAAQ0B,UAAQ,EAACjH,MAAM,GAAEsF,SACtBxJ,EAAE,6CAEJgD,EAAgBkG,KAAI,CAACmB,EAAGC,KAErBb,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,KAAA,UAAQvF,MAAOmG,EAAEzF,GAAG4E,SACjBa,EAAEpG,MADqBqG,UAOjCzG,GAAOzB,cACNqH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cAAaH,SAAE3F,GAAOzB,kBAGzCkH,EAAAA,EAAAA,MAAA,OAAKK,UAAU,sDAAqDH,SAAA,EAClEF,EAAAA,EAAAA,MAAA,SAAOK,UAAU,aAAaM,QAAQ,gBAAeT,SAAA,CAClDxJ,EAAE,+BACHyJ,EAAAA,EAAAA,KAAA,QAAME,UAAU,UAASH,SAAC,UAE5BC,EAAAA,EAAAA,KAAA,SACES,KAAK,OACLtF,GAAG,gBACH+E,UAAY,gBACV9F,GAAOxB,UAAY,gBAErB4B,KAAK,WACLC,MAAO3C,EAAQc,SACf8H,YAAanK,EAAE,8BACfoK,SAAUzB,KAEXZ,GAAYyD,OAAS,IACpB/B,EAAAA,EAAAA,KAAA,OACEE,UAAU,cACVE,MAAO,CAAE4B,QAASpC,GAAkB,OAAS,IAAKG,UAElDC,EAAAA,EAAAA,KAAA,MAAIE,UAAU,mBAAkBH,SAC7BzB,GAAYmB,KAAI,CAACwC,EAAYpB,KAC5Bb,EAAAA,EAAAA,KAAA,OAAiBE,UAAU,kBAAiBH,UAC1CF,EAAAA,EAAAA,MAAA,MACEqC,QAASA,IA7aRD,KAE7B/C,GAAqB,CAAExE,OAAQ,CAAEF,KAAM,WAAYC,MAAOwH,KAE1D9C,IAAmB,GAEnBZ,GAAe,GAAG,EAwaY4D,CAAsBF,GACvBlC,SAAA,EAEDF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,eAAcH,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,eAAcH,UAC3BC,EAAAA,EAAAA,KAACoC,EAAAA,EAAc,CAACC,SAAS,YACpB,KACPrC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,qBAAoBH,SAChCkC,OAEE,QAbDpB,SAoBjBzG,GAAOxB,WACNoH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cAAaH,SAAE3F,GAAOxB,eAGzCiH,EAAAA,EAAAA,MAAA,OAAKK,UAAU,sDAAqDH,SAAA,EAClEF,EAAAA,EAAAA,MAAA,SAAOK,UAAU,aAAaM,QAAQ,gBAAeT,SAAA,CAClDxJ,EAAE,0CACHyJ,EAAAA,EAAAA,KAAA,QAAME,UAAU,UAASH,SAAC,UAE5BF,EAAAA,EAAAA,MAAA,UACEK,UAAY,eACV9F,GAAOvB,YAAc,gBAEvB,aAAW,yBACX2B,KAAK,aACLC,MAAO3C,EAAQe,WACf8H,SAAUrG,GAAayF,SAAA,EAEvBC,EAAAA,EAAAA,KAAA,UAAQ0B,UAAQ,EAACjH,MAAM,GAAEsF,SACtBxJ,EAAE,iCAEJoL,OAAOC,QAAQ/I,GAAY4G,KAAI6C,IAAmB,IAAjBjH,EAAKZ,GAAM6H,EAC3C,OACEtC,EAAAA,EAAAA,KAAA,UAAkBvF,MAAOY,EAAI0E,SAC1BtF,GADUY,EAEJ,OAIdjB,GAAOvB,aACNmH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cAAaH,SAAE3F,GAAOvB,iBAGzCgH,EAAAA,EAAAA,MAAA,OAAKK,UAAU,sDAAqDH,SAAA,EAClEF,EAAAA,EAAAA,MAAA,SAAOK,UAAU,aAAaM,QAAQ,gBAAeT,SAAA,CAClDxJ,EAAE,mCACHyJ,EAAAA,EAAAA,KAAA,QAAME,UAAU,UAASH,SAAC,UAE5BF,EAAAA,EAAAA,MAAA,UACEK,UAAY,eACV9F,GAAOtB,eAAiB,gBAE1B,aAAW,yBACX0B,KAAK,gBACLC,MAAO3C,EAAQgB,cACf6H,SAAUrG,GAAayF,SAAA,EAEvBC,EAAAA,EAAAA,KAAA,UAAQ0B,UAAQ,EAACjH,MAAM,GAAEsF,SACtBxJ,EAAE,oCAEJoL,OAAOC,QAAQhI,IAAQ6F,KAAI8C,IAAmB,IAAjBlH,EAAKZ,GAAM8H,EACvC,OACEvC,EAAAA,EAAAA,KAAA,UAAkBvF,MAAOY,EAAI0E,SAC1BtF,GADUY,EAEJ,OAIdjB,GAAOtB,gBACNkH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cAAaH,SAAE3F,GAAOtB,oBAGzC+G,EAAAA,EAAAA,MAAA,OAAKK,UAAU,sDAAqDH,SAAA,EAClEC,EAAAA,EAAAA,KAAA,SAAOQ,QAAQ,WAAWN,UAAU,aAAYH,SAC7CxJ,EAAE,oCAELyJ,EAAAA,EAAAA,KAAA,SACEE,UAAU,cACV,aAAW,yBACXO,KAAK,OACL+B,MAAM,QACNhI,KAAK,OACLW,GAAG,cACHsH,OAAO,0BACP9B,SAAWpG,GAAMmC,GAAiBnC,MAEpCyF,EAAAA,EAAAA,KAAA,OAAK7E,GAAG,YAAY+E,UAAU,YAAWH,SACtCxJ,EAAE,kCAELyJ,EAAAA,EAAAA,KAAA,OACEvC,IAAK3F,EAAQiB,MAAQ,GACrBwH,IAAI,GACJH,MAAO,CACL7C,MAAO,QACPmF,UAAW,OACXC,YAAa,UAGhB7K,EAAQiB,MACPiH,EAAAA,EAAAA,KAAA,UACEE,UAAU,uCACVgC,QAASA,KA5lB7BnK,EAAW,IAAKD,EAASiB,KAAM,IA4lBmB,EAAAgH,SAE7BxJ,EAAE,oCAGL,OAGJsJ,EAAAA,EAAAA,MAAA,OAAKK,UAAU,sDAAqDH,SAAA,EAClEF,EAAAA,EAAAA,MAAA,SAAOK,UAAU,aAAaM,QAAQ,gBAAeT,SAAA,CAClDxJ,EAAE,+BACHyJ,EAAAA,EAAAA,KAAA,QAAME,UAAU,UAASH,SAAC,UAE5BC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,sBAAqBH,UAClCC,EAAAA,EAAAA,KAAA,SACES,KAAK,OACLtF,GAAG,eACH+E,UAAY,gBACV9F,GAAOpB,WAAa,gBAEtBwB,KAAK,YACLC,MAAO3C,EAAQkB,UACf0H,YAAanK,EAAE,8BACfoK,SAviBtB,SAA8BiC,GAC5B,MAAM,KAAEpI,EAAI,MAAEC,GAAUmI,EAAMlI,OAC9B,IAAImI,EAAc,IAAIC,KAClBC,EAAe,IAAID,KAAKrI,GAE5B,GAAa,cAATD,GAAwBuI,EAAeF,EAAa,CAEtD,MAAMG,EAAuBH,EAAYI,cAAcC,MAAM,KAAK,GAElEnL,EAAW,IAAKD,EAAS,CAAC0C,GAAOwI,GACnC,MAEEjL,EAAW,IAAKD,EAAS,CAAC0C,GAAOC,GAErC,MA4hBmBL,GAAOpB,YACNgH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cAAaH,SAAE3F,GAAOpB,gBAIzC6G,EAAAA,EAAAA,MAAA,OAAKK,UAAU,gBAAeH,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,UACES,KAAK,SACLP,UAAU,0BACVgC,QAn6BAnH,UAElB,IAAIoI,EAAS1E,SAAS2E,kBAAkB,SACpCC,EAAa,GAEjBF,EAAOG,SAASC,IACdF,EAAWG,KAAKD,EAAQ9I,MAAM,IASF,IAA1B/C,EAAeqK,QACjBlK,EAAwB,qBAG1B,IACE,MAAM4L,EAAY,CAAC,EAqBnB,GAnB8B,KAA1B3L,EAAQgB,gBACV2K,EAAU3K,cAAgBvC,EAAE,2CAIL,KAArBuB,EAAQG,WACVwL,EAAUxL,SAAW1B,EAAE,sCACvBU,OAAOC,SAAS,EAAG,IAEY,KAA7B+B,EAAUX,iBACZmL,EAAUnL,eAAiB/B,EACzB,4CAEFU,OAAOC,SAAS,EAAG,IAEU,KAA3B+B,EAAUb,eACZqL,EAAUrL,aAAe7B,EAAE,yCAC3BU,OAAOC,SAAS,EAAG,IAEQ,KAAzBY,EAAQU,aAAqB,CAC/BiL,EAAUjL,aAAejC,EAAE,yCAC3B,MAAMmN,EAAejF,SAASkF,eAAe,sBACzCD,GACFA,EAAaE,eAAe,CAAEC,SAAU,SAAUC,MAAO,SAG7D,CAUA,GATiC,KAA7B7K,EAAUR,gBACZgL,EAAUhL,eAAiBlC,EAAE,2CAC7BU,OAAOC,SAAS,EAAG,IACT,yBAAyB6M,KAAK9K,EAAUR,kBAClDgL,EAAUhL,eACR,yDACFxB,OAAOC,SAAS,EAAG,IAGO,KAAxBY,EAAQa,YAAoB,CAC9B8K,EAAU9K,YAAcpC,EAAE,6CAG1B,MAAMmN,EAAejF,SAASkF,eAAe,qBACzCD,GACFA,EAAaE,eAAe,CAAEC,SAAU,UAE5C,CAgCA,GA/B2B,KAAvB/L,EAAQe,aACV4K,EAAU5K,WAAatC,EAAE,yCAII,KAA3BuB,EAAQK,iBACVsL,EAAUtL,eAAiB5B,EACzB,4CAEFU,OAAOC,SAAS,EAAG,IAEK,KAAtBY,EAAQE,YACVyL,EAAUzL,UAAYzB,EAAE,sCACxBU,OAAOC,SAAS,EAAG,IAEK,KAAtBY,EAAQkB,YACVyK,EAAUzK,UAAYzC,EAAE,uCAGD,KAArBuB,EAAQc,WACV6K,EAAU7K,SAAWrC,EAAE,uCAOC,KAAtBuB,EAAQS,YACVkL,EAAUlL,UAAYhC,EAAE,uCAGtBuB,EAAQY,gBAAiB,CAC3B,MAAMsL,EAAY,2CAEhBlM,EAAQY,kBACPsL,EAAUD,KAAKjM,EAAQY,mBAExB+K,EAAU/K,gBAAkBnC,EAAE,gCAC9BU,OAAOC,SAAS,EAAG,GAEvB,CAOA,GALAmD,GAAUoJ,GAK4B,IAAlC9B,OAAOsC,KAAKR,GAAW1B,OAAc,CAUvC,UARiC7F,IAAAA,KAAU,CACzCC,MAAO5F,EAAE,2CACT2N,KAAM3N,EAAE,yCACR8F,KAAM,WACN8H,kBAAkB,EAClB7H,kBAAmB/F,EAAE,yBACrB6N,iBAAkB7N,EAAE,2BAEC8N,YAAa,CAClC,MAAMC,EAAiB,IAClBxM,EACHO,MAAOgL,EACPjL,aAAca,EAAUb,aACxBK,eAAgBQ,EAAUR,eAC1BH,eAAgBW,EAAUX,gBAG5B2B,IAAW,GACX,MAAMwB,QAAiBR,EAAAA,EAAAA,KACrBC,EAAAA,EAAU,iBACVoJ,EACA,CACElJ,QAAS,CACP,eAAgB,mBAChBC,IAAKC,EAAAA,EACLC,MAAOpF,KAIgB,MAAzBsF,EAASD,KAAKK,QAChB5B,IAAW,GACXiC,IAAAA,KAAU,CACRC,MAAO5F,EAAE,2CACT8F,KAAM,UACNC,kBAAmB/F,EAAE,6BAEvBF,EAAS,oBACyB,MAAzBoF,EAASD,KAAKK,QACvB5B,IAAW,GACX7D,EAAAA,EAAAA,OAAe,eACfA,EAAAA,EAAAA,OAAe,aACfA,EAAAA,EAAAA,OAAe,SACfC,EAAS,KACT6F,IAAAA,KAAU,CACRC,MAAOV,EAASD,KAAKY,QACrBC,KAAM,UACNC,kBAAmB/F,EAAE,+BAGvB0D,IAAW,GACXiC,IAAAA,KAAU,CACRC,MAAO5F,EAAE,0CACT2N,MAAMK,EAAAA,EAAAA,IAAgB9I,EAASD,KAAKY,SACpCC,KAAM,QACNC,kBAAmB/F,EAAE,6BAG3B,CACF,CACF,CAAE,MAAOmF,GACPzB,IAAW,GACW,kBAAlByB,EAAMU,UACRhG,EAAAA,EAAAA,OAAe,eACfA,EAAAA,EAAAA,OAAe,aACfA,EAAAA,EAAAA,OAAe,SACfC,EAAS,KACT6F,IAAAA,KAAU,CACRC,MAAO5F,EAAE,6BACT8F,KAAM,UACNC,kBAAmB/F,EAAE,0BAEvBgG,YAAW,WACTtF,OAAO2B,SAAS4D,QAClB,GAAG,MAELN,IAAAA,KAAU,CACRC,MAAO5F,EAAE,0CACT8F,KAAM,QACNC,kBAAmB/F,EAAE,6BAEvBoF,QAAQC,IAAI,4BACd,GA+tBkBwE,MAAO,CACLoE,gBAAiBlN,EACbF,EACAD,EACJsN,OAAQnN,EACJF,EACAD,GAENuN,aAhpCWC,KAC7BpN,GAAoB,EAAK,EAgpCPqN,aA7oCWC,KAC7BtN,GAAoB,EAAM,EA4oC6BwI,SAEpCxJ,EAAE,mCAELyJ,EAAAA,EAAAA,KAAA,UACES,KAAK,SACLP,UAAU,0BACVgC,QAASA,KAnrC3BpL,EAmrC4CgB,QAlrC5CnB,GAAQ,IAmrCUyJ,MAAO,CACL0E,MAAOtN,EACHL,EACAC,EACJoN,gBAAiB,QACjBC,OAAQjN,EACH,aAAYL,IACZ,aAAYC,KAEnBsN,aAxpCaK,KAC/BtN,GAAsB,EAAK,EAwpCTmN,aArpCaI,KAC/BvN,GAAsB,EAAM,EAopC6BsI,SAEtCxJ,EAAE,sCAGLyJ,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACiF,EAAAA,EAAK,CACJ/E,UAAU,YACVxJ,KAAMA,EACNwO,QAASnO,EACT,kBAAgB,oBAChB,mBAAiB,0BAAyBgJ,UAE1CF,EAAAA,EAAAA,MAACsF,EAAAA,EAAG,CAACjF,UAAU,iCAAgCH,SAAA,EAC7CC,EAAAA,EAAAA,KAACoF,EAAAA,EAAU,CACTlD,QAASnL,EACTmJ,UAAU,eACVE,MAAO,CACLiF,SAAU,WACVC,IAAK,GACLC,MAAO,IACPxF,SACH,UAIDC,EAAAA,EAAAA,KAACwF,EAAAA,EAAU,CACTrK,GAAG,oBACHsK,QAAQ,KACRC,UAAU,QAEZ1F,EAAAA,EAAAA,KAACwF,EAAAA,EAAU,CACTrK,GAAG,0BACHwK,GAAI,CAAEC,GAAI,GAAI7F,SAEblJ,IACCgJ,EAAAA,EAAAA,MAAA,OAAKK,UAAU,UAASH,SAAA,EACtBC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,UACxBC,EAAAA,EAAAA,KAAA,MACEI,MAAO,CACL0E,MAAO1N,GACP2I,SAEDlJ,EAAgBmB,eAGrB6H,EAAAA,EAAAA,MAAA,OAAKK,UAAU,iBAAgBH,SAAA,EAC7BF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,cAAaH,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,YAAWH,SAAA,CACvBxJ,EAAE,8BAA8B,IAAE,QAErCyJ,EAAAA,EAAAA,KAAA,OAAKE,UAAU,aAAYH,SACxB5B,GAAYtH,EAAgB0B,iBAIjCsH,EAAAA,EAAAA,MAAA,OAAKK,UAAU,cAAaH,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,YAAWH,SAAA,CACvBxJ,EAAE,8BAA8B,IAAE,QAErCyJ,EAAAA,EAAAA,KAAA,OAAKE,UAAU,aAAYH,SACxBlJ,EAAgB+B,eAIrBiH,EAAAA,EAAAA,MAAA,OAAKK,UAAU,cAAaH,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,YAAWH,SAAA,CACvBxJ,EAAE,iCAAiC,IAAE,QAExCyJ,EAAAA,EAAAA,KAAA,OAAKE,UAAU,aAAYH,SACxB9G,EAAUb,mBAGfyH,EAAAA,EAAAA,MAAA,OAAKK,UAAU,cAAaH,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,YAAWH,SAAA,CACvBxJ,EAAE,oCAAoC,IAAE,QAE3CyJ,EAAAA,EAAAA,KAAA,OAAKE,UAAU,aAAYH,SACxBlJ,EAAgB6B,sBAIrBmH,EAAAA,EAAAA,MAAA,OAAKK,UAAU,cAAaH,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,YAAWH,SAAA,CACvBxJ,EAAE,6BAA6B,IAAE,QAEpCyJ,EAAAA,EAAAA,KAAA,OAAKE,UAAU,aAAYH,SACxB5B,GAAYtH,EAAgB0B,iBAIjCsH,EAAAA,EAAAA,MAAA,OAAKK,UAAU,cAAaH,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,YAAWH,SAAA,CACvBxJ,EAAE,8BAA8B,IAAE,QAErCyJ,EAAAA,EAAAA,KAAA,OAAKE,UAAU,aAAYH,SA3wBpC8F,KACvB,IAAK,IAAIjF,EAAI,EAAGA,EAAIzH,EAAc4I,OAAQnB,IACxC,GAAIzH,EAAcyH,GAAGzF,IAAM0K,EACzB,OAAO1M,EAAcyH,GAAGpG,IAE5B,EAuwBmCsL,CACCjP,EAAgBoB,gBAItB4H,EAAAA,EAAAA,MAAA,OAAKK,UAAU,cAAaH,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,YAAWH,SAAA,CACvBxJ,EACC,yCACA,IACA,QAEJyJ,EAAAA,EAAAA,KAAA,OAAKE,UAAU,aAAYH,SACxB4B,OAAOC,QAAQ/I,GAAY4G,KAC1BsG,IAAmB,IAAjB1K,EAAKZ,GAAMsL,EACX,GACE1K,GAAOxE,EAAgBgC,WAEvB,OAAO4B,CACT,UAKRoF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,cAAaH,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,YAAWH,SAAA,CACvBxJ,EAAE,kCAAkC,IAAE,QAEzCyJ,EAAAA,EAAAA,KAAA,OAAKE,UAAU,aAAYH,SACxB4B,OAAOC,QAAQhI,IAAQ6F,KACtBuG,IAAmB,IAAjB3K,EAAKZ,GAAMuL,EACX,GACE3K,GAAOxE,EAAgBiC,cAEvB,OAAO2B,CACT,UAKRoF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,cAAaH,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,YAAWH,SAAA,CACvBxJ,EAAE,4BAA4B,IAAE,QAEnCyJ,EAAAA,EAAAA,KAAA,OAAKE,UAAU,aAAYH,SACxBrI,EAAe+H,KAAKmB,GACZA,EAAEM,MAAQ,YAIvBrB,EAAAA,EAAAA,MAAA,OAAKK,UAAU,cAAaH,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,YAAWH,SAAA,CACvBxJ,EAAE,qCAAqC,IAAE,QAE5CyJ,EAAAA,EAAAA,KAAA,OAAKE,UAAU,aAAYH,SA1zBjCkG,KAC1B,IAAK,IAAIrF,EAAI,EAAGA,EAAIrH,EAAgBwI,OAAQnB,IAC1C,GAAIrH,EAAgBqH,GAAGzF,IAAM8K,EAC3B,OAAO1M,EAAgBqH,GAAGpG,IAE9B,EAszBmC0L,CACCrP,EAAgB8B,mBAItBkH,EAAAA,EAAAA,MAAA,OAAKK,UAAU,cAAaH,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,YAAWH,SAAA,CACvBxJ,EAAE,oCAAoC,IAAE,QAE3CyJ,EAAAA,EAAAA,KAAA,OAAKE,UAAU,aAAYH,SACxBlJ,EAAgBsB,gBACboM,EAAAA,EAAAA,IACE1N,EAAgBsB,gBAElB,sCAgBhC6H,EAAAA,EAAAA,KAACmG,EAAAA,EAAM,SAGV,C,8JC74CP,MAgiBA,EAhiBgBhG,KACd,MAAMhK,EAAWC,EAAAA,EAAAA,IAAY,eACvBC,GAAWC,EAAAA,EAAAA,OACVC,EAAGC,IAAQC,EAAAA,EAAAA,IAAe,WAE1B2P,EAAqBC,IAA0BzP,EAAAA,EAAAA,WAAS,IACxD0P,EAAyBC,IAA8B3P,EAAAA,EAAAA,WAAS,IASvEI,EAAAA,EAAAA,YAAU,KAWR,MAAMwP,EAAqBA,KACrBvP,OAAOwP,WAAa,KAEtBxP,OAAO2B,SAAS4D,QAClB,EAUF,OAHAvF,OAAOyP,iBAAiB,SAAUF,GAG3B,KACLvP,OAAO0P,oBAAoB,SAAUH,EAAmB,CACzD,GACA,IAEH,IAAII,EAAc3P,OAAOwP,WAEzB,MAAMI,EAAe9L,UACnB,IASE,UARiCmB,IAAAA,KAAU,CACzCC,MAAO5F,EAAE,gCACT2N,KAAM3N,EAAE,8BACR8F,KAAM,WACN8H,kBAAkB,EAClB7H,kBAAmB/F,EAAE,uBACrB6N,iBAAkB7N,EAAE,yBAEC8N,YAAa,OACXpJ,EAAAA,EAAAA,KAAWC,EAAAA,EAAU,gBAAiB,KAAM,CACjEE,QAAS,CACP,eAAgB,mBAChBC,IAAKC,EAAAA,EACLC,MAAOpF,KAGXC,EAAAA,EAAAA,OAAe,eACfA,EAAAA,EAAAA,OAAe,aACfA,EAAAA,EAAAA,OAAe,SAEfC,EAAS,KACK6F,IAAAA,MAAW,CACvB4K,OAAO,EACPzB,SAAU,UACV0B,mBAAmB,EACnBC,MAAO,IACPC,kBAAkB,EAClBC,QAAUJ,IACRA,EAAMJ,iBAAiB,aAAcxK,IAAAA,WACrC4K,EAAMJ,iBAAiB,aAAcxK,IAAAA,YAAiB,IAIpDiL,KAAK,CACT9K,KAAM,UACNF,MAAO5F,EAAE,iCAEb,CACF,CAAE,MAAOmF,GACPQ,IAAAA,KAAU,CACRC,MAAO5F,EAAE,+BACT8F,KAAM,QACNC,kBAAmB/F,EAAE,2BAEvBoF,QAAQC,IAAI,iBACd,GAqDF,OACEoE,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACG6G,EAAc,KACb/G,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,uBAAsBH,SAAA,EACnCF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,WAAUH,SAAA,EACvBC,EAAAA,EAAAA,KAAA,MAAAD,SAAKxJ,EAAE,iCACPyJ,EAAAA,EAAAA,KAAA,MAAII,MAAO,CAAEqE,OAAQ,oCAEvB5E,EAAAA,EAAAA,MAAA,OAAKK,UAAU,SAAQH,SAAA,EACrBF,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CAACC,GAAG,kBAAkBnH,UAAU,2BAA0BH,SAAA,EAC7DC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,kCAAiCH,UAC9CC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,mCAEhCsJ,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CAACC,GAAG,kBAAkBnH,UAAU,4BAA2BH,SAAA,EAC9DC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,mCAAkCH,UAC/CC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,oCAEhCsJ,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CACHC,GAAG,uBACHnH,UAAU,6BAA4BH,SAAA,EAEtCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,oCAAmCH,UAChDC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,wCAEhCsJ,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CACHC,GAAG,sBACHnH,UAAU,+BAA8BH,SAAA,EAExCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,sCAAqCH,UAClDC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,uCAEhCsJ,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CACHC,GAAG,yBACHnH,UAAU,4BAA2BH,SAAA,EAErCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,mCAAkCH,UAC/CC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,gDAIpCsJ,EAAAA,EAAAA,MAAA,OAAKK,UAAU,uBAAsBH,SAAA,EACnCF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,gBAAeH,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAKxJ,EAAE,kCACPyJ,EAAAA,EAAAA,KAAA,MAAII,MAAO,CAAEqE,OAAQ,oCAEvB5E,EAAAA,EAAAA,MAAA,OAAKK,UAAU,OAAMH,SAAA,EACnBF,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CACHC,GAAG,oBACHnH,UAAU,8BAA6BH,SAAA,EAEvCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,qCAAoCH,UACjDC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,qCAEhCsJ,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CAACC,GAAG,kBAAkBnH,UAAU,4BAA2BH,SAAA,EAC9DC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,mCAAkCH,UAC/CC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,mCAEhCsJ,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CACHC,GAAG,oBACHnH,UAAU,8BAA6BH,SAAA,EAEvCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,qCAAoCH,UACjDC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,qCAEhCsJ,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CACHC,GAAG,uBACHnH,UAAU,6BAA4BH,SAAA,EAEtCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,oCAAmCH,UAChDC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,wCAEhCsJ,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CACHC,GAAG,mBACHnH,UAAU,6BAA4BH,SAAA,EAEtCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,oCAAmCH,UAChDC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,uCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,oCAEhCsJ,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CAAClH,UAAU,yBAAwBH,SAAA,EACtCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,gCAA+BH,UAC5CC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,uCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAYgC,QAAS2E,EAAa9G,SAChDxJ,EAAE,gCAGLsJ,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CAACC,GAAG,sBAAsBnH,UAAU,4BAA2BH,SAAA,EAClEC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,mCAAkCH,UAC/CC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,uCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,gDAMtCsJ,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,uBAAsBH,SAAA,EACnCF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,WAAUH,SAAA,EACvBF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,oBAAmBH,SAAA,EAChCC,EAAAA,EAAAA,KAAA,MAAAD,SAAKxJ,EAAE,iCACPyJ,EAAAA,EAAAA,KAACoH,EAAAA,GAAI,CAAClH,UAAU,kBAAkBgC,QArThCoF,KACdjB,GAAwBD,EAAoB,EAoTmBrG,SAChDqG,GACCpG,EAAAA,EAAAA,KAAA,KAAGuH,MAAM,8BAETvH,EAAAA,EAAAA,KAAA,KAAGuH,MAAM,kCAIfvH,EAAAA,EAAAA,KAAA,MAAII,MAAO,CAAEqE,OAAQ,oCAEvBzE,EAAAA,EAAAA,KAAA,OAAKE,UAAY,WAASkG,EAAsB,OAAS,IAAKrG,UAC5DF,EAAAA,EAAAA,MAAA,MACEO,MAAO,CACL4B,QAASoE,EAAsB,QAAU,QAEzCrG,SAAA,EAEFC,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CACHC,GAAG,kBACHnH,UAAU,2BAA0BH,SAAA,EAEpCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,kCAAiCH,UAC9CC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,qCAGlCyJ,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CACHC,GAAG,kBACHnH,UAAU,4BAA2BH,SAAA,EAErCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,mCAAkCH,UAC/CC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,sCAGlCyJ,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CACHC,GAAG,uBACHnH,UAAU,6BAA4BH,SAAA,EAEtCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,oCAAmCH,UAChDC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,0CAGlCyJ,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CACHC,GAAG,sBACHnH,UAAU,+BAA8BH,SAAA,EAExCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,sCAAqCH,UAClDC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,yCAGlCyJ,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CACHC,GAAG,yBACHnH,UAAU,4BAA2BH,SAAA,EAErCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,mCAAkCH,UAC/CC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,oDAMxCsJ,EAAAA,EAAAA,MAAA,OAAKK,UAAU,uBAAsBH,SAAA,EACnCF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,gBAAeH,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,oBAAmBH,SAAA,EAChCC,EAAAA,EAAAA,KAAA,MAAAD,SAAKxJ,EAAE,kCACPyJ,EAAAA,EAAAA,KAACoH,EAAAA,GAAI,CAAClH,UAAU,kBAAkBgC,QArZhCsF,KACdjB,GAA4BD,EAAwB,EAoZWvG,SAChDuG,GACCtG,EAAAA,EAAAA,KAAA,KAAGuH,MAAM,8BAETvH,EAAAA,EAAAA,KAAA,KAAGuH,MAAM,kCAIfvH,EAAAA,EAAAA,KAAA,MAAII,MAAO,CAAEqE,OAAQ,oCAEvBzE,EAAAA,EAAAA,KAAA,OAAKE,UAAY,WAASoG,EAA0B,OAAS,IAAKvG,UAChEF,EAAAA,EAAAA,MAAA,MACEO,MAAO,CACL4B,QAASsE,EAA0B,QAAU,QAC7CvG,SAAA,EAEFC,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CACHC,GAAG,oBACHnH,UAAU,8BAA6BH,SAAA,EAEvCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,qCAAoCH,UACjDC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,uCAGlCyJ,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CACHC,GAAG,kBACHnH,UAAU,4BAA2BH,SAAA,EAErCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,mCAAkCH,UAC/CC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,qCAGlCyJ,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CACHC,GAAG,oBACHnH,UAAU,8BAA6BH,SAAA,EAEvCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,qCAAoCH,UACjDC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,uCAGlCyJ,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CACHC,GAAG,uBACHnH,UAAU,6BAA4BH,SAAA,EAEtCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,oCAAmCH,UAChDC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,sCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,0CAGlCyJ,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CACHC,GAAG,mBACHnH,UAAU,6BAA4BH,SAAA,EAEtCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,oCAAmCH,UAChDC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,uCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SAAExJ,EAAE,sCAGlCyJ,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CAAClH,UAAU,yBAAwBH,SAAA,EACtCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,gCAA+BH,UAC5CC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,uCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAYgC,QAAS2E,EAAa9G,SAChDxJ,EAAE,kCAIPyJ,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAACuH,EAAAA,GAAI,CAACC,GAAG,sBAAsBnH,UAAU,4BAA2BH,SAAA,EAClEC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,mCAAkCH,UAC/CC,EAAAA,EAAAA,KAAA,OACEE,UAAU,GACVzC,IAAI,uCACJ8C,IAAI,QAGRP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWH,SACzBxJ,EAAE,oDAShB,C","sources":["Components/employersSide/CreateJob.js","Components/employersSide/Sidebar.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport NavBar from \"../element/NavBar\";\r\nimport Footer from \"../element/Footer\";\r\nimport JoditEditor from \"jodit-react\";\r\nimport { useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../api/BaseApi\";\r\nimport ApiKey from \"../api/ApiKey\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport HTMLReactParser from \"html-react-parser\";\r\nimport Select from \"react-select\";\r\nimport Swal from \"sweetalert2\";\r\nimport Cookies from \"js-cookie\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport LocationOnIcon from \"@mui/icons-material/LocationOn\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\"; // import styles\r\nconst CreateJob = () => {\r\n  const editor = useRef(null);\r\n  const tokenKey = Cookies.get(\"tokenClient\");\r\n  const navigate = useNavigate();\r\n  const [t, i18n] = useTranslation(\"global\");\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [selectedPayment, setSelectedPayment] = useState(null);\r\n  const handleOpen = (plan) => {\r\n    // console.log(plan);\r\n    setSelectedPayment(plan);\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setSelectedPayment(null);\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/user/employerlogin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      // getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  let primaryColor = Cookies.get(\"primaryColor\");\r\n  let secondaryColor = Cookies.get(\"secondaryColor\");\r\n  const mapKey = Cookies.get(\"mapKey\");\r\n\r\n  const [hoverSearchColor, setHoverSearchColor] = useState(false);\r\n\r\n  const handleSearchMouseEnter = () => {\r\n    setHoverSearchColor(true);\r\n  };\r\n\r\n  const handleSearchMouseLeave = () => {\r\n    setHoverSearchColor(false);\r\n  };\r\n\r\n  const [hoverUploadCVColor, setHoverUploadCVColor] = useState(false);\r\n\r\n  const handleUploadCVMouseEnter = () => {\r\n    setHoverUploadCVColor(true);\r\n  };\r\n\r\n  const handleUploadCVMouseLeave = () => {\r\n    setHoverUploadCVColor(false);\r\n  };\r\n\r\n  const [selectedSkills, setSelectedSkills] = useState([]);\r\n\r\n  const [skillValidationError, setSkillValidationError] = useState(\"\");\r\n\r\n  const handleSkillChange = (selectedOptions) => {\r\n    setSelectedSkills(selectedOptions); // Update selected skills\r\n\r\n    // console.log(selectedOptions);\r\n\r\n    // Check if selectedOptions is not empty\r\n    // if (selectedOptions.length > 0) {\r\n    //   setSkillValidationError(\"\"); // Clear the error message\r\n    // } else {\r\n    //   setSkillValidationError(\"Skill is required\");\r\n    // }\r\n  };\r\n\r\n  const [jobData, setJobData] = useState({\r\n    job_title: \"\",\r\n    category: \"\",\r\n    subCategory: [],\r\n    jobDescription: \"\",\r\n    company_name: \"\",\r\n    skill: \"\",\r\n    companyProfile: \"\",\r\n    work_type: \"\",\r\n    contact_name: \"\",\r\n    contact_number: \"\",\r\n    company_website: \"\",\r\n    designation: \"\",\r\n    location: \"\",\r\n    experience: \"\",\r\n    annual_salary: \"\",\r\n    logo: \"\",\r\n    last_date: \"\",\r\n  });\r\n\r\n  const [totalData, setTotalData] = useState([]);\r\n  const [jobCategories, setJobCategories] = useState([]);\r\n  const [subCategories, setSubCategories] = useState([]);\r\n  const [designationList, setDesignationList] = useState([]);\r\n  const [skillList, setSkillList] = useState([]);\r\n  const [experience, setExperience] = useState([]);\r\n  const [salary, setSalary] = useState([]);\r\n  const [workType, setWorkType] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [selectedCategories, setSelectedSubCategories] = useState([]);\r\n\r\n  const [errors, setErrors] = useState({\r\n    job_title: \"\",\r\n    category: \"\",\r\n    subCategory: [],\r\n    jobDescription: \"\",\r\n    company_name: \"\",\r\n    companyProfile: \"\",\r\n    work_type: \"\",\r\n    contact_name: \"\",\r\n    contact_number: \"\",\r\n    company_website: \"\",\r\n    skill: \"\",\r\n    designation: \"\",\r\n    location: \"\",\r\n    experience: \"\",\r\n    annual_salary: \"\",\r\n    last_date: \"\",\r\n  });\r\n\r\n  const handleSubcategory = (selectedOption) => {\r\n    // console.log(selectedOption);\r\n\r\n    setSelectedSubCategories(selectedOption);\r\n\r\n    const ids = selectedOption.map((item) => item.value);\r\n    // console.log(ids);\r\n\r\n    setJobData((prevJobData) => ({\r\n      ...prevJobData,\r\n      subCategory: ids,\r\n    }));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"company_name\") {\r\n      setTotalData((prevTotalData) => ({\r\n        ...prevTotalData,\r\n        company_name: value,\r\n      }));\r\n      // console.log(totalData);\r\n    } else if (name === \"contact_number\") {\r\n      setTotalData((prevTotalData) => ({\r\n        ...prevTotalData,\r\n        contact_number: value,\r\n      }));\r\n\r\n      // console.log(totalData);\r\n    } else if (name === \"companyProfile\") {\r\n      setTotalData((prevTotalData) => ({\r\n        ...prevTotalData,\r\n        companyProfile: value,\r\n      }));\r\n      // console.log(totalData);\r\n    } else if (name === \"subCategory\") {\r\n      setJobData((prevJobData) => ({\r\n        ...prevJobData,\r\n        subCategory: [value],\r\n      }));\r\n    } else {\r\n      setJobData((prevJobData) => ({\r\n        ...prevJobData,\r\n        [name]: value,\r\n      }));\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        [name]: \"\",\r\n      }));\r\n    }\r\n\r\n    // console.log(jobData);\r\n  };\r\n\r\n  function handleChange2(date, fieldName) {\r\n    setJobData((prevJobData) => ({\r\n      ...prevJobData,\r\n      [fieldName]: date,\r\n    }));\r\n    // console.log(jobData);\r\n  }\r\n  const getData = async () => {\r\n    try {\r\n      const response = await axios.post(BaseApi + \"/job/createJob\", null, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          key: ApiKey,\r\n          token: tokenKey,\r\n        },\r\n      });\r\n      if (response.data.status === 200) {\r\n        setTotalData(response.data.response.jobData);\r\n        setJobCategories(response.data.response.categories);\r\n        setDesignationList(response.data.response.designationlList);\r\n\r\n        setSkillList(response.data.response.skillList);\r\n        setExperience(response.data.response.experience);\r\n        setSalary(response.data.response.sallery);\r\n        setWorkType(response.data.response.worktype);\r\n      } else if (response.data.status === 400) {\r\n        Cookies.remove(\"tokenClient\");\r\n        Cookies.remove(\"user_type\");\r\n        Cookies.remove(\"fname\");\r\n        navigate(\"/\");\r\n        Swal.fire({\r\n          title: response.data.message,\r\n          icon: \"warning\",\r\n          confirmButtonText: t(\"employerCreateJob.close\"),\r\n        });\r\n      } else {\r\n        navigate(\"/plans/purchase\");\r\n        Swal.fire({\r\n          title: response.data.message,\r\n          icon: \"warning\",\r\n          confirmButtonText: t(\"employerCreateJob.close\"),\r\n        });\r\n      }\r\n    } catch (error) {\r\n      if (error.message === \"Network Error\") {\r\n        Cookies.remove(\"tokenClient\");\r\n        Cookies.remove(\"user_type\");\r\n        Cookies.remove(\"fname\");\r\n        navigate(\"/\");\r\n        Swal.fire({\r\n          title: t(\"tokenExpired.tokenExpired\"),\r\n          icon: \"warning\",\r\n          confirmButtonText: t(\"jobDescription.close\"),\r\n        });\r\n        setTimeout(function () {\r\n          window.location.reload();\r\n        }, 3000);\r\n      }\r\n      console.log(\"No data received\");\r\n    }\r\n  };\r\n\r\n  const getSubCategories = async (id) => {\r\n    setSelectedSubCategories([]);\r\n    try {\r\n      const subCatData = await axios.post(\r\n        BaseApi + `/categories/getSubCategory/${id}`,\r\n        null,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n          },\r\n        }\r\n      );\r\n      setSubCategories(subCatData.data.response);\r\n    } catch (error) {\r\n      console.log(\"Couldn't get Sub category data!\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n    getSubCategories();\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  const handleClick = async () => {\r\n    // console.log(totalData);\r\n    var skills = document.getElementsByName(\"skill\");\r\n    var skillArray = [];\r\n\r\n    skills.forEach((element) => {\r\n      skillArray.push(element.value);\r\n    });\r\n    // console.log(skillArray);\r\n\r\n    // console.log(jobData, \"after strong skill\");\r\n\r\n    // console.log(jobData);\r\n\r\n    // Check initial skill validation\r\n    if (selectedSkills.length === 0) {\r\n      setSkillValidationError(\"Skill is required\");\r\n    }\r\n\r\n    try {\r\n      const newErrors = {};\r\n\r\n      if (jobData.annual_salary === \"\") {\r\n        newErrors.annual_salary = t(\"employerCreateJob.annualSalaryRequired\");\r\n        // window.scrollTo(0, 0);\r\n      }\r\n\r\n      if (jobData.category === \"\") {\r\n        newErrors.category = t(\"employerCreateJob.categoryRequired\");\r\n        window.scrollTo(0, 0);\r\n      }\r\n      if (totalData.companyProfile === \"\") {\r\n        newErrors.companyProfile = t(\r\n          \"employerCreateJob.companyProfileRequired\"\r\n        );\r\n        window.scrollTo(0, 0);\r\n      }\r\n      if (totalData.company_name === \"\") {\r\n        newErrors.company_name = t(\"employerCreateJob.companyNameRequired\");\r\n        window.scrollTo(0, 0);\r\n      }\r\n      if (jobData.contact_name === \"\") {\r\n        newErrors.contact_name = t(\"employerCreateJob.contactNameRequired\");\r\n        const inputElement = document.getElementById(\"contact_name_input\");\r\n        if (inputElement) {\r\n          inputElement.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n        }\r\n        // window.scrollTo(0, 0);\r\n      }\r\n      if (totalData.contact_number === \"\") {\r\n        newErrors.contact_number = t(\"employerCreateJob.contactNumberRequired\");\r\n        window.scrollTo(0, 0);\r\n      } else if (!/^\\+?\\d{1,3}-?\\d{9,15}$/.test(totalData.contact_number)) {\r\n        newErrors.contact_number =\r\n          \"Contact Number under 15 digits and contain only digits\";\r\n        window.scrollTo(0, 0);\r\n      }\r\n      // console.log(\"all ok\")\r\n      if (jobData.designation === \"\") {\r\n        newErrors.designation = t(\"employerCreateJob.workingRelationRequired\");\r\n        // window.scrollTo(0, 0);\r\n        // Scroll to the input element\r\n        const inputElement = document.getElementById(\"designation_input\");\r\n        if (inputElement) {\r\n          inputElement.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n      }\r\n      if (jobData.experience === \"\") {\r\n        newErrors.experience = t(\"employerCreateJob.experienceRequired\");\r\n        // window.scrollTo(0, 0);\r\n      }\r\n\r\n      if (jobData.jobDescription === \"\") {\r\n        newErrors.jobDescription = t(\r\n          \"employerCreateJob.jobDescriptionRequired\"\r\n        );\r\n        window.scrollTo(0, 0);\r\n      }\r\n      if (jobData.job_title === \"\") {\r\n        newErrors.job_title = t(\"employerCreateJob.jobTitleRequired\");\r\n        window.scrollTo(0, 0);\r\n      }\r\n      if (jobData.last_date === \"\") {\r\n        newErrors.last_date = t(\"employerCreateJob.lastDateRequired\");\r\n        // window.scrollTo(0, 0);\r\n      }\r\n      if (jobData.location === \"\") {\r\n        newErrors.location = t(\"employerCreateJob.locationRequired\");\r\n        // window.scrollTo(0, 0);\r\n      }\r\n      // if (jobData.subCategory === \"\") {\r\n      //   newErrors.subCategory = \"Sub Category is required\";\r\n      //   // window.scrollTo(0, 0);\r\n      // }\r\n      if (jobData.work_type === \"\") {\r\n        newErrors.work_type = t(\"employerCreateJob.workTypeRequired\");\r\n        // window.scrollTo(0, 0);\r\n      }\r\n      if (jobData.company_website) {\r\n        const urlFormat = /^https:\\/\\/(www\\.)?[\\w.-]+\\.[a-z]{2,5}$/i;\r\n        if (\r\n          jobData.company_website &&\r\n          !urlFormat.test(jobData.company_website)\r\n        ) {\r\n          newErrors.company_website = t(\"employerCreateJob.urlInvalid\");\r\n          window.scrollTo(0, 0);\r\n        }\r\n      }\r\n\r\n      setErrors(newErrors);\r\n      // if (skillValidationError) {\r\n      //   return;\r\n      // }\r\n\r\n      if (Object.keys(newErrors).length === 0) {\r\n        // console.log(jobData, \"Inside\");\r\n        const confirmationResult = await Swal.fire({\r\n          title: t(\"employerCreateJob.createJobConfirmTitle\"),\r\n          text: t(\"employerCreateJob.createJobConfirmTxt\"),\r\n          icon: \"question\",\r\n          showCancelButton: true,\r\n          confirmButtonText: t(\"employerCreateJob.yes\"),\r\n          cancelButtonText: t(\"employerCreateJob.no\"),\r\n        });\r\n        if (confirmationResult.isConfirmed) {\r\n          const updatedProfile = {\r\n            ...jobData,\r\n            skill: skillArray,\r\n            company_name: totalData.company_name,\r\n            contact_number: totalData.contact_number,\r\n            companyProfile: totalData.companyProfile,\r\n          };\r\n\r\n          setLoading(true);\r\n          const response = await axios.post(\r\n            BaseApi + \"/job/createJob\",\r\n            updatedProfile,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                key: ApiKey,\r\n                token: tokenKey,\r\n              },\r\n            }\r\n          );\r\n          if (response.data.status === 200) {\r\n            setLoading(false);\r\n            Swal.fire({\r\n              title: t(\"employerCreateJob.createJobSuccessTitle\"),\r\n              icon: \"success\",\r\n              confirmButtonText: t(\"employerCreateJob.close\"),\r\n            });\r\n            navigate(\"/user/managejob\");\r\n          } else if (response.data.status === 400) {\r\n            setLoading(false);\r\n            Cookies.remove(\"tokenClient\");\r\n            Cookies.remove(\"user_type\");\r\n            Cookies.remove(\"fname\");\r\n            navigate(\"/\");\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"warning\",\r\n              confirmButtonText: t(\"employerCreateJob.close\"),\r\n            });\r\n          } else {\r\n            setLoading(false);\r\n            Swal.fire({\r\n              title: t(\"employerCreateJob.createJobFailedTitle\"),\r\n              text: HTMLReactParser(response.data.message),\r\n              icon: \"error\",\r\n              confirmButtonText: t(\"employerCreateJob.close\"),\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      if (error.message === \"Network Error\") {\r\n        Cookies.remove(\"tokenClient\");\r\n        Cookies.remove(\"user_type\");\r\n        Cookies.remove(\"fname\");\r\n        navigate(\"/\");\r\n        Swal.fire({\r\n          title: t(\"tokenExpired.tokenExpired\"),\r\n          icon: \"warning\",\r\n          confirmButtonText: t(\"jobDescription.close\"),\r\n        });\r\n        setTimeout(function () {\r\n          window.location.reload();\r\n        }, 3000);\r\n      }\r\n      Swal.fire({\r\n        title: t(\"employerCreateJob.createJobFailedTitle\"),\r\n        icon: \"error\",\r\n        confirmButtonText: t(\"employerCreateJob.close\"),\r\n      });\r\n      console.log(\"Could not submit job data\");\r\n    }\r\n  };\r\n  // working\r\n  // const handleFileUpload = async (e) => {\r\n  //   const file = e.target.files[0];\r\n  //   const base64 = await convertToBase64(file);\r\n  //   // console.log(base64);\r\n  //   setJobData({ ...jobData, logo: base64 });\r\n  // };\r\n\r\n  const handleFileUpload = async (e) => {\r\n    const file = e.target.files[0];\r\n\r\n    // Check if file size exceeds 500KB\r\n    if (file.size > 500 * 1024) {\r\n      Swal.fire({\r\n        title: t(\"jobseekerChangePhoto.fileSizeExceed\"),\r\n        icon: \"warning\",\r\n        confirmButtonText: t(\"jobseekerChangePhoto.close\"),\r\n      });\r\n      e.target.value = \"\";\r\n      return; // Exit function\r\n    }\r\n\r\n    // Create an object URL to get the image dimensions\r\n    const objectURL = URL.createObjectURL(file);\r\n    const image = new Image();\r\n\r\n    // Set up a promise to get image dimensions\r\n    const imageSizePromise = new Promise((resolve) => {\r\n      image.onload = () => {\r\n        resolve({\r\n          width: image.width,\r\n          height: image.height,\r\n        });\r\n      };\r\n    });\r\n\r\n    image.src = objectURL;\r\n\r\n    const dimensions = await imageSizePromise;\r\n\r\n    // Check if minimum dimensions are met\r\n    if (dimensions.width < 250 || dimensions.height < 250) {\r\n      Swal.fire({\r\n        title: t(\"jobseekerChangePhoto.minFileSize\"),\r\n        icon: \"warning\",\r\n        confirmButtonText: t(\"jobseekerChangePhoto.close\"),\r\n      });\r\n      e.target.value = \"\";\r\n      return; // Exit function\r\n    }\r\n\r\n    // Convert the file to base64\r\n    const base64 = await convertToBase64(file);\r\n\r\n    // Set the jobData state\r\n    setJobData({ ...jobData, logo: base64 });\r\n  };\r\n\r\n  const getWorkType = (id) => {\r\n    if (id == 1) {\r\n      return \"Full Time\";\r\n    }\r\n    if (id == 2) {\r\n      return \"Part Time\";\r\n    }\r\n    if (id == 3) {\r\n      return \"Casual\";\r\n    }\r\n    if (id == 4) {\r\n      return \"Seasonal\";\r\n    }\r\n    if (id == 5) {\r\n      return \"Fixed Term\";\r\n    }\r\n  };\r\n\r\n  const getCategoryName = (catId) => {\r\n    for (let i = 0; i < jobCategories.length; i++) {\r\n      if (jobCategories[i].id == catId) {\r\n        return jobCategories[i].name;\r\n      }\r\n    }\r\n  };\r\n\r\n  const getDesignationName = (designationId) => {\r\n    for (let i = 0; i < designationList.length; i++) {\r\n      if (designationList[i].id == designationId) {\r\n        return designationList[i].name;\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    setJobData({ ...jobData, logo: \"\" });\r\n  };\r\n\r\n  // Code for loading Location\r\n\r\n  const [autocompleteService, setAutocompleteService] = useState(null);\r\n  const [suggestions, setSuggestions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Load Google Maps AutocompleteService after component mounts\r\n    const script = document.createElement(\"script\");\r\n    script.src = `https://maps.googleapis.com/maps/api/js?key=${mapKey}&libraries=places`;\r\n    script.onload = () => {\r\n      setAutocompleteService(\r\n        new window.google.maps.places.AutocompleteService()\r\n      );\r\n      // console.log(autocompleteService);\r\n    };\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      document.body.removeChild(script);\r\n    };\r\n  }, []);\r\n\r\n  const handleLocationChange = (e) => {\r\n    const { value } = e.target;\r\n    setSuggestionTaken(false);\r\n    if (value == \"\") {\r\n      setSuggestionTaken(true);\r\n    }\r\n    if (value != \"\") {\r\n      setErrors({\r\n        location: \"\",\r\n      });\r\n    }\r\n\r\n    setJobData((prevFilter) => ({\r\n      ...prevFilter,\r\n      location: value,\r\n    }));\r\n\r\n    if (autocompleteService) {\r\n      // Call Google Maps Autocomplete API\r\n      autocompleteService.getPlacePredictions(\r\n        {\r\n          input: value,\r\n          types: [\"(cities)\"], // Restrict to cities if needed\r\n        },\r\n        (predictions, status) => {\r\n          if (status === \"OK\" && predictions) {\r\n            setSuggestions(\r\n              predictions.map((prediction) => prediction.description)\r\n            );\r\n          } else {\r\n            setSuggestions([]);\r\n          }\r\n        }\r\n      );\r\n    }\r\n    if (jobData.location === \"\") {\r\n      setSuggestions([]);\r\n    }\r\n  };\r\n  const [suggestionTaken, setSuggestionTaken] = useState(false);\r\n\r\n  const handleSuggestionClick = (suggestion) => {\r\n    // Update the input value with the clicked suggestion\r\n    handleLocationChange({ target: { name: \"location\", value: suggestion } });\r\n\r\n    setSuggestionTaken(true);\r\n    // Clear the suggestions\r\n    setSuggestions([]);\r\n    // console.log(filterItem);\r\n  };\r\n\r\n  function handleLastDateChange(event) {\r\n    const { name, value } = event.target;\r\n    let currentDate = new Date();\r\n    let selectedDate = new Date(value);\r\n\r\n    if (name === \"last_date\" && selectedDate < currentDate) {\r\n      // If the selected date is older than the current date, reset the value to current date\r\n      const formattedCurrentDate = currentDate.toISOString().split(\"T\")[0];\r\n      // Update the state with the current date\r\n      setJobData({ ...jobData, [name]: formattedCurrentDate });\r\n    } else {\r\n      // Update the state with the selected value\r\n      setJobData({ ...jobData, [name]: value });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      {loading ? (\r\n        <div className=\"loader-container\"></div>\r\n      ) : (\r\n        <>\r\n          <div className=\"container createJob\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-3\">\r\n                <Sidebar />\r\n              </div>\r\n\r\n              <div\r\n                className=\"col-lg-9 mb-5 CLPanelRight\"\r\n                style={{\r\n                  borderLeft: \"2px solid #e6e8e7\",\r\n                  borderRight: \"2px solid #e6e8e7\",\r\n                }}\r\n              >\r\n                <div className=\"d-flex PageHeader\">\r\n                  <img src=\"/Images/employerSide/icon1color.png\" alt=\"\" />\r\n                  <h3 className=\"mx-2\">{t(\"employerCreateJob.createJob\")}</h3>\r\n                </div>\r\n                <form>\r\n                  <div className=\"mb-5 mt-4\">\r\n                    <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                      <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                        {t(\"employerCreateJob.jobTitle\")}\r\n                        <span className=\"RedStar\">*</span>\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"form3Example1\"\r\n                        className={`form-control ${\r\n                          errors.job_title && \"input-error\"\r\n                        }`}\r\n                        name=\"job_title\"\r\n                        value={jobData.job_title}\r\n                        placeholder={t(\"employerCreateJob.jobTitle\")}\r\n                        onChange={handleChange}\r\n                      />\r\n                      {errors.job_title && (\r\n                        <div className=\"text-danger\">{errors.job_title}</div>\r\n                      )}\r\n                    </div>\r\n                    {/* <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                      <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                        Job Type<span className=\"RedStar\">*</span>\r\n                      </label>\r\n                      <select\r\n                        className={`form-select ${\r\n                          errors.job_type && \"input-error\"\r\n                        }`}\r\n                        aria-label=\"Default select example\"\r\n                        name=\"job_type\"\r\n                        value={jobData.job_type}\r\n                        onChange={handleChange}\r\n                      >\r\n                        <option selected value=\"\">\r\n                          Select Job Type\r\n                        </option>\r\n\r\n                        <option value=\"1\">Normal Job</option>\r\n                        <option value=\"2\">Partnership Job</option>\r\n                      </select>\r\n                      {errors.job_type && (\r\n                        <div className=\"text-danger\">{errors.job_type}</div>\r\n                      )}\r\n                    </div> */}\r\n                    <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                      <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                        {t(\"employerCreateJob.category\")}\r\n                        <span className=\"RedStar\">*</span>\r\n                      </label>\r\n                      <select\r\n                        className={`form-select ${\r\n                          errors.category && \"input-error\"\r\n                        }`}\r\n                        aria-label=\"Default select example\"\r\n                        name=\"category\"\r\n                        value={jobData.category}\r\n                        onChange={(e) => {\r\n                          handleChange(e);\r\n                          getSubCategories(e.target.value);\r\n                        }}\r\n                      >\r\n                        <option value=\"\">\r\n                          {t(\"employerCreateJob.selectJobCategory\")}\r\n                        </option>\r\n                        {jobCategories.map((i, index) => (\r\n                          <option value={i.id} key={index}>\r\n                            {i.name}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                      {errors.category && (\r\n                        <div className=\"text-danger\">{errors.category}</div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  {jobData.category && subCategories ? (\r\n                    <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx skillPackage  APJoditEditor\">\r\n                      <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                        {t(\"employerCreateJob.subCategory\")}\r\n                      </label>\r\n\r\n                      <Select\r\n                        // defaultValue={[colourOptions[2], colouptions[3]]}\r\n                        isMulti\r\n                        isSearchable\r\n                        name=\"Subcategory\"\r\n                        options={subCategories.map((i) => ({\r\n                          value: i.id,\r\n                          label: i.name,\r\n                        }))}\r\n                        className=\"basic-multi-select\"\r\n                        value={selectedCategories}\r\n                        classNamePrefix={t(\r\n                          \"employerCreateJob.selectSubCategory\"\r\n                        )}\r\n                        onChange={handleSubcategory}\r\n                      />\r\n                    </div>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                      {t(\"employerCreateJob.jobDescription\")}\r\n                      <span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    {/* <JoditEditor\r\n                      ref={editor}\r\n                      placeholder={t(\"employerCreateJob.jobDescription\")}\r\n                      // className={`form-control ${errors.jobDescription && 'input-error'}`}\r\n                      name=\"jobDescription\"\r\n                      value={jobData.jobDescription}\r\n                      onChange={(jobDescription) =>\r\n                        handleChange({\r\n                          target: {\r\n                            value: jobDescription,\r\n                            name: \"jobDescription\",\r\n                          },\r\n                        })\r\n                      }\r\n                    /> */}\r\n\r\n                    <ReactQuill\r\n                      theme=\"snow\"\r\n                      value={jobData.jobDescription}\r\n                      onChange={(value) =>\r\n                        handleChange({\r\n                          target: { name: \"jobDescription\", value },\r\n                        })\r\n                      }\r\n                      style={{ minHeight: \"250px\", height: \"200px\" }}\r\n                      placeholder={t(\"reactQuill.placeholder\")}\r\n                    />\r\n                    {errors.jobDescription && (\r\n                      <div className=\"text-danger\">{errors.jobDescription}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                      {t(\"employerCreateJob.companyName\")}\r\n                      <span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example3\"\r\n                      className={`form-control ${\r\n                        errors.company_name && \"input-error\"\r\n                      }`}\r\n                      name=\"company_name\"\r\n                      value={totalData.company_name}\r\n                      placeholder={t(\"employerCreateJob.companyName\")}\r\n                      onChange={handleChange}\r\n                    />\r\n                    {errors.company_name && (\r\n                      <div className=\"text-danger\">{errors.company_name}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                      {t(\"employerCreateJob.companyProfile\")}\r\n                      <span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    {/* <JoditEditor\r\n                      ref={editor}\r\n                      name=\"companyProfile\"\r\n                      // className={`form-control ${errors.companyProfile && 'input-error'}`}\r\n                      value={totalData.companyProfile}\r\n                      onChange={(companyProfile) =>\r\n                        handleChange({\r\n                          target: {\r\n                            value: companyProfile,\r\n                            name: \"companyProfile\",\r\n                          },\r\n                        })\r\n                      }\r\n                    /> */}\r\n\r\n                    <ReactQuill\r\n                      theme=\"snow\"\r\n                      value={totalData.companyProfile}\r\n                      onChange={(companyProfile) =>\r\n                        handleChange({\r\n                          target: {\r\n                            name: \"companyProfile\",\r\n                            value: companyProfile,\r\n                          },\r\n                        })\r\n                      }\r\n                      style={{ minHeight: \"250px\", height: \"200px\" }}\r\n                      placeholder={t(\"reactQuill.placeholder\")}\r\n                    />\r\n                    {errors.companyProfile && (\r\n                      <div className=\"text-danger\">{errors.companyProfile}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                      {t(\"employerCreateJob.workType\")}\r\n                      <span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.work_type && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"work_type\"\r\n                      value={jobData.work_type}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        {t(\"employerCreateJob.selectWorkType\")}\r\n                      </option>\r\n                      {Object.entries(workType).map(([key, value]) => {\r\n                        return (\r\n                          <>\r\n                            <option\r\n                              key={key}\r\n                              value={key}\r\n                              // onChange={() => jobType(value)}\r\n                            >\r\n                              {value}\r\n                            </option>\r\n                          </>\r\n                        );\r\n                      })}\r\n                    </select>\r\n                    {errors.work_type && (\r\n                      <div className=\"text-danger\">{errors.work_type}</div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                      {t(\"employerCreateJob.contactName\")}\r\n                      <span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example3\"\r\n                      className={`form-control ${\r\n                        errors.contact_name && \"input-error\"\r\n                      }`}\r\n                      name=\"contact_name\"\r\n                      value={jobData.contact_name}\r\n                      placeholder={t(\"employerCreateJob.contactName\")}\r\n                      onChange={handleChange}\r\n                    />\r\n                    {errors.contact_name && (\r\n                      <div className=\"text-danger\">{errors.contact_name}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                      {t(\"employerCreateJob.contactNumber\")}\r\n                      <span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"contact_name_input\"\r\n                      className={`form-control ${\r\n                        errors.contact_number && \"input-error\"\r\n                      }`}\r\n                      name=\"contact_number\"\r\n                      value={totalData.contact_number}\r\n                      placeholder={t(\"employerCreateJob.contactNumber\")}\r\n                      onChange={handleChange}\r\n                    />\r\n                    {errors.contact_number && (\r\n                      <div className=\"text-danger\">{errors.contact_number}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                      {t(\"employerCreateJob.companyWebsite\")}\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example3\"\r\n                      className={`form-control ${\r\n                        errors.company_website && \"input-error\"\r\n                      }`}\r\n                      name=\"company_website\"\r\n                      value={jobData.company_website}\r\n                      placeholder={t(\"employerCreateJob.companyWebsite\")}\r\n                      onChange={handleChange}\r\n                    />\r\n                    {errors.company_website && (\r\n                      <div className=\"text-danger\">\r\n                        {errors.company_website}\r\n                      </div>\r\n                    )}\r\n                    <div id=\"emailHelp\" className=\"form-text\">\r\n                      Eg: https://www.google.com or https://google.com\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx skillPackage\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                      {t(\"employerCreateJob.skills\")}\r\n                      {/* <span className=\"RedStar\">*</span> */}\r\n                    </label>\r\n\r\n                    <Select\r\n                      // defaultValue={[colourOptions[2], colouptions[3]]}\r\n                      isMulti\r\n                      isSearchable\r\n                      name=\"skill\"\r\n                      options={skillList.map((i) => ({\r\n                        value: i.id,\r\n                        label: i.name,\r\n                      }))}\r\n                      className=\"basic-multi-select\"\r\n                      value={selectedSkills}\r\n                      classNamePrefix={t(\"employerCreateJob.selectSkills\")}\r\n                      onChange={handleSkillChange}\r\n                    />\r\n                    {/* {skillValidationError && (\r\n                      <div className=\"text-danger\">{skillValidationError}</div>\r\n                    )} */}\r\n                  </div>\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                      {t(\"employerCreateJob.workingRelation\")}\r\n                      <span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      id=\"designation_input\"\r\n                      className={`form-select ${\r\n                        errors.designation && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"designation\"\r\n                      value={jobData.designation}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        {t(\"employerCreateJob.chooseWorkingRelation\")}\r\n                      </option>\r\n                      {designationList.map((i, index) => {\r\n                        return (\r\n                          <>\r\n                            <option value={i.id} key={index}>\r\n                              {i.name}\r\n                            </option>\r\n                          </>\r\n                        );\r\n                      })}\r\n                    </select>\r\n                    {errors.designation && (\r\n                      <div className=\"text-danger\">{errors.designation}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                      {t(\"employerCreateJob.location\")}\r\n                      <span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example3\"\r\n                      className={`form-control ${\r\n                        errors.location && \"input-error\"\r\n                      }`}\r\n                      name=\"location\"\r\n                      value={jobData.location}\r\n                      placeholder={t(\"employerCreateJob.location\")}\r\n                      onChange={handleLocationChange}\r\n                    />\r\n                    {suggestions.length > 0 && (\r\n                      <div\r\n                        className=\"suggestions\"\r\n                        style={{ display: suggestionTaken ? \"none\" : \"\" }}\r\n                      >\r\n                        <ul className=\"locationDropdown\">\r\n                          {suggestions.map((suggestion, index) => (\r\n                            <div key={index} className=\"suggestion-item\">\r\n                              <li\r\n                                onClick={() =>\r\n                                  handleSuggestionClick(suggestion)\r\n                                }\r\n                              >\r\n                                <div className=\"eachLocation\">\r\n                                  <div className=\"locationIcon\">\r\n                                    <LocationOnIcon fontSize=\"small\" />\r\n                                  </div>{\" \"}\r\n                                  <div className=\"locationSuggestion\">\r\n                                    {suggestion}\r\n                                  </div>\r\n                                </div>{\" \"}\r\n                              </li>\r\n                            </div>\r\n                          ))}\r\n                        </ul>\r\n                      </div>\r\n                    )}\r\n                    {errors.location && (\r\n                      <div className=\"text-danger\">{errors.location}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                      {t(\"employerCreateJob.experience(inYears)\")}\r\n                      <span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.experience && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"experience\"\r\n                      value={jobData.experience}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        {t(\"employerCreateJob.chooseExp\")}\r\n                      </option>\r\n                      {Object.entries(experience).map(([key, value]) => {\r\n                        return (\r\n                          <option key={key} value={key}>\r\n                            {value}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                    </select>\r\n                    {errors.experience && (\r\n                      <div className=\"text-danger\">{errors.experience}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                      {t(\"employerCreateJob.annualSalary\")}\r\n                      <span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.annual_salary && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"annual_salary\"\r\n                      value={jobData.annual_salary}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        {t(\"employerCreateJob.selectSalary\")}\r\n                      </option>\r\n                      {Object.entries(salary).map(([key, value]) => {\r\n                        return (\r\n                          <option key={key} value={key}>\r\n                            {value}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                    </select>\r\n                    {errors.annual_salary && (\r\n                      <div className=\"text-danger\">{errors.annual_salary}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label htmlFor=\"formFile\" className=\"form-label\">\r\n                      {t(\"employerCreateJob.companyLogo\")}\r\n                    </label>\r\n                    <input\r\n                      className=\"form-select\"\r\n                      aria-label=\"Default select example\"\r\n                      type=\"file\"\r\n                      lable=\"Image\"\r\n                      name=\"logo\"\r\n                      id=\"file-upload\"\r\n                      accept=\".jpeg, .png, .jpg, .gif\"\r\n                      onChange={(e) => handleFileUpload(e)}\r\n                    />\r\n                    <div id=\"emailHelp\" className=\"form-text\">\r\n                      {t(\"employerCreateJob.belowTxt1\")}\r\n                    </div>\r\n                    <img\r\n                      src={jobData.logo || \"\"}\r\n                      alt=\"\"\r\n                      style={{\r\n                        width: \"150px\",\r\n                        marginTop: \"10px\",\r\n                        marginRight: \"10px\",\r\n                      }}\r\n                    />\r\n                    {jobData.logo ? (\r\n                      <button\r\n                        className=\"btn-sm btn-outline-dark button1 ml-3\"\r\n                        onClick={() => handleDelete()}\r\n                      >\r\n                        {t(\"employerCreateJob.deleteButton\")}\r\n                      </button>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </div>\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                      {t(\"employerCreateJob.lastDate\")}\r\n                      <span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <div className=\"date-picker-wrapper\">\r\n                      <input\r\n                        type=\"date\"\r\n                        id=\"formLastDate\"\r\n                        className={`form-control ${\r\n                          errors.last_date && \"input-error\"\r\n                        }`}\r\n                        name=\"last_date\"\r\n                        value={jobData.last_date}\r\n                        placeholder={t(\"employerCreateJob.lastDate\")}\r\n                        onChange={handleLastDateChange}\r\n                      />\r\n                    </div>\r\n                    {errors.last_date && (\r\n                      <div className=\"text-danger\">{errors.last_date}</div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"bottomButtons\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-primary button1\"\r\n                      onClick={handleClick}\r\n                      style={{\r\n                        backgroundColor: hoverSearchColor\r\n                          ? secondaryColor\r\n                          : primaryColor,\r\n                        border: hoverSearchColor\r\n                          ? secondaryColor\r\n                          : primaryColor,\r\n                      }}\r\n                      onMouseEnter={handleSearchMouseEnter}\r\n                      onMouseLeave={handleSearchMouseLeave}\r\n                    >\r\n                      {t(\"employerCreateJob.postButton\")}\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-primary button2\"\r\n                      onClick={() => handleOpen(jobData)}\r\n                      style={{\r\n                        color: hoverUploadCVColor\r\n                          ? primaryColor\r\n                          : secondaryColor,\r\n                        backgroundColor: \"white\",\r\n                        border: hoverUploadCVColor\r\n                          ? `2px solid ${primaryColor}`\r\n                          : `2px solid ${secondaryColor}`,\r\n                      }}\r\n                      onMouseEnter={handleUploadCVMouseEnter}\r\n                      onMouseLeave={handleUploadCVMouseLeave}\r\n                    >\r\n                      {t(\"employerCreateJob.previewButton\")}\r\n                    </button>\r\n\r\n                    <div>\r\n                      <Modal\r\n                        className=\"modalMain\"\r\n                        open={open}\r\n                        onClose={handleClose}\r\n                        aria-labelledby=\"modal-modal-title\"\r\n                        aria-describedby=\"modal-modal-description\"\r\n                      >\r\n                        <Box className=\"modal adminModal modal-content\">\r\n                          <IconButton\r\n                            onClick={handleClose}\r\n                            className=\"close-button\"\r\n                            style={{\r\n                              position: \"absolute\",\r\n                              top: 10,\r\n                              right: 10,\r\n                            }}\r\n                          >\r\n                            &times;\r\n                          </IconButton>\r\n\r\n                          <Typography\r\n                            id=\"modal-modal-title\"\r\n                            variant=\"h6\"\r\n                            component=\"h2\"\r\n                          ></Typography>\r\n                          <Typography\r\n                            id=\"modal-modal-description\"\r\n                            sx={{ mt: 3 }}\r\n                          >\r\n                            {selectedPayment && (\r\n                              <div className=\"modals \">\r\n                                <div className=\"modalHead\">\r\n                                  <h1\r\n                                    style={{\r\n                                      color: secondaryColor,\r\n                                    }}\r\n                                  >\r\n                                    {selectedPayment.job_title}\r\n                                  </h1>\r\n                                </div>\r\n                                <div className=\"modalBody mt-4\">\r\n                                  <div className=\"modalParent\">\r\n                                    <div className=\"modalLeft\">\r\n                                      {t(\"employerCreateJob.workType\")}:{\" \"}\r\n                                    </div>\r\n                                    <div className=\"modalRight\">\r\n                                      {getWorkType(selectedPayment.work_type)}\r\n                                    </div>\r\n                                  </div>\r\n\r\n                                  <div className=\"modalParent\">\r\n                                    <div className=\"modalLeft\">\r\n                                      {t(\"employerCreateJob.location\")}:{\" \"}\r\n                                    </div>\r\n                                    <div className=\"modalRight\">\r\n                                      {selectedPayment.location}\r\n                                    </div>\r\n                                  </div>\r\n\r\n                                  <div className=\"modalParent\">\r\n                                    <div className=\"modalLeft\">\r\n                                      {t(\"employerCreateJob.companyName\")}:{\" \"}\r\n                                    </div>\r\n                                    <div className=\"modalRight\">\r\n                                      {totalData.company_name}\r\n                                    </div>\r\n                                  </div>\r\n                                  <div className=\"modalParent\">\r\n                                    <div className=\"modalLeft\">\r\n                                      {t(\"employerCreateJob.companyWebsite\")}:{\" \"}\r\n                                    </div>\r\n                                    <div className=\"modalRight\">\r\n                                      {selectedPayment.company_website}\r\n                                    </div>\r\n                                  </div>\r\n\r\n                                  <div className=\"modalParent\">\r\n                                    <div className=\"modalLeft\">\r\n                                      {t(\"employerCreateJob.jobType\")}:{\" \"}\r\n                                    </div>\r\n                                    <div className=\"modalRight\">\r\n                                      {getWorkType(selectedPayment.work_type)}\r\n                                    </div>\r\n                                  </div>\r\n\r\n                                  <div className=\"modalParent\">\r\n                                    <div className=\"modalLeft\">\r\n                                      {t(\"employerCreateJob.category\")}:{\" \"}\r\n                                    </div>\r\n                                    <div className=\"modalRight\">\r\n                                      {getCategoryName(\r\n                                        selectedPayment.category\r\n                                      )}\r\n                                    </div>\r\n                                  </div>\r\n                                  <div className=\"modalParent\">\r\n                                    <div className=\"modalLeft\">\r\n                                      {t(\r\n                                        \"employerCreateJob.experience(inYears)\"\r\n                                      )}\r\n                                      :{\" \"}\r\n                                    </div>\r\n                                    <div className=\"modalRight\">\r\n                                      {Object.entries(experience).map(\r\n                                        ([key, value]) => {\r\n                                          if (\r\n                                            key == selectedPayment.experience\r\n                                          ) {\r\n                                            return value;\r\n                                          }\r\n                                        }\r\n                                      )}\r\n                                    </div>\r\n                                  </div>\r\n                                  <div className=\"modalParent\">\r\n                                    <div className=\"modalLeft\">\r\n                                      {t(\"employerCreateJob.annualSalary\")}:{\" \"}\r\n                                    </div>\r\n                                    <div className=\"modalRight\">\r\n                                      {Object.entries(salary).map(\r\n                                        ([key, value]) => {\r\n                                          if (\r\n                                            key == selectedPayment.annual_salary\r\n                                          ) {\r\n                                            return value;\r\n                                          }\r\n                                        }\r\n                                      )}\r\n                                    </div>\r\n                                  </div>\r\n                                  <div className=\"modalParent\">\r\n                                    <div className=\"modalLeft\">\r\n                                      {t(\"employerCreateJob.skills\")}:{\" \"}\r\n                                    </div>\r\n                                    <div className=\"modalRight\">\r\n                                      {selectedSkills.map((i) => {\r\n                                        return i.label + \" \";\r\n                                      })}\r\n                                    </div>\r\n                                  </div>\r\n                                  <div className=\"modalParent\">\r\n                                    <div className=\"modalLeft\">\r\n                                      {t(\"employerCreateJob.workingRelation\")}:{\" \"}\r\n                                    </div>\r\n                                    <div className=\"modalRight\">\r\n                                      {getDesignationName(\r\n                                        selectedPayment.designation\r\n                                      )}\r\n                                    </div>\r\n                                  </div>\r\n                                  <div className=\"modalParent\">\r\n                                    <div className=\"modalLeft\">\r\n                                      {t(\"employerCreateJob.jobDescription\")}:{\" \"}\r\n                                    </div>\r\n                                    <div className=\"modalRight\">\r\n                                      {selectedPayment.jobDescription\r\n                                        ? HTMLReactParser(\r\n                                            selectedPayment.jobDescription\r\n                                          )\r\n                                        : \"\"}\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            )}\r\n                          </Typography>\r\n                        </Box>\r\n                      </Modal>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <Footer />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateJob;\r\n\r\nfunction convertToBase64(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.readAsDataURL(file);\r\n    fileReader.onload = () => {\r\n      resolve(fileReader.result);\r\n    };\r\n    fileReader.onerror = (error) => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport BaseApi from \"../api/BaseApi\";\r\nimport ApiKey from \"../api/ApiKey\";\r\nimport Swal from \"sweetalert2\";\r\nimport Cookies from \"js-cookie\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst Sidebar = () => {\r\n  const tokenKey = Cookies.get(\"tokenClient\");\r\n  const navigate = useNavigate();\r\n  const [t, i18n] = useTranslation(\"global\");\r\n\r\n  const [isQuickLinksVisible, setIsQuickLinksVisible] = useState(false);\r\n  const [isDashboardLinksVisible, setIsDashboardLinksVisible] = useState(false);\r\n\r\n  const toggle1 = () => {\r\n    setIsQuickLinksVisible(!isQuickLinksVisible);\r\n  };\r\n  const toggle2 = () => {\r\n    setIsDashboardLinksVisible(!isDashboardLinksVisible);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // const handleWindowResize = () => {\r\n    //   if (window.innerWidth < 768) {\r\n    //     setIsQuickLinksVisible(false);\r\n    //     setIsDashboardLinksVisible(false);\r\n    //   } else {\r\n    //     setIsQuickLinksVisible(false);\r\n    //     setIsDashboardLinksVisible(true);\r\n    //   }\r\n    // };\r\n\r\n    const handleWindowResize = () => {\r\n      if (window.innerWidth > 768) {\r\n        // Reload the page when the screen size is less than 768\r\n        window.location.reload();\r\n      }\r\n    };\r\n\r\n    // Call the function on component mount\r\n    // handleWindowResize();\r\n\r\n    // Attach event listener for window resize\r\n    window.addEventListener(\"resize\", handleWindowResize);\r\n\r\n    // Clean up event listener on component unmount\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleWindowResize);\r\n    };\r\n  }, []);\r\n\r\n  let screenWidth = window.innerWidth;\r\n\r\n  const handleLogOut = async () => {\r\n    try {\r\n      const confirmationResult = await Swal.fire({\r\n        title: t(\"employerSidebar.confirmTitle\"),\r\n        text: t(\"employerSidebar.confirmTxt\"),\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: t(\"employerSidebar.yes\"),\r\n        cancelButtonText: t(\"employerSidebar.no\"),\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        const response = await axios.post(BaseApi + \"/users/logout\", null, {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n          },\r\n        });\r\n        Cookies.remove(\"tokenClient\");\r\n        Cookies.remove(\"user_type\");\r\n        Cookies.remove(\"fname\");\r\n        // sessionStorage.clear();\r\n        navigate(\"/\");\r\n        const Toast = Swal.mixin({\r\n          toast: true,\r\n          position: \"top-end\",\r\n          showConfirmButton: false,\r\n          timer: 3000,\r\n          timerProgressBar: true,\r\n          didOpen: (toast) => {\r\n            toast.addEventListener(\"mouseenter\", Swal.stopTimer);\r\n            toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\r\n          },\r\n        });\r\n\r\n        Toast.fire({\r\n          icon: \"success\",\r\n          title: t(\"employerSidebar.successTitle\"),\r\n        });\r\n      }\r\n    } catch (error) {\r\n      Swal.fire({\r\n        title: t(\"employerSidebar.failedTitle\"),\r\n        icon: \"error\",\r\n        confirmButtonText: t(\"employerSidebar.close\"),\r\n      });\r\n      console.log(\"Cannot logout!\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteAc = async () => {\r\n    try {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Delete Account\",\r\n        text: \"Do you want to delete this account?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        const response = await axios.post(\r\n          BaseApi + \"/users/deleteAccount\",\r\n          null,\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n            },\r\n          }\r\n        );\r\n        sessionStorage.clear();\r\n        navigate(\"/\");\r\n        const Toast = Swal.mixin({\r\n          toast: true,\r\n          position: \"top-end\",\r\n          showConfirmButton: false,\r\n          timer: 3000,\r\n          timerProgressBar: true,\r\n          didOpen: (toast) => {\r\n            toast.addEventListener(\"mouseenter\", Swal.stopTimer);\r\n            toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\r\n          },\r\n        });\r\n\r\n        Toast.fire({\r\n          icon: \"success\",\r\n          title: \"Account deleted successfully!\",\r\n        });\r\n      }\r\n    } catch (error) {\r\n      Swal.fire({\r\n        title: \"Could not delete account!\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Cannot delete account!\");\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {screenWidth > 768 ? (\r\n        <>\r\n          <div className=\"SidebarSection1 pe-4\">\r\n            <div className=\"SBHeader\">\r\n              <h3>{t(\"employerSidebar.quickLinks\")}</h3>\r\n              <hr style={{ border: \"1px solid rgb(211 209 209)\" }} />\r\n            </div>\r\n            <div className=\"SBBody\">\r\n              <Link to=\"/user/createjob\" className=\"bodyItem SidebarCreatJob\">\r\n                <div className=\"SidebarImages SidebarCreatJobBg\">\r\n                  <img\r\n                    className=\"\"\r\n                    src=\"/Images/employerSide/icon1color.png\"\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <div className=\"menuTitle\">{t(\"employerSidebar.createJob\")}</div>\r\n              </Link>\r\n              <Link to=\"/user/managejob\" className=\"bodyItem SidebarManageJob\">\r\n                <div className=\"SidebarImages SidebarManageJobBg\">\r\n                  <img\r\n                    className=\"\"\r\n                    src=\"/Images/employerSide/icon2color.png\"\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <div className=\"menuTitle\">{t(\"employerSidebar.manageJobs\")}</div>\r\n              </Link>\r\n              <Link\r\n                to=\"/user/paymenthistory\"\r\n                className=\"bodyItem SidebarPaymentJob\"\r\n              >\r\n                <div className=\"SidebarImages SidebarPaymentJobBg\">\r\n                  <img\r\n                    className=\"\"\r\n                    src=\"/Images/employerSide/icon3color.png\"\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <div className=\"menuTitle\">{t(\"employerSidebar.paymentHistory\")}</div>\r\n              </Link>\r\n              <Link\r\n                to=\"/user/favouritelist\"\r\n                className=\"bodyItem SidebarFavouriteJob\"\r\n              >\r\n                <div className=\"SidebarImages SidebarFavouriteJobBg\">\r\n                  <img\r\n                    className=\"\"\r\n                    src=\"/Images/employerSide/icon4color.png\"\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <div className=\"menuTitle\">{t(\"employerSidebar.favouriteList\")}</div>\r\n              </Link>\r\n              <Link\r\n                to=\"/user/importjobseekers\"\r\n                className=\"bodyItem SidebarImportJob\"\r\n              >\r\n                <div className=\"SidebarImages SidebarImportJobBg\">\r\n                  <img\r\n                    className=\"\"\r\n                    src=\"/Images/employerSide/icon5color.png\"\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <div className=\"menuTitle\">{t(\"employerSidebar.importJobseekers\")}</div>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n          <div className=\"SidebarSection2 pe-4\">\r\n            <div className=\"SBHeader mt-5\">\r\n              <h3>{t(\"employerSidebar.myDashboard\")}</h3>\r\n              <hr style={{ border: \"1px solid rgb(211 209 209)\" }} />\r\n            </div>\r\n            <div className=\"body\">\r\n              <Link\r\n                to=\"/user/mailhistory\"\r\n                className=\"bodyItem SidebarMailHistory\"\r\n              >\r\n                <div className=\"SidebarImages SidebarMailHistoryBg\">\r\n                  <img\r\n                    className=\"\"\r\n                    src=\"/Images/employerSide/icon6color.png\"\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <div className=\"menuTitle\">{t(\"employerSidebar.mailHistory\")}</div>\r\n              </Link>\r\n              <Link to=\"/user/myprofile\" className=\"bodyItem SidebarMyProfile\">\r\n                <div className=\"SidebarImages SidebarMyProfileBg\">\r\n                  <img\r\n                    className=\"\"\r\n                    src=\"/Images/employerSide/icon7color.png\"\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <div className=\"menuTitle\">{t(\"employerSidebar.myProfile\")}</div>\r\n              </Link>\r\n              <Link\r\n                to=\"/user/editprofile\"\r\n                className=\"bodyItem SidebarEditProfile\"\r\n              >\r\n                <div className=\"SidebarImages SidebarEditProfileBg\">\r\n                  <img\r\n                    className=\"\"\r\n                    src=\"/Images/employerSide/icon8color.png\"\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <div className=\"menuTitle\">{t(\"employerSidebar.editProfile\")}</div>\r\n              </Link>\r\n              <Link\r\n                to=\"/user/changepassword\"\r\n                className=\"bodyItem SidebarChangePass\"\r\n              >\r\n                <div className=\"SidebarImages SidebarChangePassBg\">\r\n                  <img\r\n                    className=\"\"\r\n                    src=\"/Images/employerSide/icon9color.png\"\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <div className=\"menuTitle\">{t(\"employerSidebar.changePassword\")}</div>\r\n              </Link>\r\n              <Link\r\n                to=\"/user/changelogo\"\r\n                className=\"bodyItem SidebarChangeLogo\"\r\n              >\r\n                <div className=\"SidebarImages SidebarChangeLogoBg\">\r\n                  <img\r\n                    className=\"\"\r\n                    src=\"/Images/employerSide/icon10color.png\"\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <div className=\"menuTitle\">{t(\"employerSidebar.changeLogo\")}</div>\r\n              </Link>\r\n              <Link className=\"bodyItem SidebarLogOut\">\r\n                <div className=\"SidebarImages SidebarLogOutBg\">\r\n                  <img\r\n                    className=\"\"\r\n                    src=\"/Images/employerSide/icon11color.png\"\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <div className=\"menuTitle\" onClick={handleLogOut}>\r\n                {t(\"employerSidebar.logout\")}\r\n                </div>\r\n              </Link>\r\n              <Link to=\"/user/deleteaccount\" className=\"bodyItem SidebarDeleteAcc\">\r\n                <div className=\"SidebarImages SidebarDeleteAccBg\">\r\n                  <img\r\n                    className=\"\"\r\n                    src=\"/Images/employerSide/icon12color.png\"\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <div className=\"menuTitle\">{t(\"employerSidebar.deleteAccount\")}</div>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <div className=\"SidebarSection1 pe-4\">\r\n            <div className=\"SBHeader\">\r\n              <div className=\"sidebarEachHeader\">\r\n                <h3>{t(\"employerSidebar.quickLinks\")}</h3>\r\n                <Link className=\"sidebarPlusLink\" onClick={toggle1}>\r\n                  {isQuickLinksVisible ? (\r\n                    <i class=\"fa-solid fa-circle-minus\"></i>\r\n                  ) : (\r\n                    <i class=\"fa-solid fa-circle-plus\"></i>\r\n                  )}\r\n                </Link>\r\n              </div>\r\n              <hr style={{ border: \"1px solid rgb(211 209 209)\" }} />\r\n            </div>\r\n            <div className={`SBBody ${isQuickLinksVisible ? \"open\" : \"\"}`}>\r\n              <ul\r\n                style={{\r\n                  display: isQuickLinksVisible ? \"block\" : \"none\",\r\n                  \r\n                }}\r\n              >\r\n                <li>\r\n                  <Link\r\n                    to=\"/user/createjob\"\r\n                    className=\"bodyItem SidebarCreatJob\"\r\n                  >\r\n                    <div className=\"SidebarImages SidebarCreatJobBg\">\r\n                      <img\r\n                        className=\"\"\r\n                        src=\"/Images/employerSide/icon1color.png\"\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"menuTitle\">{t(\"employerSidebar.createJob\")}</div>\r\n                  </Link>\r\n                </li>\r\n                <li>\r\n                  <Link\r\n                    to=\"/user/managejob\"\r\n                    className=\"bodyItem SidebarManageJob\"\r\n                  >\r\n                    <div className=\"SidebarImages SidebarManageJobBg\">\r\n                      <img\r\n                        className=\"\"\r\n                        src=\"/Images/employerSide/icon2color.png\"\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"menuTitle\">{t(\"employerSidebar.manageJobs\")}</div>\r\n                  </Link>\r\n                </li>\r\n                <li>\r\n                  <Link\r\n                    to=\"/user/paymenthistory\"\r\n                    className=\"bodyItem SidebarPaymentJob\"\r\n                  >\r\n                    <div className=\"SidebarImages SidebarPaymentJobBg\">\r\n                      <img\r\n                        className=\"\"\r\n                        src=\"/Images/employerSide/icon3color.png\"\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"menuTitle\">{t(\"employerSidebar.paymentHistory\")}</div>\r\n                  </Link>\r\n                </li>\r\n                <li>\r\n                  <Link\r\n                    to=\"/user/favouritelist\"\r\n                    className=\"bodyItem SidebarFavouriteJob\"\r\n                  >\r\n                    <div className=\"SidebarImages SidebarFavouriteJobBg\">\r\n                      <img\r\n                        className=\"\"\r\n                        src=\"/Images/employerSide/icon4color.png\"\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"menuTitle\">{t(\"employerSidebar.favouriteList\")}</div>\r\n                  </Link>\r\n                </li>\r\n                <li>\r\n                  <Link\r\n                    to=\"/user/importjobseekers\"\r\n                    className=\"bodyItem SidebarImportJob\"\r\n                  >\r\n                    <div className=\"SidebarImages SidebarImportJobBg\">\r\n                      <img\r\n                        className=\"\"\r\n                        src=\"/Images/employerSide/icon5color.png\"\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"menuTitle\">{t(\"employerSidebar.importJobseekers\")}</div>\r\n                  </Link>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div className=\"SidebarSection2 pe-4\">\r\n            <div className=\"SBHeader mt-3\">\r\n              <div className=\"sidebarEachHeader\">\r\n                <h3>{t(\"employerSidebar.myDashboard\")}</h3>\r\n                <Link className=\"sidebarPlusLink\" onClick={toggle2}>\r\n                  {isDashboardLinksVisible ? (\r\n                    <i class=\"fa-solid fa-circle-minus\"></i>\r\n                  ) : (\r\n                    <i class=\"fa-solid fa-circle-plus\"></i>\r\n                  )}\r\n                </Link>\r\n              </div>\r\n              <hr style={{ border: \"1px solid rgb(211 209 209)\" }} />\r\n            </div>\r\n            <div className={`SBBody ${isDashboardLinksVisible ? \"open\" : \"\"}`}>\r\n              <ul\r\n                style={{\r\n                  display: isDashboardLinksVisible ? \"block\" : \"none\",\r\n                }}\r\n              >\r\n                <li>\r\n                  <Link\r\n                    to=\"/user/mailhistory\"\r\n                    className=\"bodyItem SidebarMailHistory\"\r\n                  >\r\n                    <div className=\"SidebarImages SidebarMailHistoryBg\">\r\n                      <img\r\n                        className=\"\"\r\n                        src=\"/Images/employerSide/icon6color.png\"\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"menuTitle\">{t(\"employerSidebar.mailHistory\")}</div>\r\n                  </Link>\r\n                </li>\r\n                <li>\r\n                  <Link\r\n                    to=\"/user/myprofile\"\r\n                    className=\"bodyItem SidebarMyProfile\"\r\n                  >\r\n                    <div className=\"SidebarImages SidebarMyProfileBg\">\r\n                      <img\r\n                        className=\"\"\r\n                        src=\"/Images/employerSide/icon7color.png\"\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"menuTitle\">{t(\"employerSidebar.myProfile\")}</div>\r\n                  </Link>\r\n                </li>\r\n                <li>\r\n                  <Link\r\n                    to=\"/user/editprofile\"\r\n                    className=\"bodyItem SidebarEditProfile\"\r\n                  >\r\n                    <div className=\"SidebarImages SidebarEditProfileBg\">\r\n                      <img\r\n                        className=\"\"\r\n                        src=\"/Images/employerSide/icon8color.png\"\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"menuTitle\">{t(\"employerSidebar.editProfile\")}</div>\r\n                  </Link>\r\n                </li>\r\n                <li>\r\n                  <Link\r\n                    to=\"/user/changepassword\"\r\n                    className=\"bodyItem SidebarChangePass\"\r\n                  >\r\n                    <div className=\"SidebarImages SidebarChangePassBg\">\r\n                      <img\r\n                        className=\"\"\r\n                        src=\"/Images/employerSide/icon9color.png\"\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"menuTitle\">{t(\"employerSidebar.changePassword\")}</div>\r\n                  </Link>\r\n                </li>\r\n                <li>\r\n                  <Link\r\n                    to=\"/user/changelogo\"\r\n                    className=\"bodyItem SidebarChangeLogo\"\r\n                  >\r\n                    <div className=\"SidebarImages SidebarChangeLogoBg\">\r\n                      <img\r\n                        className=\"\"\r\n                        src=\"/Images/employerSide/icon10color.png\"\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"menuTitle\">{t(\"employerSidebar.changeLogo\")}</div>\r\n                  </Link>\r\n                </li>\r\n                <li>\r\n                  <Link className=\"bodyItem SidebarLogOut\">\r\n                    <div className=\"SidebarImages SidebarLogOutBg\">\r\n                      <img\r\n                        className=\"\"\r\n                        src=\"/Images/employerSide/icon11color.png\"\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"menuTitle\" onClick={handleLogOut}>\r\n                    {t(\"employerSidebar.logout\")}\r\n                    </div>\r\n                  </Link>\r\n                </li>\r\n                <li>\r\n                  <Link to=\"/user/deleteaccount\" className=\"bodyItem SidebarDeleteAcc\">\r\n                    <div className=\"SidebarImages SidebarDeleteAccBg\">\r\n                      <img\r\n                        className=\"\"\r\n                        src=\"/Images/employerSide/icon12color.png\"\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"menuTitle\">\r\n                    {t(\"employerSidebar.deleteAccount\")}\r\n                    </div>\r\n                  </Link>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n"],"names":["CreateJob","useRef","tokenKey","Cookies","navigate","useNavigate","t","i18n","useTranslation","open","setOpen","useState","selectedPayment","setSelectedPayment","handleClose","useEffect","window","scrollTo","primaryColor","secondaryColor","mapKey","hoverSearchColor","setHoverSearchColor","hoverUploadCVColor","setHoverUploadCVColor","selectedSkills","setSelectedSkills","skillValidationError","setSkillValidationError","jobData","setJobData","job_title","category","subCategory","jobDescription","company_name","skill","companyProfile","work_type","contact_name","contact_number","company_website","designation","location","experience","annual_salary","logo","last_date","totalData","setTotalData","jobCategories","setJobCategories","subCategories","setSubCategories","designationList","setDesignationList","skillList","setSkillList","setExperience","salary","setSalary","workType","setWorkType","loading","setLoading","selectedCategories","setSelectedSubCategories","errors","setErrors","handleChange","e","name","value","target","prevTotalData","prevJobData","prev","getSubCategories","async","subCatData","axios","BaseApi","id","headers","key","ApiKey","token","data","response","error","console","log","status","categories","designationlList","sallery","worktype","Swal","title","message","icon","confirmButtonText","setTimeout","reload","getData","handleFileUpload","file","files","size","objectURL","URL","createObjectURL","image","Image","imageSizePromise","Promise","resolve","onload","width","height","src","dimensions","base64","reject","fileReader","FileReader","readAsDataURL","result","onerror","convertToBase64","getWorkType","autocompleteService","setAutocompleteService","suggestions","setSuggestions","script","document","createElement","google","maps","places","AutocompleteService","body","appendChild","removeChild","handleLocationChange","setSuggestionTaken","prevFilter","getPlacePredictions","input","types","predictions","map","prediction","description","suggestionTaken","_jsxs","_Fragment","children","_jsx","NavBar","className","Sidebar","style","borderLeft","borderRight","alt","htmlFor","type","placeholder","onChange","i","index","Select","isMulti","isSearchable","options","label","classNamePrefix","selectedOption","ids","item","ReactQuill","theme","minHeight","selected","Object","entries","_ref","selectedOptions","length","display","suggestion","onClick","handleSuggestionClick","LocationOnIcon","fontSize","_ref2","_ref3","lable","accept","marginTop","marginRight","event","currentDate","Date","selectedDate","formattedCurrentDate","toISOString","split","skills","getElementsByName","skillArray","forEach","element","push","newErrors","inputElement","getElementById","scrollIntoView","behavior","block","test","urlFormat","keys","text","showCancelButton","cancelButtonText","isConfirmed","updatedProfile","HTMLReactParser","backgroundColor","border","onMouseEnter","handleSearchMouseEnter","onMouseLeave","handleSearchMouseLeave","color","handleUploadCVMouseEnter","handleUploadCVMouseLeave","Modal","onClose","Box","IconButton","position","top","right","Typography","variant","component","sx","mt","catId","getCategoryName","_ref4","_ref5","designationId","getDesignationName","Footer","isQuickLinksVisible","setIsQuickLinksVisible","isDashboardLinksVisible","setIsDashboardLinksVisible","handleWindowResize","innerWidth","addEventListener","removeEventListener","screenWidth","handleLogOut","toast","showConfirmButton","timer","timerProgressBar","didOpen","fire","Link","to","toggle1","class","toggle2"],"sourceRoot":""}