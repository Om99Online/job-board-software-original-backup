{"version":3,"file":"static/js/7612.68293580.chunk.js","mappings":"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","sources":["Components/adminpanel/Manage Newsletter/APEditNewsletter.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport APNavBar from \"../Elements/APNavBar\";\r\nimport APSidebar from \"../APSidebar/APSidebar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Link from \"@mui/material/Link\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport BaseApi from \"../../api/BaseApi\";\r\nimport ApiKey from \"../../api/ApiKey\";\r\nimport Swal from \"sweetalert2\";\r\nimport axios from \"axios\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport JoditEditor from \"jodit-react\";\r\nimport { useRef } from \"react\";\r\nimport Cookies from \"js-cookie\";\r\nimport { error } from \"jquery\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\"; // import styles\r\nimport APFooter from \"../Elements/APFooter\";\r\nconst APEditNewsletter = () => {\r\n  const editor = useRef(null);\r\n\r\n  const [userData, setUserData] = useState({\r\n    subject: \"\",\r\n    message: \"\",\r\n  });\r\n  const [emailData, setEmailData] = useState({\r\n    email_formatting: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    subject: \"\",\r\n    message: \"\",\r\n    email_formatting: \"\",\r\n  });\r\n\r\n  const [formError, setFormError] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const tokenKey = Cookies.get(\"token\");\r\n  const adminID = Cookies.get(\"adminID\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { slug } = useParams();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUserData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      [name]: \"\",\r\n    }));\r\n  };\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + `/admin/newsletter/admin_edit/${slug}`,\r\n        null,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n            adminid: adminID,\r\n          },\r\n        }\r\n      );\r\n      setLoading(false);\r\n      setUserData(response.data.response);\r\n    } catch (error) {\r\n      console.log(\"Error at chnage username at Admin panel\");\r\n    }\r\n  };\r\n\r\n  const formattingMail = async () => {\r\n    try {\r\n      let formErrors = {};\r\n\r\n      if (emailData.email_formatting.trim() === \"\") {\r\n        formErrors.email_formatting = \"Email Formatting is required\";\r\n      } else {\r\n        const emailFormat = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        if (!emailFormat.test(emailData.email_formatting)) {\r\n          formErrors.email_formatting = \"Invalid email format\";\r\n        }\r\n      }\r\n\r\n      if (Object.keys(formErrors).length === 0) {\r\n        setLoading(true);\r\n\r\n        const updatedData = {\r\n          ...emailData,\r\n          message: userData.message,\r\n        };\r\n\r\n        const response = await axios.post(\r\n          BaseApi + `/admin/newsletter/admin_emailtest/${slug}`,\r\n          updatedData,\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n\r\n        setLoading(false);\r\n\r\n        if (response.data.status === 200) {\r\n          Swal.fire({\r\n            title: \"Test Newsletter Email sent successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n\r\n          // navigate(\"/admin/newsletters/index\");\r\n        } else {\r\n          Swal.fire({\r\n            title: response.data.message,\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n      } else {\r\n        setFormError(formErrors);\r\n        window.scrollTo(0, 0);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      const newErrors = {};\r\n\r\n      if (userData.subject === \"\") {\r\n        newErrors.subject = \"Subject is required\";\r\n        window.scrollTo(0, 0);\r\n      }\r\n      if (userData.message === \"\") {\r\n        newErrors.message = \"Message is required\";\r\n        window.scrollTo(0, 0);\r\n      }\r\n\r\n      setErrors(newErrors);\r\n\r\n      if (Object.keys(newErrors).length === 0) {\r\n        const confirmationResult = await Swal.fire({\r\n          title: \"Update Newsletter?\",\r\n          text: \"Do you want to update this Newsletter?\",\r\n          icon: \"question\",\r\n          showCancelButton: true,\r\n          confirmButtonText: \"Yes\",\r\n          cancelButtonText: \"No\",\r\n        });\r\n\r\n        if (confirmationResult.isConfirmed) {\r\n          setLoading(true);\r\n\r\n          const response = await axios.post(\r\n            BaseApi + `/admin/newsletter/admin_edit/${slug}`,\r\n            userData,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                key: ApiKey,\r\n                token: tokenKey,\r\n                adminid: adminID,\r\n              },\r\n            }\r\n          );\r\n\r\n          setLoading(false);\r\n\r\n          if (response.data.status === 200) {\r\n            Swal.fire({\r\n              title: \"Newsletter updated successfully!\",\r\n              icon: \"success\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n            // setUserData({\r\n            //   ...userData,\r\n            //   new_username: \"\",\r\n            //   conf_username: \"\",\r\n            // });\r\n            // window.scrollTo(0, 0);\r\n            navigate(\"/admin/newsletters/index\");\r\n          } else {\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"error\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed\",\r\n        text: \"Could not update newsletter. Please try again later!\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Could not change username!\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/admin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  return (\r\n    <>\r\n      <APNavBar />\r\n      <div className=\"APBasic\">\r\n        <APSidebar />\r\n\r\n        {loading ? (\r\n          <>\r\n            <div className=\"loader-container\"></div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"site-min-height\">\r\n              <div className=\"breadCumb1\" role=\"presentation\">\r\n                <Breadcrumbs\r\n                  aria-label=\"breadcrumb\"\r\n                  separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                >\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/admins/dashboard\")}\r\n                  >\r\n                    Dashboard\r\n                  </Link>\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/newsletters/index\")}\r\n                  >\r\n                    Newsletter\r\n                  </Link>\r\n\r\n                  <Typography color=\"text.primary\">Edit Newsletter</Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n              <h2 className=\"adminPageHeading\">Edit Newsletter</h2>\r\n              <form className=\"editNewsletterForm\">\r\n                <div className=\"mb-4 mt-5\">\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Subject<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example1\"\r\n                      className={`form-control ${\r\n                        errors.subject && \"input-error\"\r\n                      }`}\r\n                      name=\"subject\"\r\n                      placeholder=\"Subject\"\r\n                      value={userData.subject}\r\n                      onChange={handleChange}\r\n                    />\r\n                    {errors.subject && (\r\n                      <div className=\"text-danger\">{errors.subject}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\" mb-5 DashBoardInputBx DashBoardCreatBx APJoditEditor\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                      Message<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    {/* <JoditEditor\r\n                      ref={editor}\r\n                      name=\"message\"\r\n                      value={userData.message}\r\n                      onChange={(message) =>\r\n                        handleChange({\r\n                          target: {\r\n                            value: message,\r\n                            name: \"message\",\r\n                          },\r\n                        })\r\n                      }\r\n                    /> */}\r\n                    <ReactQuill\r\n                      theme=\"snow\"\r\n                      value={userData.message}\r\n                      onChange={(value) =>\r\n                        handleChange({\r\n                          target: { name: \"message\", value },\r\n                        })\r\n                      }\r\n                      style={{ minHeight: \"250px\", height: \"200px\" }}\r\n                      placeholder=\"Add your text here...\"\r\n                    />\r\n                    {errors.message && (\r\n                      <div className=\"text-danger\">{errors.message}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-primary button1\"\r\n                      onClick={handleClick}\r\n                    >\r\n                      SAVE\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-primary button2\"\r\n                      onClick={() => navigate(\"/admin/newsletters/index\")}\r\n                    >\r\n                      CANCEL\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n              <hr />\r\n              <h4 className=\"mb-5\">Check Newsletter Formatting by test email</h4>\r\n              <div class=\"mb-4 DashBoardInputBx\">\r\n                <label for=\"formFile\" class=\"form-label\">\r\n                  Email Address<span className=\"RedStar\">*</span>\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"form3Example1\"\r\n                  className=\"form-control\"\r\n                  name=\"email_formatting\"\r\n                  placeholder=\"Email Address\"\r\n                  value={userData.email_formatting}\r\n                  onChange={(e) =>\r\n                    setEmailData({\r\n                      ...emailData,\r\n                      email_formatting: e.target.value,\r\n                    })\r\n                  }\r\n                />\r\n                {formError?.email_formatting && (\r\n                  <div className=\"text-danger\">\r\n                    {formError.email_formatting}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-primary button1\"\r\n                onClick={formattingMail}\r\n              >\r\n                SEND\r\n              </button>\r\n            </div>\r\n            <APFooter />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default APEditNewsletter;\r\n"],"names":["APEditNewsletter","useRef","userData","setUserData","useState","subject","message","emailData","setEmailData","email_formatting","errors","setErrors","formError","setFormError","loading","setLoading","tokenKey","Cookies","adminID","navigate","useNavigate","slug","useParams","handleChange","e","name","value","target","prev","useEffect","async","response","axios","BaseApi","headers","key","ApiKey","token","adminid","data","error","console","log","getData","window","scrollTo","_jsxs","_Fragment","children","_jsx","APNavBar","className","APSidebar","role","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","underline","color","onClick","Typography","class","for","type","id","placeholder","onChange","htmlFor","ReactQuill","theme","style","minHeight","height","newErrors","Object","keys","length","Swal","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","isConfirmed","status","formErrors","trim","test","updatedData","APFooter"],"sourceRoot":""}