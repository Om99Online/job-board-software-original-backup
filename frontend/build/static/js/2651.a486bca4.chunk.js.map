{"version":3,"file":"static/js/2651.a486bca4.chunk.js","mappings":"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","sources":["Components/employersSide/FavouriteListProfile.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import Footer from \"../element/Footer\";\r\n// import { Link, useParams } from \"react-router-dom\";\r\n// import NavBar from \"../element/NavBar\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n// import BaseApi from \"../api/BaseApi\";\r\n// import ApiKey from \"../api/ApiKey\";\r\n// import HTMLReactParser from \"html-react-parser\";\r\n// import Swal from \"sweetalert2\";\r\n// import Cookies from \"js-cookie\";\r\n\r\n// const FavouriteListProfile = () => {\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [favouriteListProfileData, setFavouriteListProfileData] = useState([]);\r\n//   const [userData, setUserData] = useState([]);\r\n//   const [userEducation, setUserEducation] = useState([]);\r\n//   const [oldImages, setOldImages] = useState([]);\r\n//   const [oldDocs, setOldDocs] = useState([]);\r\n\r\n//   const [mailReply, setMailReply] = useState({\r\n//     subject: \"\",\r\n//     message: \"\",\r\n\r\n//     emailFiles: [],\r\n//   });\r\n//   const [errors, setErrors] = useState({\r\n//     subject: \"\",\r\n//     message: \"\",\r\n//   });\r\n//   const [selectedFileName, setSelectedFileName] = useState([]);\r\n//   const [viewButtonEmailData, setViewButtonEmailData] = useState([]);\r\n//   const [viewButtonContactData, setViewButtonContactData] = useState([]);\r\n\r\n//   const [viewEmail, setViewEmail] = useState(false);\r\n//   const [viewContact, setViewContact] = useState(false);\r\n\r\n//   const { slug } = useParams();\r\n//   const tokenKey = Cookies.get(\"tokenClient\");\r\n//   const navigate = useNavigate();\r\n\r\n//   let primaryColor = Cookies.get(\"primaryColor\");\r\n//   let secondaryColor = Cookies.get(\"secondaryColor\");\r\n\r\n//   const [hoverSearchColor, setHoverSearchColor] = useState(false);\r\n\r\n//   const handleSearchMouseEnter = () => {\r\n//     setHoverSearchColor(true);\r\n//   };\r\n\r\n//   const handleSearchMouseLeave = () => {\r\n//     setHoverSearchColor(false);\r\n//   };\r\n\r\n//   const [hoverUploadCVColor, setHoverUploadCVColor] = useState(false);\r\n\r\n//   const handleUploadCVMouseEnter = () => {\r\n//     setHoverUploadCVColor(true);\r\n//   };\r\n\r\n//   const handleUploadCVMouseLeave = () => {\r\n//     setHoverUploadCVColor(false);\r\n//   };\r\n\r\n//   const getData = async () => {\r\n//     try {\r\n//       setLoading(true);\r\n//       const response = await axios.post(\r\n//         BaseApi + `/candidates/profile/${slug}`,\r\n//         null,\r\n//         {\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//             key: ApiKey,\r\n//             token: tokenKey,\r\n//           },\r\n//         }\r\n//       );\r\n//       setLoading(false);\r\n//       setFavouriteListProfileData(response.data.response);\r\n//       setOldImages(response.data.response.showOldImages);\r\n//       setUserData(response.data.response.userdetails);\r\n//       setUserEducation(response.data.response);\r\n//       console.log(favouriteListProfileData);\r\n//     } catch (error) {\r\n//       setLoading(false);\r\n//       console.log(\"Could not get user data in profile page of favourite list\");\r\n//     }\r\n//   };\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setMailReply((prev) => ({\r\n//       ...prev,\r\n//       [name]: value,\r\n//     }));\r\n//     setErrors((prev) => ({\r\n//       ...prev,\r\n//       [name]: \"\",\r\n//     }));\r\n//   };\r\n\r\n//   const handleFavourie = async (id) => {\r\n//     try {\r\n//       // setLoading(true)\r\n//       const response = await axios.post(\r\n//         BaseApi + `/candidates/addtoFavorite/${id}`,\r\n//         null,\r\n//         {\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//             key: ApiKey,\r\n//             token: tokenKey,\r\n//           },\r\n//         }\r\n//       );\r\n//       if (response.data.status === 200) {\r\n//         Swal.fire({\r\n//           title: \"Added to favourite successfully!\",\r\n//           icon: \"success\",\r\n//           confirmButtonText: \"Close\",\r\n//         });\r\n//         getData();\r\n//       } else {\r\n//         Swal.fire({\r\n//           title: \"Failed\",\r\n//           text: response.data.message,\r\n//           icon: \"error\",\r\n//           confirmButtonText: \"Close\",\r\n//         });\r\n//       }\r\n//     } catch (error) {\r\n//       setLoading(false);\r\n//       Swal.fire({\r\n//         title: \"Failed!\",\r\n//         text: \"Could not add to favourite. Please try after some time!\",\r\n//         icon: \"error\",\r\n//         confirmButtonText: \"Close\",\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   const handleReply = async (slug) => {\r\n//     try {\r\n//       const newErrors = {};\r\n\r\n//       if (mailReply.subject === \"\") {\r\n//         newErrors.subject = \"Subject is required\";\r\n//         window.scrollTo(0, 0);\r\n//       }\r\n//       if (mailReply.message === \"\") {\r\n//         newErrors.message = \"Message is required\";\r\n//         window.scrollTo(0, 0);\r\n//       }\r\n//       setErrors(newErrors);\r\n\r\n//       if (Object.keys(newErrors).length === 0) {\r\n//         const confirmationResult = await Swal.fire({\r\n//           title: \"Send E-Mail\",\r\n//           text: \"Do you want to send this email?\",\r\n//           icon: \"question\",\r\n//           showCancelButton: true,\r\n//           confirmButtonText: \"Yes\",\r\n//           cancelButtonText: \"No\",\r\n//         });\r\n//         if (confirmationResult.isConfirmed) {\r\n//           const updatedReply = {\r\n//             ...mailReply,\r\n//             selectedFileName: selectedFileName,\r\n//             id: userData.id,\r\n//           };\r\n\r\n//           const formData = new FormData();\r\n//           selectedFileName.forEach((fileName, index) => {\r\n//             formData.append(`selectedFileNames[${index}]`, fileName);\r\n//           });\r\n\r\n//           setLoading(true);\r\n//           const response = await axios.post(\r\n//             BaseApi + `/candidates/sendmailjobseeker/${slug}`,\r\n//             updatedReply,\r\n//             {\r\n//               headers: {\r\n//                 \"Content-Type\": \"application/json\",\r\n//                 key: ApiKey,\r\n//                 token: tokenKey,\r\n//               },\r\n//             }\r\n//           );\r\n//           setLoading(false);\r\n//           if (response.data.status === 200) {\r\n//             Swal.fire({\r\n//               title: \"You have sent the email to the candidate successfully!\",\r\n//               icon: \"success\",\r\n//               confirmButtonText: \"Close\",\r\n//             });\r\n//             setMailReply({\r\n//               ...mailReply,\r\n//               subject: \"\",\r\n//               message: \"\",\r\n//               emailFiles: \"\",\r\n//             });\r\n//             navigate(`/candidates/profile/${userData.slug}`);\r\n//           } else {\r\n//             Swal.fire({\r\n//               title: \"Failed\",\r\n//               text: response.data.message,\r\n//               icon: \"error\",\r\n//               confirmButtonText: \"Close\",\r\n//             });\r\n//           }\r\n//         }\r\n//       }\r\n//     } catch (error) {\r\n//       setLoading(false);\r\n//       Swal.fire({\r\n//         title: \"Failed!\",\r\n//         text: \"Could not reply to this mail. Please try after some time!\",\r\n//         icon: \"error\",\r\n//         confirmButtonText: \"Close\",\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   const handleEmailViewClick = async () => {\r\n//     try {\r\n//       setViewEmail(true);\r\n//       const response = await axios.post(\r\n//         BaseApi + `/candidates/getUserdetail/${slug}`,\r\n//         null,\r\n//         {\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//             key: ApiKey,\r\n//             token: tokenKey,\r\n//           },\r\n//         }\r\n//       );\r\n\r\n//       if(response.data.response.status === \"0\") {\r\n//         Swal.fire({\r\n//           title: \"Not Allowed\",\r\n//           text: \"You don't have the membership plan active to view the jobseeker contact details. Please purchase that respective membership plan\",\r\n//           icon: \"warning\",\r\n//           confirmButtonText: \"Close\",\r\n//         });\r\n//       }\r\n//       if(response.data.response.status === \"1\") {\r\n//         setViewButtonEmailData(response.data.response);\r\n//       }\r\n//       console.log(response.data.response);\r\n//     } catch (error) {\r\n//       console.log(error);\r\n//     }\r\n//   };\r\n//   const handleContactViewClick = async () => {\r\n//     try {\r\n//       setViewContact(true);\r\n//       const response = await axios.post(\r\n//         BaseApi + `/candidates/getUserdetail/${slug}`,\r\n//         null,\r\n//         {\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//             key: ApiKey,\r\n//             token: tokenKey,\r\n//           },\r\n//         }\r\n//       );\r\n//       if(response.data.response.status === \"0\") {\r\n//         Swal.fire({\r\n//           title: \"Not Allowed\",\r\n//           text: \"You don't have the membership plan active to view the jobseeker contact details. Please purchase that respective membership plan\",\r\n//           icon: \"warning\",\r\n//           confirmButtonText: \"Close\",\r\n//         });\r\n//       }\r\n//       if(response.data.response.status === \"1\") {\r\n//         setViewButtonContactData(response.data.response);\r\n//       }\r\n\r\n//       console.log(response.data.response);\r\n//     } catch (error) {\r\n//       console.log(error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDocumentDownload = async (documentUrl) => {\r\n//     // Create an anchor element\r\n//     const anchor = document.createElement('a');\r\n\r\n//     // Set the href attribute to the document URL\r\n//     anchor.href = documentUrl;\r\n\r\n//     // Set the download attribute to force the browser to download the file instead of navigating to it\r\n//     anchor.setAttribute('download', '');\r\n\r\n//     // Hide the anchor element\r\n//     anchor.style.display = 'none';\r\n\r\n//     // Append the anchor element to the document body\r\n//     document.body.appendChild(anchor);\r\n\r\n//     // Trigger a click on the anchor element\r\n//     anchor.click();\r\n\r\n//     // Remove the anchor element from the document body after a short delay\r\n//     setTimeout(() => {\r\n//       document.body.removeChild(anchor);\r\n//     }, 100);\r\n//   }\r\n\r\n//   const convertFileToBase64 = (file) => {\r\n//     return new Promise((resolve, reject) => {\r\n//       const reader = new FileReader();\r\n//       reader.onload = (event) => {\r\n//         resolve(event.target.result);\r\n//       };\r\n//       reader.onerror = (error) => {\r\n//         reject(error);\r\n//       };\r\n//       reader.readAsDataURL(file);\r\n//     });\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // Check if tokenKey is not present\r\n//     if (!tokenKey) {\r\n//       // Redirect to the home page\r\n//       navigate(\"/user/employerlogin\");\r\n//     } else {\r\n//       // TokenKey is present, fetch data or perform other actions\r\n//       getData();\r\n//       window.scrollTo(0, 0);\r\n//     }\r\n//   }, [tokenKey, navigate]);\r\n\r\n//   return (\r\n//     <>\r\n//       <NavBar />\r\n//       {loading ? (\r\n//         <div className=\"loader-container\"></div>\r\n//       ) : (\r\n//         <>\r\n//           <div className=\"container FavouriteListProfile editProfile\">\r\n//             {/* Reply Modal  */}\r\n//             <div\r\n//               class=\"modal fade\"\r\n//               id=\"ReplyModal\"\r\n//               tabindex=\"-1\"\r\n//               aria-labelledby=\"exampleModalLabel\"\r\n//               aria-hidden=\"true\"\r\n//             >\r\n//               <div class=\"modal-dialog\">\r\n//                 <div class=\"modal-content\">\r\n//                   <div class=\"modal-header\">\r\n//                     <h1 class=\"modal-title fs-5\" id=\"exampleModalLabel\">\r\n//                       Send mail to {userData.first_name} {userData.last_name}\r\n//                     </h1>\r\n//                     <button\r\n//                       type=\"button\"\r\n//                       class=\"btn-close\"\r\n//                       data-bs-dismiss=\"modal\"\r\n//                       aria-label=\"Close\"\r\n//                     ></button>\r\n//                   </div>\r\n//                   <div class=\"modal-body\">\r\n//                     <div class=\"form-outline mb-5 mt-4 DashBoardInputBx\">\r\n//                       <label class=\"form-label\" for=\"form3Example3\">\r\n//                         Subject <span className=\"RedStar\">*</span>\r\n//                       </label>\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         id=\"form3Example3\"\r\n//                         className={`form-control ${\r\n//                           errors.subject && \"input-error\"\r\n//                         }`}\r\n//                         placeholder=\"Subject\"\r\n//                         value={mailReply.subject}\r\n//                         name=\"subject\"\r\n//                         onChange={handleChange}\r\n//                       />\r\n//                       {errors.subject && (\r\n//                         <div className=\"text-danger\">{errors.subject}</div>\r\n//                       )}\r\n//                     </div>\r\n//                     <div class=\"form-outline mb-5 DashBoardInputBx\">\r\n//                       <label class=\"form-label\" for=\"form3Example3\">\r\n//                         Message <span className=\"RedStar\">*</span>\r\n//                       </label>\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         id=\"form3Example3\"\r\n//                         className={`form-control ${\r\n//                           errors.message && \"input-error\"\r\n//                         }`}\r\n//                         placeholder=\"Message\"\r\n//                         value={mailReply.message}\r\n//                         name=\"message\"\r\n//                         onChange={handleChange}\r\n//                       />\r\n//                       {errors.message && (\r\n//                         <div className=\"text-danger\">{errors.message}</div>\r\n//                       )}\r\n//                     </div>\r\n//                     <div class=\"form-outline mb-3 DashBoardInputBx\">\r\n//                       <label for=\"formFile\" class=\"form-label\">\r\n//                         Multiple Images\r\n//                       </label>\r\n//                       <input\r\n//                         type=\"file\"\r\n//                         id=\"formFile\"\r\n//                         className=\"form-control\"\r\n//                         name=\"file\"\r\n//                         multiple\r\n//                         onChange={(e) => {\r\n//                           const files = Array.from(e.target.files);\r\n\r\n//                           // Capture the selected file names\r\n//                           const fileNames = files.map((file) => file.name);\r\n//                           setSelectedFileName(fileNames);\r\n\r\n//                           // Convert each selected file to base64 encoding\r\n//                           Promise.all(\r\n//                             files.map((file) => convertFileToBase64(file))\r\n//                           )\r\n//                             .then((base64Array) => {\r\n//                               setMailReply({\r\n//                                 ...mailReply,\r\n//                                 emailFiles: base64Array,\r\n//                               });\r\n//                             })\r\n//                             .catch((error) => {\r\n//                               console.error(\r\n//                                 \"Error converting files to base64:\",\r\n//                                 error\r\n//                               );\r\n//                             });\r\n//                         }}\r\n//                       />{\" \"}\r\n//                       <div id=\"emailHelp\" class=\"form-text mt-2\">\r\n//                         Select multiple file with Ctrl press, Supported File\r\n//                         Types: gif, jpg, jpeg, png, pdf, doc, docx (Max 5 images\r\n//                         and Max. 10MB).\r\n//                       </div>\r\n//                     </div>\r\n//                     <button\r\n//                       type=\"button\"\r\n//                       className=\"btn btn-primary button1\"\r\n//                       onClick={() => handleReply(userData.slug)}\r\n//                       style={{\r\n//                         backgroundColor: hoverSearchColor\r\n//                           ? secondaryColor\r\n//                           : primaryColor,\r\n//                         border: hoverSearchColor\r\n//                           ? secondaryColor\r\n//                           : primaryColor,\r\n//                       }}\r\n//                       onMouseEnter={handleSearchMouseEnter}\r\n//                       onMouseLeave={handleSearchMouseLeave}\r\n//                       data-bs-dismiss=\"modal\"\r\n//                       aria-label=\"Close\"\r\n//                     >\r\n//                       SUBMIT\r\n//                     </button>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {/* View modal */}\r\n//             <div\r\n//               class=\"modal fade\"\r\n//               id=\"ViewModal\"\r\n//               tabindex=\"-1\"\r\n//               aria-labelledby=\"exampleModalLabel\"\r\n//               aria-hidden=\"true\"\r\n//             >\r\n//               <div class=\"modal-dialog\">\r\n//                 <div class=\"modal-content\">\r\n//                   <div class=\"modal-header\">\r\n//                     <h1 class=\"modal-title fs-5\" id=\"exampleModalLabel\"></h1>\r\n//                     <button\r\n//                       type=\"button\"\r\n//                       class=\"btn-close\"\r\n//                       data-bs-dismiss=\"modal\"\r\n//                       aria-label=\"Close\"\r\n//                     ></button>\r\n//                   </div>\r\n//                   <div class=\"modal-body\">\r\n//                     You don't have the membership plan active to view the\r\n//                     jobseeker contact details. Please purchase that respective\r\n//                     membership plan\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n\r\n//             <div className=\"row\">\r\n//               <div className=\"col-lg-2 FLPLeftSideHeader\">\r\n//                 <div className=\"ImageSpace\">\r\n//                   {userData.profile_image ? (\r\n//                     <img\r\n//                       className=\"FLPImage\"\r\n//                       src={userData.profile_image}\r\n//                       alt=\"Profile Picture\"\r\n//                     />\r\n//                   ) : (\r\n//                     <img\r\n//                       className=\"FLPImage\"\r\n//                       src=\"/Images/jobseekerSide/dummy-profile.png\"\r\n//                       alt=\"Profile Picture\"\r\n//                     />\r\n//                   )}\r\n//                 </div>\r\n//               </div>\r\n//               <div\r\n//                 className=\"col-lg-10 mb-5\"\r\n//                 style={{\r\n//                   borderLeft: \"2px solid #e6e8e7\",\r\n//                   borderRight: \"2px solid #e6e8e7\",\r\n//                 }}\r\n//               >\r\n//                 <div className=\"card FLPHeaderCard\">\r\n//                   <div className=\"FLPRightSideHeader\">\r\n//                     <h4\r\n//                       className=\"\"\r\n//                       style={{\r\n//                         color: secondaryColor,\r\n//                       }}\r\n//                     >\r\n//                       {userData.first_name} {userData.last_name}\r\n//                     </h4>\r\n//                     <div className=\"FLPInnerRight\">\r\n//                       <Link\r\n//                         id=\"FLLink\"\r\n//                         className=\"btn FLPlink\"\r\n//                         data-bs-toggle=\"modal\"\r\n//                         data-bs-target=\"#ReplyModal\"\r\n//                         style={{\r\n//                           color: secondaryColor,\r\n//                         }}\r\n//                       >\r\n//                         Send Mail\r\n//                       </Link>\r\n//                       {favouriteListProfileData.fav_status === 0 ? (\r\n//                         <Link\r\n//                           className=\"btn FLPlink\"\r\n//                           onClick={() => handleFavourie(userData.id)}\r\n//                           style={{\r\n//                             color: secondaryColor,\r\n//                           }}\r\n//                         >\r\n//                           Add to Favourite\r\n//                         </Link>\r\n//                       ) : (\r\n//                         <Link\r\n//                           className=\"btn FLPlink\"\r\n//                           style={{\r\n//                             color: secondaryColor,\r\n//                           }}\r\n//                         >\r\n//                           <i class=\"fa-solid fa-star\"></i> Favourite\r\n//                         </Link>\r\n//                       )}\r\n\r\n//                       <Link\r\n//                         to=\"\"\r\n//                         id=\"FLLink\"\r\n//                         className=\"btn FLPlink\"\r\n//                         onClick={() => window.history.back()}\r\n//                         style={{\r\n//                           color: secondaryColor,\r\n//                         }}\r\n//                       >\r\n//                         <i class=\"fa-solid fa-arrow-left\"></i>\r\n//                       </Link>\r\n//                     </div>\r\n//                   </div>\r\n//                   <div className=\"FLPRightSideBody\">\r\n//                     <div className=\"row\">\r\n//                       <div className=\"col-md-2\">\r\n//                         <h6>Email Address: </h6>\r\n//                       </div>\r\n//                       <div className=\"col-md-10 emailValueFLP\">\r\n//                         {viewEmail ? (\r\n//                           <>\r\n//                             <p className=\"pt-1\">{viewButtonEmailData.email}</p>\r\n//                           </>\r\n//                         ) : (\r\n//                           <>\r\n//                             {userData.email_address?.includes(\"@xxxx\") ? (\r\n//                               <>\r\n//                                 <p className=\"pt-1\">\r\n//                                   {userData.email_address}{\" \"}\r\n//                                   <Link\r\n//                                     className=\"viewLink\"\r\n//                                     type=\"\"\r\n//                                     // data-bs-toggle=\"modal\"\r\n//                                     // data-bs-target=\"#ViewModal\"\r\n//                                     onClick={handleEmailViewClick}\r\n//                                   >\r\n//                                     Show\r\n//                                   </Link>\r\n//                                 </p>\r\n//                               </>\r\n//                             ) : (\r\n//                               <>\r\n//                                 <p className=\"pt-1\">{userData.email_address}</p>\r\n//                               </>\r\n//                             )}{\" \"}\r\n//                           </>\r\n//                         )}\r\n//                       </div>\r\n//                     </div>\r\n//                     <div className=\"row\">\r\n//                       <div className=\"col-md-2\">\r\n//                         <h6>Contact Number: </h6>\r\n//                       </div>\r\n//                       <div className=\"col-md-10 contactValueFLP\">\r\n//                         {viewContact ? (\r\n//                           <>\r\n//                             <p className=\"pt-1\">\r\n//                               {viewButtonContactData.contact}\r\n//                             </p>\r\n//                           </>\r\n//                         ) : (\r\n//                           <>\r\n//                             {userData.contact?.includes(\"+xxxx\") ? (\r\n//                               <>\r\n//                                 <p className=\"pt-1\">\r\n//                                   {userData.contact}{\" \"}\r\n//                                   <Link\r\n//                                     className=\"viewLink\"\r\n//                                     // data-bs-toggle=\"modal\"\r\n//                                     // data-bs-target=\"#ViewModal\"\r\n//                                     onClick={handleContactViewClick}\r\n//                                   >\r\n//                                     Show\r\n//                                   </Link>\r\n//                                 </p>\r\n//                               </>\r\n//                             ) : (\r\n//                               <>\r\n//                                 <p className=\"pt-1\">{userData.contact}</p>\r\n//                               </>\r\n//                             )}\r\n//                           </>\r\n//                         )}\r\n//                       </div>\r\n//                     </div>\r\n//                     {userData.location && (\r\n//                       <div className=\"row\">\r\n//                         <div className=\"col-md-2 listProfileParent\">\r\n//                           <h6>Native Location: </h6>\r\n//                         </div>\r\n//                         <div className=\"col-md-10 listProfileChild\">\r\n//                           {userData.location}\r\n//                         </div>\r\n//                       </div>\r\n//                     )}\r\n//                     {userData.total_exp && (\r\n//                       <div className=\"row\">\r\n//                         <div className=\"col-md-2 listProfileParent\">\r\n//                           <h6>Work Experience: </h6>\r\n//                         </div>\r\n//                         <div className=\"col-md-10 listProfileChild\">\r\n//                           {userData.total_exp}\r\n//                         </div>\r\n//                       </div>\r\n//                     )}\r\n//                     {userData.skills && (\r\n//                       <div className=\"row\">\r\n//                         <div className=\"col-md-2 listProfileParent\">\r\n//                           <h6>Skills: </h6>\r\n//                         </div>\r\n//                         <div className=\"col-md-10 listProfileChild\">\r\n//                           {Object.entries(userData.skills).map(([key, val]) => {\r\n//                             return val + \", \";\r\n//                           })}\r\n//                         </div>\r\n//                       </div>\r\n//                     )}\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//             {userData.education && (\r\n//               <div className=\"row\">\r\n//                 <div className=\"tableHeader\">\r\n//                   <h4\r\n//                     style={{\r\n//                       color: secondaryColor,\r\n//                     }}\r\n//                   >\r\n//                     Education:\r\n//                   </h4>\r\n//                 </div>\r\n//                 {userData.education != \"\" ? (\r\n//                   userData.education?.map((i, index) => {\r\n//                     return (\r\n//                       <>\r\n//                         <div className=\"dashboardSection3 FLPEducationTable\">\r\n//                           <table className=\"table\">\r\n//                             <thead>\r\n//                               <tr>\r\n//                                 <th>Qualification</th>\r\n//                                 <th>Course Name</th>\r\n//                                 <th>Specialization</th>\r\n//                                 <th>University/Institute</th>\r\n//                                 <th>Passed</th>\r\n//                               </tr>\r\n//                             </thead>\r\n//                             <tbody>\r\n//                               <tr>\r\n//                                 <td>{index + 1}</td>\r\n//                                 <td>{i.course_name ? i.course_name : \"N/A\"}</td>\r\n//                                 <td>{i.position}</td>\r\n//                                 <td>\r\n//                                   {i.basic_university\r\n//                                     ? i.basic_university\r\n//                                     : \"N/A\"}\r\n//                                 </td>\r\n//                                 <td>{i.basic_year ? i.basic_year : \"N/A\"}</td>\r\n//                               </tr>\r\n//                             </tbody>\r\n//                           </table>\r\n//                         </div>\r\n//                       </>\r\n//                     );\r\n//                   })\r\n//                 ) : (\r\n//                   <div className=\"FLPNAText\">Not Available</div>\r\n//                 )}\r\n//               </div>\r\n//             )}\r\n\r\n//             {userData.experience && (\r\n//               <div className=\"row\">\r\n//                 <div className=\"tableHeader\">\r\n//                   <h4\r\n//                     style={{\r\n//                       color: secondaryColor,\r\n//                     }}\r\n//                   >\r\n//                     Experience:\r\n//                   </h4>\r\n//                 </div>\r\n//                 {userData.experience != \"\" ? (\r\n//                   userData.experience?.map((i, index) => {\r\n//                     return (\r\n//                       <>\r\n//                         <div className=\"dashboardSection3 FLPEducationTable\">\r\n//                           <table className=\"table\">\r\n//                             <thead>\r\n//                               <tr>\r\n//                                 <th>Experience</th>\r\n//                                 <th>Company Name</th>\r\n//                                 <th>Industry</th>\r\n//                                 <th>Functional Area</th>\r\n//                                 <th>Role</th>\r\n//                                 <th>Designation</th>\r\n//                                 <th>Duration</th>\r\n//                               </tr>\r\n//                             </thead>\r\n//                             <tbody>\r\n//                               <tr>\r\n//                                 <td>{index + 1}</td>\r\n//                                 <td>{i.company_name ? i.company_name : \"N/A\"}</td>\r\n//                                 <td>{i.industry ? i.industry : \"N/A\"}</td>\r\n//                                 <td>{i.functional_area ? i.functional_area : \"N/A\"}</td>\r\n//                                 <td>{i.role ? i.role : \"N/A\"}</td>\r\n//                                 <td>\r\n//                                   {i.designation\r\n//                                     ? i.designation\r\n//                                     : \"N/A\"}\r\n//                                 </td>\r\n//                                 <td>{i.from_year ? i.from_year : \"N/A\"} - {i.to_year ? i.to_year : \"N/A\"}</td>\r\n//                               </tr>\r\n//                             </tbody>\r\n//                           </table>\r\n//                         </div>\r\n//                       </>\r\n//                     );\r\n//                   })\r\n//                 ) : (\r\n//                   <div className=\"FLPNAText\">Not Available</div>\r\n//                 )}\r\n//               </div>\r\n//             )}\r\n\r\n//             <div className=\"row\">\r\n//               <div className=\"FLPAboutCandidateHeader\">\r\n//                 <h4\r\n//                   style={{\r\n//                     color: secondaryColor,\r\n//                   }}\r\n//                 >\r\n//                   About Candidate:\r\n//                 </h4>\r\n//               </div>\r\n//               <div className=\"FLPAboutCandidateBody\">\r\n//                 {userData.company_about ? (\r\n//                   HTMLReactParser(userData.company_about)\r\n//                 ) : (\r\n//                   <div className=\"FLPNAText\">Not Available</div>\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n//             <div className=\"row\">\r\n//               <div className=\"FLPCandidateCertificateHeader\">\r\n//                 <h4\r\n//                   style={{\r\n//                     color: secondaryColor,\r\n//                   }}\r\n//                 >\r\n//                   CV Document/Certificates:\r\n//                 </h4>\r\n//               </div>\r\n//               <div className=\"FLPCandidateCertificateBody\">\r\n//               <p>Documents:</p>\r\n//                 {oldImages &&\r\n//                   oldImages?.map((i) => {\r\n//                     return (\r\n//                       <img\r\n//                         className=\"FLPCandidateCertificateImage\"\r\n//                         src={i.document}\r\n//                         alt=\"document\"\r\n//                       />\r\n//                     );\r\n//                   })}\r\n//                 {oldImages.length === 0 && (\r\n//                   <div className=\"FLPCandidateCertificateBody\">\r\n//                     <div className=\"FLPNAText\">Not Available</div>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//               <div className=\"FLPCandidateCertificateBody\">\r\n//                 <p>Documents:</p>\r\n//                 {oldDocs &&\r\n//                   oldDocs?.map((i, index) => {\r\n//                     return (\r\n//                       <div className=\"documentBox\" onClick={() => handleDocumentDownload(i.document)}>\r\n//                         <i class=\"fa-solid fa-file\"></i> Document {index + 1}\r\n//                       </div>\r\n//                     );\r\n//                   })}\r\n//                 {oldImages.length === 0 && (\r\n//                   <div className=\"FLPCandidateCertificateBody\">\r\n//                     <div className=\"FLPNAText\">Not Available</div>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n\r\n//           <Footer />\r\n//         </>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default FavouriteListProfile;\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Footer from \"../element/Footer\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport NavBar from \"../element/NavBar\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../api/BaseApi\";\r\nimport ApiKey from \"../api/ApiKey\";\r\nimport HTMLReactParser from \"html-react-parser\";\r\nimport Swal from \"sweetalert2\";\r\nimport Cookies from \"js-cookie\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport ReactPlayer from \"react-player\";\r\n\r\nconst FavouriteListProfile = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [favouriteListProfileData, setFavouriteListProfileData] = useState([]);\r\n  const [userData, setUserData] = useState([]);\r\n  const [userEducation, setUserEducation] = useState([]);\r\n  const [oldImages, setOldImages] = useState([]);\r\n  const [oldDocs, setOldDocs] = useState([]);\r\n\r\n  const [mailReply, setMailReply] = useState({\r\n    subject: \"\",\r\n    message: \"\",\r\n\r\n    emailFiles: [],\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    subject: \"\",\r\n    message: \"\",\r\n  });\r\n  const [selectedFileName, setSelectedFileName] = useState([]);\r\n  const [viewButtonEmailData, setViewButtonEmailData] = useState([]);\r\n  const [viewButtonContactData, setViewButtonContactData] = useState([]);\r\n\r\n  const [viewEmail, setViewEmail] = useState(false);\r\n  const [viewContact, setViewContact] = useState(false);\r\n  const [t, i18n] = useTranslation(\"global\");\r\n\r\n  const { slug } = useParams();\r\n  const tokenKey = Cookies.get(\"tokenClient\");\r\n  const navigate = useNavigate();\r\n\r\n  let primaryColor = Cookies.get(\"primaryColor\");\r\n  let secondaryColor = Cookies.get(\"secondaryColor\");\r\n\r\n  const [hoverSearchColor, setHoverSearchColor] = useState(false);\r\n\r\n  const handleSearchMouseEnter = () => {\r\n    setHoverSearchColor(true);\r\n  };\r\n\r\n  const handleSearchMouseLeave = () => {\r\n    setHoverSearchColor(false);\r\n  };\r\n\r\n  const [hoverUploadCVColor, setHoverUploadCVColor] = useState(false);\r\n\r\n  const handleUploadCVMouseEnter = () => {\r\n    setHoverUploadCVColor(true);\r\n  };\r\n\r\n  const handleUploadCVMouseLeave = () => {\r\n    setHoverUploadCVColor(false);\r\n  };\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + `/candidates/profile/${slug}`,\r\n        null,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n          },\r\n        }\r\n      );\r\n      setLoading(false);\r\n      if (response.data.status === 200) {\r\n        setFavouriteListProfileData(response.data.response);\r\n        setOldImages(response.data.response.showOldImages);\r\n        setOldDocs(response.data.response.showOldDocs);\r\n        setUserData(response.data.response.userdetails);\r\n        setUserEducation(response.data.response);\r\n      } else if (response.data.status === 400) {\r\n        // setLoading(false);\r\n        Cookies.remove(\"tokenClient\");\r\n        Cookies.remove(\"user_type\");\r\n        Cookies.remove(\"fname\");\r\n        navigate(\"/\");\r\n        Swal.fire({\r\n          title: response.data.message,\r\n          icon: \"warning\",\r\n          confirmButtonText: t(\"employerFavouriteList.close\"),\r\n        });\r\n      } else {\r\n        Swal.fire({\r\n          title: t(\"employerCreateJob.createJobFailedTitle\"),\r\n          text: response.data.message,\r\n          icon: \"error\",\r\n          confirmButtonText: t(\"employerFavouriteList.close\"),\r\n        });\r\n      }\r\n\r\n      // console.log(favouriteListProfileData);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      if (error.message === \"Network Error\") {\r\n        Cookies.remove(\"tokenClient\");\r\n        Cookies.remove(\"user_type\");\r\n        Cookies.remove(\"fname\");\r\n        navigate(\"/\");\r\n        Swal.fire({\r\n          title: t(\"tokenExpired.tokenExpired\"),\r\n          icon: \"warning\",\r\n          confirmButtonText: t(\"jobDescription.close\"),\r\n        });\r\n        setTimeout(function () {\r\n          window.location.reload();\r\n        }, 3000);\r\n      }\r\n      console.log(\"Could not get user data in profile page of favourite list\");\r\n    }\r\n  };\r\n\r\n  const [docDownloadPath, setDocDownloadPath] = useState();\r\n  const [downloadActive, setDownloadActive] = useState(false);\r\n  const [fileName, setFileName] = useState();\r\n\r\n\r\n  const handleDocDownload = async (path, doc) => {\r\n    setDocDownloadPath(path + doc);\r\n    setFileName(doc);\r\n    setDownloadActive(true);\r\n    // console.log(docDownloadPath);\r\n  };\r\n  useEffect(() => {\r\n    // console.log(downloadActive, DOCDownloadURL)\r\n    if (downloadActive && docDownloadPath) {\r\n      // Create a hidden link element\r\n      const link = document.createElement(\"a\");\r\n      link.style.display = \"none\";\r\n      link.href = docDownloadPath;\r\n      link.download = fileName;\r\n      document.body.appendChild(link);\r\n\r\n      // Trigger a click on the link\r\n      link.click();\r\n\r\n      // Clean up\r\n      document.body.removeChild(link);\r\n      setDownloadActive(false);\r\n    }\r\n  }, [downloadActive, docDownloadPath]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setMailReply((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      [name]: \"\",\r\n    }));\r\n    setMailSent(true);\r\n  };\r\n\r\n  const [imagePath, setImagePath] = useState();\r\n  const [imageDownloadActive, setImageDownloadActive] = useState(false);\r\n\r\n  const handleImageDownload = async (path) => {\r\n    setImagePath(path);\r\n    setImageDownloadActive(true);\r\n  };\r\n  useEffect(() => {\r\n    // console.log(downloadActive, DOCDownloadURL)\r\n    if (imageDownloadActive && imagePath) {\r\n      // Create a hidden link element\r\n      const link = document.createElement(\"a\");\r\n      link.style.display = \"none\";\r\n      link.href = imagePath;\r\n      link.download = \"generated-img.jpeg\";\r\n      document.body.appendChild(link);\r\n\r\n      // Trigger a click on the link\r\n      link.click();\r\n\r\n      // Clean up\r\n      document.body.removeChild(link);\r\n      setImageDownloadActive(false);\r\n    }\r\n  }, [imageDownloadActive, imagePath]);\r\n\r\n  const handleFirstTimeImageDownload = async (path) => {\r\n    try {\r\n      const response = await axios.post(\r\n        BaseApi + `/candidates/downloadCandidateCV/${slug}`,\r\n        null,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n          },\r\n        }\r\n      );\r\n      setLoading(false);\r\n      if (response.data.status === 200) {\r\n        handleImageDownload(path);\r\n        window.location.reload();\r\n      } else {\r\n        Swal.fire({\r\n          title: t(\"employerCreateJob.createJobFailedTitle\"),\r\n          text: response.data.message,\r\n          icon: \"error\",\r\n          confirmButtonText: t(\"employerFavouriteList.close\"),\r\n        });\r\n      }\r\n    } catch (error) {}\r\n  };\r\n  const handleFirstTimeDownload = async (path, doc) => {\r\n    try {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Download Document?\",\r\n        text: \"On downloading this document, your total download count will decrease by one.\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: t(\"employerFavouriteListProfile.yes\"),\r\n        cancelButtonText: t(\"employerFavouriteListProfile.no\"),\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        const response = await axios.post(\r\n          BaseApi + `/candidates/downloadCandidateCV/${slug}`,\r\n          null,\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n            },\r\n          }\r\n        );\r\n        setLoading(false);\r\n        if (response.data.status === 200) {\r\n          handleDocDownload(path, doc);\r\n          window.location.reload();\r\n          // getData();\r\n        } else {\r\n          Swal.fire({\r\n            title: t(\"employerCreateJob.createJobFailedTitle\"),\r\n            text: response.data.message,\r\n            icon: \"error\",\r\n            confirmButtonText: t(\"employerFavouriteList.close\"),\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handleFavourie = async (id) => {\r\n    try {\r\n      // setLoading(true)\r\n      const response = await axios.post(\r\n        BaseApi + `/candidates/addtoFavorite/${id}`,\r\n        null,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n          },\r\n        }\r\n      );\r\n      if (response.data.status === 200) {\r\n        Swal.fire({\r\n          title: t(\"employerFavouriteListProfile.addFavSuccessTitle\"),\r\n          icon: \"success\",\r\n          confirmButtonText: t(\"employerFavouriteListProfile.close\"),\r\n        });\r\n        getData();\r\n      } else if (response.data.status === 400) {\r\n        // setLoading(false);\r\n        Cookies.remove(\"tokenClient\");\r\n        Cookies.remove(\"user_type\");\r\n        Cookies.remove(\"fname\");\r\n        navigate(\"/\");\r\n        Swal.fire({\r\n          title: response.data.message,\r\n          icon: \"warning\",\r\n          confirmButtonText: t(\"employerFavouriteListProfile.close\"),\r\n        });\r\n      } else {\r\n        Swal.fire({\r\n          title: t(\"employerFavouriteListProfile.addFavFailedTitle\"),\r\n          text: response.data.message,\r\n          icon: \"error\",\r\n          confirmButtonText: t(\"employerFavouriteListProfile.close\"),\r\n        });\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      if (error.message === \"Network Error\") {\r\n        Cookies.remove(\"tokenClient\");\r\n        Cookies.remove(\"user_type\");\r\n        Cookies.remove(\"fname\");\r\n        navigate(\"/\");\r\n        Swal.fire({\r\n          title: t(\"tokenExpired.tokenExpired\"),\r\n          icon: \"warning\",\r\n          confirmButtonText: t(\"jobDescription.close\"),\r\n        });\r\n        setTimeout(function () {\r\n          window.location.reload();\r\n        }, 3000);\r\n      }\r\n      Swal.fire({\r\n        title: t(\"employerFavouriteListProfile.addFavFailedTitle\"),\r\n        text: t(\"employerFavouriteListProfile.addFavFailedTxt\"),\r\n        icon: \"error\",\r\n        confirmButtonText: t(\"employerFavouriteListProfile.close\"),\r\n      });\r\n    }\r\n  };\r\n\r\n  const [mailSent, setMailSent] = useState(false);\r\n\r\n  const handleReply = async (slug) => {\r\n    try {\r\n      const newErrors = {};\r\n\r\n      if (mailReply.subject === \"\") {\r\n        newErrors.subject = t(\"employerFavouriteListProfile.subjectRequired\");\r\n        window.scrollTo(0, 0);\r\n      }\r\n      if (mailReply.message === \"\") {\r\n        newErrors.message = t(\"employerFavouriteListProfile.messageRequired\");\r\n        window.scrollTo(0, 0);\r\n      }\r\n      setErrors(newErrors);\r\n      setMailSent(true);\r\n\r\n      if (Object.keys(newErrors).length === 0) {\r\n        const confirmationResult = await Swal.fire({\r\n          title: t(\"employerFavouriteListProfile.sendMailConfirmTitle\"),\r\n          text: t(\"employerFavouriteListProfile.sendMailConfirmTxt\"),\r\n          icon: \"question\",\r\n          showCancelButton: true,\r\n          confirmButtonText: t(\"employerFavouriteListProfile.yes\"),\r\n          cancelButtonText: t(\"employerFavouriteListProfile.no\"),\r\n        });\r\n        if (confirmationResult.isConfirmed) {\r\n          const updatedReply = {\r\n            ...mailReply,\r\n            selectedFileName: selectedFileName,\r\n            id: userData.id,\r\n          };\r\n\r\n          const formData = new FormData();\r\n          selectedFileName.forEach((fileName, index) => {\r\n            formData.append(`selectedFileNames[${index}]`, fileName);\r\n          });\r\n\r\n          setLoading(true);\r\n\r\n          const response = await axios.post(\r\n            BaseApi + `/candidates/sendmailjobseeker/${slug}`,\r\n            updatedReply,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                key: ApiKey,\r\n                token: tokenKey,\r\n              },\r\n            }\r\n          );\r\n          setLoading(false);\r\n\r\n          if (response.data.status === 200) {\r\n            Swal.fire({\r\n              title: t(\"employerFavouriteListProfile.sendMailSuccessTitle\"),\r\n              icon: \"success\",\r\n              confirmButtonText: t(\"employerFavouriteListProfile.close\"),\r\n            });\r\n            setMailReply({\r\n              ...mailReply,\r\n              subject: \"\",\r\n              message: \"\",\r\n              emailFiles: [],\r\n            });\r\n\r\n            setSelectedFileName([]); // Clear selectedFileName array\r\n\r\n            // Clear the input field value\r\n            const fileInput = document.getElementById(\"formFile\");\r\n            if (fileInput) {\r\n              fileInput.value = \"\"; // Reset input field value to empty string\r\n            }\r\n            setMailSent(false);\r\n\r\n            // navigate(`/candidates/profile/${userData.slug}`);\r\n          } else if (response.data.status === 400) {\r\n            Cookies.remove(\"tokenClient\");\r\n            Cookies.remove(\"user_type\");\r\n            Cookies.remove(\"fname\");\r\n            navigate(\"/\");\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"warning\",\r\n              confirmButtonText: t(\"employerFavouriteListProfile.close\"),\r\n            });\r\n          } else {\r\n            Swal.fire({\r\n              title: t(\"employerFavouriteListProfile.sendMailFailedTitle\"),\r\n              text: response.data.message,\r\n              icon: \"error\",\r\n              confirmButtonText: t(\"employerFavouriteListProfile.close\"),\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      if (error.message === \"Network Error\") {\r\n        Cookies.remove(\"tokenClient\");\r\n        Cookies.remove(\"user_type\");\r\n        Cookies.remove(\"fname\");\r\n        navigate(\"/\");\r\n        Swal.fire({\r\n          title: t(\"tokenExpired.tokenExpired\"),\r\n          icon: \"warning\",\r\n          confirmButtonText: t(\"jobDescription.close\"),\r\n        });\r\n        setTimeout(function () {\r\n          window.location.reload();\r\n        }, 3000);\r\n      }\r\n      Swal.fire({\r\n        title: t(\"employerFavouriteListProfile.sendMailFailedTitle\"),\r\n        text: t(\"employerFavouriteListProfile.sendMailFailedTxt\"),\r\n        icon: \"error\",\r\n        confirmButtonText: t(\"employerFavouriteListProfile.close\"),\r\n      });\r\n    }\r\n  };\r\n\r\n  const [emailViewed, setEmailViewed] = useState(false);\r\n  const [contactViewed, setContactViewed] = useState(false);\r\n\r\n  // const handleEmailViewClick = async () => {\r\n  //   try {\r\n  //     const confirmationResult = await Swal.fire({\r\n  //       title: \"View email details?\",\r\n  //       text: \"On viewing the details, your profile view count will be decrease by one.\",\r\n  //       icon: \"question\",\r\n  //       showCancelButton: true,\r\n  //       confirmButtonText: t(\"employerFavouriteListProfile.yes\"),\r\n  //       cancelButtonText: t(\"employerFavouriteListProfile.no\"),\r\n  //     });\r\n  //     if (confirmationResult.isConfirmed) {\r\n  //     setViewEmail(true);\r\n  //     const response = await axios.post(\r\n  //       BaseApi + `/candidates/getUserdetail/${slug}`,\r\n  //       null,\r\n  //       {\r\n  //         headers: {\r\n  //           \"Content-Type\": \"application/json\",\r\n  //           key: ApiKey,\r\n  //           token: tokenKey,\r\n  //         },\r\n  //       }\r\n  //     );\r\n  //     if (response.data.response.status === \"0\") {\r\n  //       Swal.fire({\r\n  //         title: t(\"employerFavouriteListProfile.emailViewTitle\"),\r\n  //         text: t(\"employerFavouriteListProfile.emailViewTxt\"),\r\n  //         icon: \"warning\",\r\n  //         confirmButtonText: t(\"employerFavouriteListProfile.close\"),\r\n  //       });\r\n  //     }\r\n  //     if (response.data.response.status === \"1\") {\r\n  //       setViewButtonEmailData(response.data.response);\r\n  //       if(!contactViewed) {\r\n  //         Swal.fire({\r\n  //           title: t(\"employerFavouriteListProfile.profileCountUsed\"),\r\n  //           // text: t(\"employerFavouriteListProfile.emailViewTxt\"),\r\n  //           icon: \"warning\",\r\n  //           confirmButtonText: t(\"employerFavouriteListProfile.close\"),\r\n  //         });\r\n  //       }\r\n  //       setEmailViewed(true);\r\n\r\n  //     }\r\n  //   }\r\n  //     // console.log(response.data.response);\r\n  //   } catch (error) {\r\n  //     if (error.message === \"Network Error\") {\r\n  //       Cookies.remove(\"tokenClient\");\r\n  //       Cookies.remove(\"user_type\");\r\n  //       Cookies.remove(\"fname\");\r\n  //       navigate(\"/\");\r\n  //       Swal.fire({\r\n  //         title: t(\"tokenExpired.tokenExpired\"),\r\n  //         icon: \"warning\",\r\n  //         confirmButtonText: t(\"jobDescription.close\"),\r\n  //       });\r\n  //       setTimeout(function () {\r\n  //         window.location.reload();\r\n  //       }, 3000);\r\n  //     }\r\n  //     console.log(error);\r\n  //   }\r\n  // };\r\n\r\n  // new code\r\n  const handleEmailViewClick = async () => {\r\n    try {\r\n      if (!contactViewed) {\r\n        const confirmationResult = await Swal.fire({\r\n          title: t(\"employerFavouriteListProfile.profileViewConfirmTitle\"),\r\n          text: t(\"employerFavouriteListProfile.profileViewConfirmTxt\"),\r\n          icon: \"question\",\r\n          showCancelButton: true,\r\n          confirmButtonText: t(\"employerFavouriteListProfile.yes\"),\r\n          cancelButtonText: t(\"employerFavouriteListProfile.no\"),\r\n        });\r\n\r\n        if (!confirmationResult.isConfirmed) {\r\n          return; // User canceled the action\r\n        }\r\n      }\r\n\r\n      setViewEmail(true);\r\n\r\n      const response = await axios.post(\r\n        BaseApi + `/candidates/getUserdetail/${slug}`,\r\n        null,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.data.response.status === \"0\") {\r\n        Swal.fire({\r\n          title: t(\"employerFavouriteListProfile.emailViewTitle\"),\r\n          text: t(\"employerFavouriteListProfile.emailViewTxt\"),\r\n          icon: \"warning\",\r\n          confirmButtonText: t(\"employerFavouriteListProfile.close\"),\r\n        });\r\n      }\r\n\r\n      if (response.data.response.status === \"1\") {\r\n        setViewButtonEmailData(response.data.response);\r\n        if (!contactViewed) {\r\n          Swal.fire({\r\n            title: t(\"employerFavouriteListProfile.profileCountUsed\"),\r\n            // text: t(\"employerFavouriteListProfile.emailViewTxt\"),\r\n            icon: \"success\",\r\n            confirmButtonText: t(\"employerFavouriteListProfile.close\"),\r\n          });\r\n        }\r\n        setEmailViewed(true);\r\n      }\r\n\r\n      // console.log(response.data.response);\r\n    } catch (error) {\r\n      if (error.message === \"Network Error\") {\r\n        Cookies.remove(\"tokenClient\");\r\n        Cookies.remove(\"user_type\");\r\n        Cookies.remove(\"fname\");\r\n        navigate(\"/\");\r\n        Swal.fire({\r\n          title: t(\"tokenExpired.tokenExpired\"),\r\n          icon: \"warning\",\r\n          confirmButtonText: t(\"jobDescription.close\"),\r\n        });\r\n        setTimeout(function () {\r\n          window.location.reload();\r\n        }, 3000);\r\n      }\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleContactViewClick = async () => {\r\n    try {\r\n      if (!emailViewed) {\r\n        const confirmationResult = await Swal.fire({\r\n          title: t(\"employerFavouriteListProfile.profileViewConfirmTitle\"),\r\n          text: t(\"employerFavouriteListProfile.profileViewConfirmTxt\"),\r\n          icon: \"question\",\r\n          showCancelButton: true,\r\n          confirmButtonText: t(\"employerFavouriteListProfile.yes\"),\r\n          cancelButtonText: t(\"employerFavouriteListProfile.no\"),\r\n        });\r\n\r\n        if (!confirmationResult.isConfirmed) {\r\n          return; // User canceled the action\r\n        }\r\n      }\r\n\r\n      setViewContact(true);\r\n\r\n      const response = await axios.post(\r\n        BaseApi + `/candidates/getUserdetail/${slug}`,\r\n        null,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.data.response.status === \"0\") {\r\n        Swal.fire({\r\n          title: t(\"employerFavouriteListProfile.contactViewTitle\"),\r\n          text: t(\"employerFavouriteListProfile.contactViewTxt\"),\r\n          icon: \"warning\",\r\n          confirmButtonText: t(\"employerFavouriteListProfile.close\"),\r\n        });\r\n      }\r\n\r\n      if (response.data.response.status === \"1\") {\r\n        if (!emailViewed) {\r\n          Swal.fire({\r\n            title: t(\"employerFavouriteListProfile.profileCountUsed\"),\r\n            // text: t(\"employerFavouriteListProfile.emailViewTxt\"),\r\n            icon: \"success\",\r\n            confirmButtonText: t(\"employerFavouriteListProfile.close\"),\r\n          });\r\n        }\r\n\r\n        setViewButtonContactData(response.data.response);\r\n        setContactViewed(true);\r\n      }\r\n\r\n      // console.log(response.data.response);\r\n    } catch (error) {\r\n      if (error.message === \"Network Error\") {\r\n        Cookies.remove(\"tokenClient\");\r\n        Cookies.remove(\"user_type\");\r\n        Cookies.remove(\"fname\");\r\n        navigate(\"/\");\r\n        Swal.fire({\r\n          title: t(\"tokenExpired.tokenExpired\"),\r\n          icon: \"warning\",\r\n          confirmButtonText: t(\"jobDescription.close\"),\r\n        });\r\n        setTimeout(function () {\r\n          window.location.reload();\r\n        }, 3000);\r\n      }\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // const handleContactViewClick = async () => {\r\n  //   try {\r\n  //     const confirmationResult = await Swal.fire({\r\n  //       title: \"View contact details?\",\r\n  //       text: \"On viewing the details, your profile view count will be decrease by one.\",\r\n  //       icon: \"question\",\r\n  //       showCancelButton: true,\r\n  //       confirmButtonText: t(\"employerFavouriteListProfile.yes\"),\r\n  //       cancelButtonText: t(\"employerFavouriteListProfile.no\"),\r\n  //     });\r\n  //     setViewContact(true);\r\n  //     const response = await axios.post(\r\n  //       BaseApi + `/candidates/getUserdetail/${slug}`,\r\n  //       null,\r\n  //       {\r\n  //         headers: {\r\n  //           \"Content-Type\": \"application/json\",\r\n  //           key: ApiKey,\r\n  //           token: tokenKey,\r\n  //         },\r\n  //       }\r\n  //     );\r\n  //     if (response.data.response.status === \"0\") {\r\n  //       Swal.fire({\r\n  //         title: t(\"employerFavouriteListProfile.contactViewTitle\"),\r\n  //         text: t(\"employerFavouriteListProfile.contactViewTxt\"),\r\n  //         icon: \"warning\",\r\n  //         confirmButtonText: t(\"employerFavouriteListProfile.close\"),\r\n  //       });\r\n  //     }\r\n  //     if (response.data.response.status === \"1\") {\r\n  //       if(!emailViewed) {\r\n  //         Swal.fire({\r\n  //           title: t(\"employerFavouriteListProfile.profileCountUsed\"),\r\n  //           // text: t(\"employerFavouriteListProfile.emailViewTxt\"),\r\n  //           icon: \"warning\",\r\n  //           confirmButtonText: t(\"employerFavouriteListProfile.close\"),\r\n  //         });\r\n  //       }\r\n\r\n  //       setViewButtonContactData(response.data.response);\r\n  //       setContactViewed(true);\r\n  //     }\r\n  //     console.log(response.data.response);\r\n  //   } catch (error) {\r\n  //     if (error.message === \"Network Error\") {\r\n  //       Cookies.remove(\"tokenClient\");\r\n  //       Cookies.remove(\"user_type\");\r\n  //       Cookies.remove(\"fname\");\r\n  //       navigate(\"/\");\r\n  //       Swal.fire({\r\n  //         title: t(\"tokenExpired.tokenExpired\"),\r\n  //         icon: \"warning\",\r\n  //         confirmButtonText: t(\"jobDescription.close\"),\r\n  //       });\r\n  //       setTimeout(function () {\r\n  //         window.location.reload();\r\n  //       }, 3000);\r\n  //     }\r\n  //     console.log(error);\r\n  //   }\r\n  // };\r\n\r\n  const handleDocumentDownload = async (documentUrl) => {\r\n    // Create an anchor element\r\n    const anchor = document.createElement(\"a\");\r\n\r\n    // Set the href attribute to the document URL\r\n    anchor.href = documentUrl;\r\n\r\n    // Set the download attribute to force the browser to download the file instead of navigating to it\r\n    anchor.setAttribute(\"download\", \"\");\r\n\r\n    // Hide the anchor element\r\n    anchor.style.display = \"none\";\r\n\r\n    // Append the anchor element to the document body\r\n    document.body.appendChild(anchor);\r\n\r\n    // Trigger a click on the anchor element\r\n    anchor.click();\r\n\r\n    // Remove the anchor element from the document body after a short delay\r\n    setTimeout(() => {\r\n      document.body.removeChild(anchor);\r\n    }, 100);\r\n  };\r\n\r\n  const convertFileToBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = (event) => {\r\n        resolve(event.target.result);\r\n      };\r\n      reader.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/user/employerlogin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      {loading ? (\r\n        <div className=\"loader-container\"></div>\r\n      ) : (\r\n        <>\r\n          <div className=\"container FavouriteListProfile editProfile\">\r\n            {/* Reply Modal  */}\r\n            <div\r\n              class=\"modal fade\"\r\n              id=\"ReplyModal\"\r\n              tabindex=\"-1\"\r\n              aria-labelledby=\"exampleModalLabel\"\r\n              aria-hidden=\"true\"\r\n            >\r\n              <div class=\"modal-dialog\">\r\n                <div class=\"modal-content\">\r\n                  <div class=\"modal-header\">\r\n                    <h1 class=\"modal-title fs-5\" id=\"exampleModalLabel\">\r\n                      {t(\"employerFavouriteListProfile.sendMailTo\")}{\" \"}\r\n                      {userData.first_name} {userData.last_name}\r\n                    </h1>\r\n                    <button\r\n                      type=\"button\"\r\n                      class=\"btn-close\"\r\n                      data-bs-dismiss=\"modal\"\r\n                      aria-label=\"Close\"\r\n                    ></button>\r\n                  </div>\r\n                  <div class=\"modal-body\">\r\n                    <div class=\"form-outline mb-5 mt-4 DashBoardInputBx\">\r\n                      <label class=\"form-label\" for=\"form3Example3\">\r\n                        {t(\"employerFavouriteListProfile.subject\")}{\" \"}\r\n                        <span className=\"RedStar\">*</span>\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"form3Example3\"\r\n                        className={`form-control ${\r\n                          errors.subject && \"input-error\"\r\n                        }`}\r\n                        placeholder={t(\"employerFavouriteListProfile.subject\")}\r\n                        value={mailReply.subject}\r\n                        name=\"subject\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      {errors.subject && (\r\n                        <div className=\"text-danger\">{errors.subject}</div>\r\n                      )}\r\n                    </div>\r\n                    <div class=\"form-outline mb-5 DashBoardInputBx\">\r\n                      <label class=\"form-label\" for=\"form3Example3\">\r\n                        {t(\"employerFavouriteListProfile.message\")}{\" \"}\r\n                        <span className=\"RedStar\">*</span>\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"form3Example3\"\r\n                        className={`form-control ${\r\n                          errors.message && \"input-error\"\r\n                        }`}\r\n                        placeholder={t(\"employerFavouriteListProfile.message\")}\r\n                        value={mailReply.message}\r\n                        name=\"message\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      {errors.message && (\r\n                        <div className=\"text-danger\">{errors.message}</div>\r\n                      )}\r\n                    </div>\r\n                    <div class=\"form-outline mb-3 DashBoardInputBx\">\r\n                      <label for=\"formFile\" class=\"form-label\">\r\n                        {t(\"employerFavouriteListProfile.multipleImages\")}\r\n                      </label>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"formFile\"\r\n                        className=\"form-control\"\r\n                        name=\"file\"\r\n                        multiple\r\n                        onChange={(e) => {\r\n                          const files = Array.from(e.target.files);\r\n\r\n                          // Capture the selected file names\r\n                          const fileNames = files.map((file) => file.name);\r\n                          setSelectedFileName(fileNames);\r\n\r\n                          // Convert each selected file to base64 encoding\r\n                          Promise.all(\r\n                            files.map((file) => convertFileToBase64(file))\r\n                          )\r\n                            .then((base64Array) => {\r\n                              setMailReply({\r\n                                ...mailReply,\r\n                                emailFiles: base64Array,\r\n                              });\r\n                            })\r\n                            .catch((error) => {\r\n                              console.error(\r\n                                \"Error converting files to base64:\",\r\n                                error\r\n                              );\r\n                            });\r\n                        }}\r\n                      />{\" \"}\r\n                      <div id=\"emailHelp\" class=\"form-text mt-2\">\r\n                        {t(\"employerFavouriteListProfile.belowTxt1\")}\r\n                      </div>\r\n                    </div>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-primary button1\"\r\n                      data-bs-dismiss={mailSent && `modal`}\r\n                      aria-label={mailSent && `Close`}\r\n                      style={{\r\n                        backgroundColor: hoverSearchColor\r\n                          ? secondaryColor\r\n                          : primaryColor,\r\n                        border: hoverSearchColor\r\n                          ? secondaryColor\r\n                          : primaryColor,\r\n                      }}\r\n                      onMouseEnter={handleSearchMouseEnter}\r\n                      onMouseLeave={handleSearchMouseLeave}\r\n                      onClick={() => handleReply(userData.slug)}\r\n                    >\r\n                      {t(\"employerFavouriteListProfile.submitButton\")}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-2 FLPLeftSideHeader\">\r\n                <div className=\"ImageSpace\">\r\n                  {userData.profile_image ? (\r\n                    <img\r\n                      className=\"FLPImage\"\r\n                      src={userData.profile_image}\r\n                      alt=\"Profile Picture\"\r\n                    />\r\n                  ) : (\r\n                    <img\r\n                      className=\"FLPImage\"\r\n                      src=\"/Images/jobseekerSide/dummy-profile.png\"\r\n                      alt=\"Profile Picture\"\r\n                    />\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div\r\n                className=\"col-lg-10 mb-5\"\r\n                // style={{\r\n                //   borderLeft: \"2px solid #e6e8e7\",\r\n                //   borderRight: \"2px solid #e6e8e7\",\r\n                // }}\r\n              >\r\n                <div className=\"card FLPHeaderCard\">\r\n                  <div className=\"FLPRightSideHeader\">\r\n                    <h4\r\n                      className=\"\"\r\n                      style={{\r\n                        color: secondaryColor,\r\n                      }}\r\n                    >\r\n                      {userData.first_name} {userData.last_name}\r\n                    </h4>\r\n                    <div className=\"FLPInnerRight\">\r\n                      <Link\r\n                        id=\"FLLink\"\r\n                        className=\"btn FLPlink\"\r\n                        data-bs-toggle=\"modal\"\r\n                        data-bs-target=\"#ReplyModal\"\r\n                        style={{\r\n                          color: secondaryColor,\r\n                        }}\r\n                      >\r\n                        {t(\"employerFavouriteListProfile.sendMail\")}\r\n                      </Link>\r\n                      {favouriteListProfileData.fav_status === 0 ? (\r\n                        <Link\r\n                          className=\"btn FLPlink\"\r\n                          onClick={() => handleFavourie(userData.id)}\r\n                          style={{\r\n                            color: secondaryColor,\r\n                          }}\r\n                        >\r\n                          {t(\"employerFavouriteListProfile.addToFav\")}\r\n                        </Link>\r\n                      ) : (\r\n                        <Link\r\n                          className=\"btn FLPlink\"\r\n                          style={{\r\n                            color: secondaryColor,\r\n                          }}\r\n                        >\r\n                          <i class=\"fa-solid fa-star\"></i>{\" \"}\r\n                          {t(\"employerFavouriteListProfile.favourite\")}\r\n                        </Link>\r\n                      )}\r\n\r\n                      <Link\r\n                        to=\"\"\r\n                        id=\"FLLink\"\r\n                        className=\"btn FLPlink\"\r\n                        onClick={() => window.history.back()}\r\n                        style={{\r\n                          color: secondaryColor,\r\n                        }}\r\n                      >\r\n                        <i class=\"fa-solid fa-arrow-left\"></i>\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"FLPRightSideBody\">\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-2\">\r\n                        <h6>\r\n                          {t(\"employerFavouriteListProfile.emailAddress\")}:{\" \"}\r\n                        </h6>\r\n                      </div>\r\n                      <div className=\"col-md-10 emailValueFLP\">\r\n                        {viewEmail ? (\r\n                          <>\r\n                            <p className=\"pt-1\">{viewButtonEmailData.email}</p>\r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            {userData.email_address?.includes(\"@xxxx\") ? (\r\n                              <>\r\n                                <p className=\"pt-1\">\r\n                                  {userData.email_address}{\" \"}\r\n                                  <Link\r\n                                    className=\"viewLink\"\r\n                                    type=\"\"\r\n                                    // data-bs-toggle=\"modal\"\r\n                                    // data-bs-target=\"#ViewModal\"\r\n                                    onClick={handleEmailViewClick}\r\n                                  >\r\n                                    {t(\"employerFavouriteListProfile.show\")}\r\n                                  </Link>\r\n                                </p>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <p className=\"pt-1\">{userData.email_address}</p>\r\n                              </>\r\n                            )}{\" \"}\r\n                          </>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-2\">\r\n                        <h6>\r\n                          {t(\"employerFavouriteListProfile.contactNumber\")}:{\" \"}\r\n                        </h6>\r\n                      </div>\r\n                      <div className=\"col-md-10 contactValueFLP\">\r\n                        {viewContact ? (\r\n                          <>\r\n                            <p className=\"pt-1\">\r\n                              {viewButtonContactData.contact}\r\n                            </p>\r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            {userData.contact?.includes(\"+xxxx\") ? (\r\n                              <>\r\n                                <p className=\"pt-1\">\r\n                                  {userData.contact}{\" \"}\r\n                                  <Link\r\n                                    className=\"viewLink\"\r\n                                    // data-bs-toggle=\"modal\"\r\n                                    // data-bs-target=\"#ViewModal\"\r\n                                    onClick={handleContactViewClick}\r\n                                  >\r\n                                    {t(\"employerFavouriteListProfile.show\")}\r\n                                  </Link>\r\n                                </p>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <p className=\"pt-1\">{userData.contact}</p>\r\n                              </>\r\n                            )}\r\n                          </>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    {userData.location && (\r\n                      <div className=\"row\">\r\n                        <div className=\"col-md-2 listProfileParent\">\r\n                          <h6>\r\n                            {t(\"employerFavouriteListProfile.nativeLocation\")}:{\" \"}\r\n                          </h6>\r\n                        </div>\r\n                        <div className=\"col-md-10 listProfileChild\">\r\n                          {userData.location}\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                    {userData.total_exp && (\r\n                      <div className=\"row\">\r\n                        <div className=\"col-md-2 listProfileParent\">\r\n                          <h6>Work Experience: </h6>\r\n                        </div>\r\n                        <div className=\"col-md-10 listProfileChild\">\r\n                          {userData.total_exp}\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                    {userData.skills && (\r\n                      <div className=\"row\">\r\n                        <div className=\"col-md-2 listProfileParent\">\r\n                          <h6>{t(\"employerFavouriteListProfile.skills\")}: </h6>\r\n                        </div>\r\n                        <div className=\"col-md-10 listProfileChild\">\r\n                          {Object.entries(userData.skills).map(([key, val]) => {\r\n                            return val + \", \";\r\n                          })}\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {userData.education && (\r\n              \r\n              // <div className=\"row\">\r\n              <>\r\n                <div className=\"tableHeader\">\r\n                  <h4\r\n                    style={{\r\n                      color: secondaryColor,\r\n                    }}\r\n                  >\r\n                    {t(\"employerFavouriteListProfile.education\")}:\r\n                  </h4>\r\n                </div>\r\n                {userData.education != \"\" ? (\r\n                  userData.education?.map((i, index) => {\r\n                    return (\r\n                      <>\r\n                        <div className=\"dashboardSection3 FLPEducationTable\">\r\n                          <table className=\"table\">\r\n                            <thead>\r\n                              <tr>\r\n                                <th>\r\n                                  {t(\r\n                                    \"employerFavouriteListProfile.qualification\"\r\n                                  )}\r\n                                </th>\r\n                                <th>\r\n                                  {t(\"employerFavouriteListProfile.courseName\")}\r\n                                </th>\r\n                                <th>\r\n                                  {t(\r\n                                    \"employerFavouriteListProfile.specialization\"\r\n                                  )}\r\n                                </th>\r\n                                <th>\r\n                                  {t(\r\n                                    \"employerFavouriteListProfile.university/institute\"\r\n                                  )}\r\n                                </th>\r\n                                <th>\r\n                                  {t(\"employerFavouriteListProfile.passed\")}\r\n                                </th>\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              <tr>\r\n                                <td>{index + 1}</td>\r\n                                <td>\r\n                                  {i.course_name\r\n                                    ? i.course_name\r\n                                    : t(\r\n                                        \"employerFavouriteListProfile.notAvailable\"\r\n                                      )}\r\n                                </td>\r\n                                <td>{i.specialization_name}</td>\r\n                                <td>\r\n                                  {i.basic_university\r\n                                    ? i.basic_university\r\n                                    : \"N/A\"}\r\n                                </td>\r\n                                <td>\r\n                                  {i.basic_year\r\n                                    ? i.basic_year\r\n                                    : t(\r\n                                        \"employerFavouriteListProfile.notAvailable\"\r\n                                      )}\r\n                                </td>\r\n                              </tr>\r\n                            </tbody>\r\n                          </table>\r\n                        </div>\r\n                      </>\r\n                    );\r\n                  })\r\n                ) : (\r\n                  <div className=\"FLPNAText\">\r\n                    {t(\"employerFavouriteListProfile.notAvailable\")}\r\n                  </div>\r\n                )}\r\n              {/* </div> */}\r\n              </>\r\n            )}\r\n\r\n            {userData.experience && (\r\n              // <div className=\"row\">\r\n              <>\r\n                <div className=\"tableHeader\">\r\n                  <h4\r\n                    style={{\r\n                      color: secondaryColor,\r\n                    }}\r\n                  >\r\n                    {t(\"employerFavouriteListProfile.experience\")}:\r\n                  </h4>\r\n                </div>\r\n                {userData.experience != \"\" ? (\r\n                  userData.experience?.map((i, index) => {\r\n                    return (\r\n                      <>\r\n                        <div className=\"dashboardSection3 FLPEducationTable\">\r\n                          <table className=\"table\">\r\n                            <thead>\r\n                              <tr>\r\n                                <th>\r\n                                  {t(\"employerFavouriteListProfile.experience\")}\r\n                                </th>\r\n                                <th>\r\n                                  {t(\r\n                                    \"employerFavouriteListProfile.companyName\"\r\n                                  )}\r\n                                </th>\r\n                                <th>\r\n                                  {t(\"employerFavouriteListProfile.industry\")}\r\n                                </th>\r\n                                <th>\r\n                                  {t(\r\n                                    \"employerFavouriteListProfile.functionalArea\"\r\n                                  )}\r\n                                </th>\r\n                                <th>\r\n                                  {t(\"employerFavouriteListProfile.role\")}\r\n                                </th>\r\n                                <th>\r\n                                  {t(\r\n                                    \"employerFavouriteListProfile.workingRelation\"\r\n                                  )}\r\n                                </th>\r\n                                <th>\r\n                                  {t(\"employerFavouriteListProfile.duration\")}\r\n                                </th>\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              <tr>\r\n                                <td>{index + 1}</td>\r\n                                <td>\r\n                                  {i.company_name\r\n                                    ? i.company_name\r\n                                    : t(\r\n                                        \"employerFavouriteListProfile.notAvailable\"\r\n                                      )}\r\n                                </td>\r\n                                <td>\r\n                                  {i.industry\r\n                                    ? i.industry\r\n                                    : t(\r\n                                        \"employerFavouriteListProfile.notAvailable\"\r\n                                      )}\r\n                                </td>\r\n                                <td>\r\n                                  {i.functional_area\r\n                                    ? i.functional_area\r\n                                    : t(\r\n                                        \"employerFavouriteListProfile.notAvailable\"\r\n                                      )}\r\n                                </td>\r\n                                <td>\r\n                                  {i.role\r\n                                    ? i.role\r\n                                    : t(\r\n                                        \"employerFavouriteListProfile.notAvailable\"\r\n                                      )}\r\n                                </td>\r\n                                <td>\r\n                                  {i.designation\r\n                                    ? i.designation\r\n                                    : t(\r\n                                        \"employerFavouriteListProfile.notAvailable\"\r\n                                      )}\r\n                                </td>\r\n                                <td>\r\n                                  {i.from_year\r\n                                    ? i.from_year\r\n                                    : t(\r\n                                        \"employerFavouriteListProfile.notAvailable\"\r\n                                      )}{\" \"}\r\n                                  -{\" \"}\r\n                                  {i.to_year\r\n                                    ? i.to_year\r\n                                    : t(\r\n                                        \"employerFavouriteListProfile.notAvailable\"\r\n                                      )}\r\n                                </td>\r\n                              </tr>\r\n                            </tbody>\r\n                          </table>\r\n                        </div>\r\n                      </>\r\n                    );\r\n                  })\r\n                ) : (\r\n                  <div className=\"FLPNAText\">\r\n                    {t(\"employerFavouriteListProfile.notAvailable\")}\r\n                  </div>\r\n                )}\r\n              {/* </div> */}\r\n              </>\r\n            )}\r\n\r\n{userData.profReg && (\r\n              // <div className=\"row\">\r\n              <>\r\n                <div className=\"tableHeader\">\r\n                  <h4\r\n                    style={{\r\n                      color: secondaryColor,\r\n                    }}\r\n                  >\r\n                    {t(\"employerFavouriteListProfile.professionalRegistration\")}\r\n                    :\r\n                  </h4>\r\n                </div>\r\n                {userData.profReg != \"\" ? (\r\n                  userData.profReg?.map((i, index) => {\r\n                    return (\r\n                      <>\r\n                        <div className=\"dashboardSection3 FLPEducationTable\">\r\n                          <table className=\"table\">\r\n                            <thead>\r\n                              <tr>\r\n                                <th>\r\n                                  {t(\r\n                                    \"employerFavouriteListProfile.registrationNumber\"\r\n                                  )}\r\n                                </th>\r\n                                <th>\r\n                                  {t(\r\n                                    \"employerFavouriteListProfile.registrationName\"\r\n                                  )}\r\n                                </th>\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              <tr>\r\n                                <td>{index + 1}</td>\r\n                                <td>\r\n                                  {i.registration_name\r\n                                    ? i.registration_name\r\n                                    : t(\r\n                                        \"employerFavouriteListProfile.notAvailable\"\r\n                                      )}\r\n                                </td>\r\n                              </tr>\r\n                            </tbody>\r\n                          </table>\r\n                        </div>\r\n                      </>\r\n                    );\r\n                  })\r\n                ) : (\r\n                  <div className=\"FLPNAText\">\r\n                    {t(\"employerFavouriteListProfile.notAvailable\")}\r\n                  </div>\r\n                )}\r\n                {/* </div> */}\r\n              </>\r\n            )}\r\n\r\n            <div className=\"rows\">\r\n              <div className=\"FLPAboutCandidateHeader\">\r\n                <h4\r\n                  style={{\r\n                    color: secondaryColor,\r\n                  }}\r\n                >\r\n                  {t(\"employerFavouriteListProfile.aboutCandidate\")}:\r\n                </h4>\r\n              </div>\r\n              <div className=\"FLPAboutCandidateBody\">\r\n                {userData.company_about ? (\r\n                  HTMLReactParser(userData.company_about)\r\n                ) : (\r\n                  <div className=\"FLPNAText\">\r\n                    {t(\"employerFavouriteListProfile.notAvailable\")}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div className=\"rows\">\r\n              <div className=\"FLPCandidateCertificateHeader\">\r\n                <h4\r\n                  style={{\r\n                    color: secondaryColor,\r\n                  }}\r\n                >\r\n                  {t(\"employerFavouriteListProfile.CVDoc/certificate\")}:\r\n                </h4>\r\n              </div>\r\n              {favouriteListProfileData.is_downloadable == 1 && (\r\n                <div className=\"FLPCandidateCertificateBody\">\r\n                  <p>{t(\"employerFavouriteListProfile.certificate\")}:</p>\r\n                  {oldImages &&\r\n                    oldImages?.map((i, index) => {\r\n                      return (\r\n                        <div\r\n                          className=\"imageBox\"\r\n                          onClick={() => handleImageDownload(i.image)}\r\n                        >\r\n                          <i class=\"fa-solid fa-image\"></i> {i.image_name}\r\n                          {/* <img\r\n                      className=\"FLPCandidateCertificateImage\"\r\n                      src={i.document}\r\n                      alt=\"document\"\r\n                    /> */}\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  {oldImages.length === 0 && (\r\n                    <div className=\"FLPCandidateCertificateBody\">\r\n                      <div className=\"FLPNAText\">\r\n                        {t(\"employerFavouriteListProfile.notAvailable\")}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n              {favouriteListProfileData.is_downloadable == 0 && (\r\n                <div className=\"FLPCandidateCertificateBody\">\r\n                  <p>{t(\"employerFavouriteListProfile.certificate\")}:</p>\r\n                  {oldImages &&\r\n                    oldImages?.map((i, index) => {\r\n                      return (\r\n                        <div\r\n                          className=\"imageBox\"\r\n                          onClick={() => handleFirstTimeImageDownload(i.image)}\r\n                        >\r\n                          <i class=\"fa-solid fa-image\"></i> {i.image_name}\r\n                          {/* <img\r\n                      className=\"FLPCandidateCertificateImage\"\r\n                      src={i.image}\r\n                      alt=\"document\"\r\n                    /> */}\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  {oldImages.length === 0 && (\r\n                    <div className=\"FLPCandidateCertificateBody\">\r\n                      <div className=\"FLPNAText\">\r\n                        {t(\"employerFavouriteListProfile.notAvailable\")}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n              {favouriteListProfileData.is_downloadable == 1 && (\r\n                <div className=\"FLPCandidateCertificateBody\">\r\n                  <p>{t(\"employerFavouriteListProfile.document\")}:</p>\r\n                  {oldDocs &&\r\n                    oldDocs?.map((i, index) => {\r\n                      return (\r\n                        <div\r\n                          className=\"documentBox\"\r\n                          onClick={() => handleDocDownload(i.path, i.doc)}\r\n                        >\r\n                          <i class=\"fa-solid fa-file\"></i>{\" \"}\r\n                          {/* {t(\"employerFavouriteListProfile.document\")}{\" \"}\r\n                          {index + 1} */}\r\n                          {i.doc ?.substring(0, 14)}..\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  {oldDocs.length === 0 && (\r\n                    <div className=\"FLPCandidateCertificateBody\">\r\n                      <div className=\"FLPNAText\">\r\n                        {t(\"employerFavouriteListProfile.notAvailable\")}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n              {favouriteListProfileData.is_downloadable == 0 && (\r\n                <div className=\"FLPCandidateCertificateBody\">\r\n                  <p>{t(\"employerFavouriteListProfile.document\")}:</p>\r\n                  {oldDocs &&\r\n                    oldDocs?.map((i, index) => {\r\n                      return (\r\n                        <div\r\n                          className=\"documentBox\"\r\n                          onClick={() => handleFirstTimeDownload(i.path, i.doc)}\r\n                        >\r\n                          <i class=\"fa-solid fa-file\"></i>{\" \"}\r\n                          {t(\"employerFavouriteListProfile.document\")}{\" \"}\r\n                          {i.doc ?.substring(0, 14)}..\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  {oldDocs.length === 0 && (\r\n                    <div className=\"FLPCandidateCertificateBody\">\r\n                      <div className=\"FLPNAText\">\r\n                        {t(\"employerFavouriteListProfile.notAvailable\")}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n            {userData.video != \"\" && (\r\n              <div className=\"rows\">\r\n                <div className=\"FLPAboutCandidateHeader\">\r\n                  <h4\r\n                    style={{\r\n                      color: secondaryColor,\r\n                    }}\r\n                  >\r\n                    {t(\"employerFavouriteListProfile.uploadedVideo\")}:\r\n                  </h4>\r\n                </div>\r\n                <div className=\"FLPAboutCandidateBody FLPVideoBox\">\r\n                  <ReactPlayer\r\n                    url={userData.video}\r\n                    controls={true}\r\n                    width={250}\r\n                    height={250}\r\n                    allowfullscreen={true}\r\n                  />\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <Footer />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FavouriteListProfile;\r\n"],"names":["FavouriteListProfile","_userData$email_addre","_userData$contact","_userData$education","_userData$experience","_userData$profReg","loading","setLoading","useState","favouriteListProfileData","setFavouriteListProfileData","userData","setUserData","userEducation","setUserEducation","oldImages","setOldImages","oldDocs","setOldDocs","mailReply","setMailReply","subject","message","emailFiles","errors","setErrors","selectedFileName","setSelectedFileName","viewButtonEmailData","setViewButtonEmailData","viewButtonContactData","setViewButtonContactData","viewEmail","setViewEmail","viewContact","setViewContact","t","i18n","useTranslation","slug","useParams","tokenKey","Cookies","navigate","useNavigate","primaryColor","secondaryColor","hoverSearchColor","setHoverSearchColor","hoverUploadCVColor","setHoverUploadCVColor","getData","async","response","axios","BaseApi","headers","key","ApiKey","token","data","status","showOldImages","showOldDocs","userdetails","Swal","title","icon","confirmButtonText","text","error","setTimeout","window","location","reload","console","log","docDownloadPath","setDocDownloadPath","downloadActive","setDownloadActive","fileName","setFileName","handleDocDownload","path","doc","useEffect","link","document","createElement","style","display","href","download","body","appendChild","click","removeChild","handleChange","e","name","value","target","prev","setMailSent","imagePath","setImagePath","imageDownloadActive","setImageDownloadActive","handleImageDownload","mailSent","emailViewed","setEmailViewed","contactViewed","setContactViewed","scrollTo","_jsxs","_Fragment","children","_jsx","NavBar","className","class","id","tabindex","first_name","last_name","type","for","placeholder","onChange","multiple","files","Array","from","fileNames","map","file","Promise","all","resolve","reject","reader","FileReader","onload","event","result","onerror","readAsDataURL","convertFileToBase64","then","base64Array","catch","backgroundColor","border","onMouseEnter","handleSearchMouseEnter","onMouseLeave","handleSearchMouseLeave","onClick","newErrors","Object","keys","length","showCancelButton","cancelButtonText","isConfirmed","updatedReply","formData","FormData","forEach","index","append","fileInput","getElementById","handleReply","profile_image","src","alt","color","Link","fav_status","handleFavourie","to","history","back","email","email_address","includes","contact","total_exp","skills","entries","_ref","val","education","i","course_name","specialization_name","basic_university","basic_year","experience","company_name","industry","functional_area","role","designation","from_year","to_year","profReg","registration_name","company_about","HTMLReactParser","is_downloadable","image","image_name","handleFirstTimeImageDownload","_i$doc","substring","_i$doc2","handleFirstTimeDownload","video","ReactPlayer","url","controls","width","height","allowfullscreen","Footer"],"sourceRoot":""}