{"version":3,"file":"static/js/2455.27ab10f7.chunk.js","mappings":"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","sources":["Components/adminpanel/Manage Newsletter/APAddNewsletter.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport APNavBar from \"../Elements/APNavBar\";\r\nimport APSidebar from \"../APSidebar/APSidebar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Link from \"@mui/material/Link\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport BaseApi from \"../../api/BaseApi\";\r\nimport ApiKey from \"../../api/ApiKey\";\r\nimport Swal from \"sweetalert2\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport JoditEditor from \"jodit-react\";\r\nimport { useRef } from \"react\";\r\nimport Cookies from \"js-cookie\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\"; // import styles\r\nimport APFooter from \"../Elements/APFooter\";\r\nconst APAddNewsletter = () => {\r\n  const editor = useRef(null);\r\n\r\n  const [userData, setUserData] = useState({\r\n    subject: \"\",\r\n    message: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    subject: \"\",\r\n    message: \"\",\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const tokenKey = Cookies.get(\"token\");\r\n  const adminID = Cookies.get(\"adminID\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUserData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      [name]: \"\",\r\n    }));\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      const newErrors = {};\r\n\r\n      if (userData.subject === \"\") {\r\n        newErrors.subject = \"Subject is required\";\r\n        window.scrollTo(0, 0);\r\n      }\r\n      if (userData.message === \"\") {\r\n        newErrors.message = \"Message is required\";\r\n        window.scrollTo(0, 0);\r\n      }\r\n\r\n      setErrors(newErrors);\r\n\r\n      if (Object.keys(newErrors).length === 0) {\r\n        const confirmationResult = await Swal.fire({\r\n          title: \"Add Newsletter?\",\r\n          text: \"Do you want to Add Newsletter?\",\r\n          icon: \"question\",\r\n          showCancelButton: true,\r\n          confirmButtonText: \"Yes\",\r\n          cancelButtonText: \"No\",\r\n        });\r\n\r\n        if (confirmationResult.isConfirmed) {\r\n          setLoading(true);\r\n\r\n          const response = await axios.post(\r\n            BaseApi + \"/admin/newsletter/admin_add\",\r\n            userData,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                key: ApiKey,\r\n                token: tokenKey,\r\n                adminid: adminID,\r\n              },\r\n            }\r\n          );\r\n\r\n          setLoading(false);\r\n\r\n          if (response.data.status === 200) {\r\n            Swal.fire({\r\n              title: \"Newsletter Added successfully!\",\r\n              icon: \"success\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n            // setUserData({\r\n            //   ...userData,\r\n            //   new_username: \"\",\r\n            //   conf_username: \"\",\r\n            // });\r\n            // window.scrollTo(0, 0);\r\n            navigate(\"/admin/newsletters/index\");\r\n          } else {\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"error\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed\",\r\n        text: \"Could not Add Newsletter. Please try again later!\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Could not change username!\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/admin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      // getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  return (\r\n    <>\r\n      <APNavBar />\r\n      <div className=\"APBasic\">\r\n        <APSidebar />\r\n\r\n        {loading ? (\r\n          <>\r\n            <div className=\"loader-container\"></div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"site-min-height\">\r\n              <div className=\"breadCumb1\" role=\"presentation\">\r\n                <Breadcrumbs\r\n                  aria-label=\"breadcrumb\"\r\n                  separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                >\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/admins/dashboard\")}\r\n                  >\r\n                    Dashboard\r\n                  </Link>\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/newsletters/index\")}\r\n                  >\r\n                    Newsletter\r\n                  </Link>\r\n\r\n                  <Typography color=\"text.primary\">Add Newsletter</Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n              <h2 className=\"adminPageHeading\">Add Newsletter</h2>\r\n              <form className=\"adminForm\">\r\n                <div className=\"mb-4 mt-5\">\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Subject<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example1\"\r\n                      className={`form-control ${\r\n                        errors.subject && \"input-error\"\r\n                      }`}\r\n                      name=\"subject\"\r\n                      placeholder=\"Subject\"\r\n                      value={userData.subject}\r\n                      onChange={handleChange}\r\n                    />\r\n                    {errors.subject && (\r\n                      <div className=\"text-danger\">{errors.subject}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\" mb-5 DashBoardInputBx DashBoardCreatBx APJoditEditor\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                      Message<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    {/* <JoditEditor\r\n                      ref={editor}\r\n                      name=\"message\"\r\n                      value={userData.message}\r\n                      onChange={(message) =>\r\n                        handleChange({\r\n                          target: {\r\n                            value: message,\r\n                            name: \"message\",\r\n                          },\r\n                        })\r\n                      }\r\n                    /> */}\r\n\r\n                    <ReactQuill\r\n                      theme=\"snow\"\r\n                      value={userData.message}\r\n                      onChange={(value) =>\r\n                        handleChange({\r\n                          target: { name: \"message\", value },\r\n                        })\r\n                      }\r\n                      style={{ minHeight: \"250px\", height: \"200px\" }}\r\n                      placeholder=\"Add your text here...\"\r\n                    />\r\n                    {errors.message && (\r\n                      <div className=\"text-danger\">{errors.message}</div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button1\"\r\n                    onClick={handleClick}\r\n                  >\r\n                    SAVE\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button2\"\r\n                    onClick={() =>\r\n                      setUserData({ ...userData, subject: \"\", message: \"\" })\r\n                    }\r\n                  >\r\n                    RESET\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <APFooter />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default APAddNewsletter;\r\n"],"names":["APAddNewsletter","useRef","userData","setUserData","useState","subject","message","errors","setErrors","loading","setLoading","tokenKey","Cookies","adminID","navigate","useNavigate","handleChange","e","name","value","target","prev","useEffect","window","scrollTo","_jsxs","_Fragment","children","_jsx","APNavBar","className","APSidebar","role","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","underline","color","onClick","Typography","class","for","type","id","placeholder","onChange","htmlFor","ReactQuill","theme","style","minHeight","height","async","newErrors","Object","keys","length","Swal","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","isConfirmed","response","axios","BaseApi","headers","key","ApiKey","token","adminid","data","status","error","console","log","APFooter"],"sourceRoot":""}