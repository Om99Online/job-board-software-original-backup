{"version":3,"file":"static/js/1574.7ae2bcb7.chunk.js","mappings":"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","sources":["Components/adminpanel/Jobseekers/APAppliedJobsList.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport APNavBar from \"../Elements/APNavBar\";\r\nimport APSidebar from \"../APSidebar/APSidebar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Link from \"@mui/material/Link\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../../api/BaseApi\";\r\nimport ApiKey from \"../../api/ApiKey\";\r\n// import Swal from \"sweetalert2\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport Cookies from \"js-cookie\";\r\nimport APFooter from \"../Elements/APFooter\";\r\n\r\nconst APAppliedJobsList = () => {\r\n  const [userData, setUserData] = useState([]);\r\n  const [currentLogo, setCurrentLogo] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const tokenKey = Cookies.get(\"token\");\r\n  const adminID = Cookies.get(\"adminID\");\r\n  const [listData, setListData] = useState([]);\r\n  const itemsPerPage = 20;\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [candidates, setCandidates] = useState([]);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { slug } = useParams();\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + `/admin/candidates/applied/${slug}`,\r\n        null, // Pass null as the request body if not required\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n            adminid: adminID,\r\n          },\r\n        }\r\n      );\r\n      setLoading(false);\r\n      setCandidates(response.data.response.candidates);\r\n      setUserData(response.data.response);\r\n      setListData(response.data.response.candidates);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.log(\"Cannot get profile photo data\");\r\n    }\r\n  };\r\n\r\n  // const handleClick = async () => {\r\n  //   try {\r\n  //     if (!logo.logo || logo.logo === null) {\r\n  //       Swal.fire({\r\n  //         title: \"Please select a Logo!\",\r\n  //         icon: \"warning\",\r\n  //         confirmButtonText: \"Close\",\r\n  //       });\r\n  //     } else {\r\n  //       const confirmationResult = await Swal.fire({\r\n  //         title: \"Upload Logo\",\r\n  //         text: \"Do you want to upload this Logo?\",\r\n  //         icon: \"question\",\r\n  //         showCancelButton: true,\r\n  //         confirmButtonText: \"Yes\",\r\n  //         cancelButtonText: \"No\",\r\n  //       });\r\n  //       if (confirmationResult.isConfirmed) {\r\n  //         // setLoading(true);\r\n  //         const response = await axios.post(\r\n  //           BaseApi + \"/admin/uploadLogo\",\r\n  //           logo,\r\n  //           {\r\n  //             headers: {\r\n  //               \"Content-Type\": \"application/json\",\r\n  //               key: ApiKey,\r\n  //               token: tokenKey,\r\n  //             },\r\n  //           }\r\n  //         );\r\n  //         if (response.data.status === 200) {\r\n  //           Swal.fire({\r\n  //             title: \"Logo updated successfully!\",\r\n  //             icon: \"success\",\r\n  //             confirmButtonText: \"Close\",\r\n  //           });\r\n  //           getData();\r\n  //           setLogo({\r\n  //             ...logo,\r\n  //             logo: \"\",\r\n\r\n  //           });\r\n  //           window.scrollTo(0, 0)\r\n  //         } else {\r\n  //           Swal.fire({\r\n  //             title: response.data.message,\r\n  //             icon: \"error\",\r\n  //             confirmButtonText: \"Close\",\r\n  //           });\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //   } catch (error) {\r\n  //     setLoading(false);\r\n  //     Swal.fire({\r\n  //       title: \"Could not update logo. Please try after some time!\",\r\n  //       icon: \"error\",\r\n  //       confirmButtonText: \"Close\",\r\n  //     });\r\n  //     console.log(\"Could not update photo!\");\r\n  //   }\r\n  // };\r\n\r\n  //   const handleFileUpload1 = async (e) => {\r\n  //     const file = e.target.files[0];\r\n  //     const base64 = await convertToBase64(file);\r\n  //     setLogo({ ...logo, logo: base64 });\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/admin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  const sortAndFilterData = (array, key, direction, query) => {\r\n    const sortedAndFilteredArray = [...array]\r\n      .filter(\r\n        (item) =>\r\n          item.jobtitle?.toLowerCase().includes(query) ||\r\n          item.created?.toLowerCase().includes(query)\r\n      )\r\n      .sort((a, b) => {\r\n        if (a[key] < b[key]) {\r\n          return direction === \"ascending\" ? -1 : 1;\r\n        }\r\n        if (a[key] > b[key]) {\r\n          return direction === \"ascending\" ? 1 : -1;\r\n        }\r\n        return 0;\r\n      });\r\n    return sortedAndFilteredArray;\r\n  };\r\n  const [sortConfig, setSortConfig] = useState({\r\n    key: \"\",\r\n    direction: \"ascending\",\r\n  });\r\n  const [symbol, setSymbol] = useState(\"ðŸ”º\");\r\n\r\n  const sortedAndFilteredData = sortAndFilterData(\r\n    listData,\r\n    sortConfig.key,\r\n    sortConfig.direction,\r\n    searchQuery\r\n  );\r\n\r\n  const filteredData = listData.filter((item) => {\r\n    const searchString = searchQuery.toLowerCase();\r\n    return (\r\n      item.jobtitle?.toLowerCase().includes(searchString) ||\r\n      item.created?.toLowerCase().includes(searchString)\r\n    );\r\n  });\r\n\r\n  const indexOfLastItem = currentPage * itemsPerPage;\r\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n  const currentItems = sortedAndFilteredData.slice(\r\n    indexOfFirstItem,\r\n    indexOfLastItem\r\n  );\r\n\r\n  const totalPages = Math.ceil(sortedAndFilteredData.length / itemsPerPage);\r\n\r\n  const pageNumbers = [];\r\n  for (let i = 1; i <= totalPages; i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n  // useEffect(() => {\r\n  //   // Check if tokenKey is not present\r\n  //   if (!tokenKey) {\r\n  //     // Redirect to the home page\r\n  //     navigate(\"/admin\");\r\n  //   } else {\r\n  //     // TokenKey is present, fetch data or perform other actions\r\n  //     getData();\r\n  //     window.scrollTo(0, 0);\r\n  //   }\r\n  // }, [tokenKey, navigate]);\r\n\r\n  const handleColumnClick = (key) => {\r\n    let direction = \"ascending\";\r\n    if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\r\n      direction = \"descending\";\r\n      setSymbol(\"ðŸ”»\");\r\n    } else {\r\n      setSymbol(\"ðŸ”º\");\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n  const handleSearchChange = (e) => {\r\n    const newQuery = e.target.value.toLowerCase();\r\n    setSearchQuery(newQuery);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <APNavBar />\r\n      <div className=\"APBasic\">\r\n        <APSidebar />\r\n\r\n        {loading ? (\r\n          <>\r\n            <div className=\"loader-container\"></div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"site-min-height\">\r\n              <div className=\"breadCumb1\" role=\"presentation\">\r\n                <Breadcrumbs\r\n                  aria-label=\"breadcrumb\"\r\n                  separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                >\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/admins/dashboard\")}\r\n                  >\r\n                    Dashboard\r\n                  </Link>\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/candidates\")}\r\n                  >\r\n                    Jobseekers\r\n                  </Link>\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/candidates\")}\r\n                  >\r\n                    {userData.first_name} {userData.last_name}\r\n                  </Link>\r\n                  <Typography color=\"text.primary\">\r\n                    Applied Jobs List\r\n                  </Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n              <h2 className=\"adminPageHeading mt-4\">Applied Jobs List</h2>\r\n              <form className=\"adminForm\">\r\n                <div className=\"mb-4 mt-5\">\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    {candidates.length > 0 ? (\r\n                      <>\r\n                        <div className=\"manageSubadminPart1\">\r\n                          <h4>\r\n                            No. of Results {indexOfFirstItem + 1}-\r\n                            {Math.min(\r\n                              indexOfLastItem,\r\n                              filteredData.length || listData.length\r\n                            )}{\" \"}\r\n                            of {listData.length}\r\n                          </h4>\r\n                        </div>\r\n\r\n                        <div className=\"manageSubadminPart2\">\r\n                          <table class=\"table\">\r\n                            <thead>\r\n                              <tr>\r\n                                <th\r\n                                  onClick={() => handleColumnClick(\"jobtitle\")}\r\n                                >\r\n                                  Job Title {symbol}\r\n                                </th>\r\n                                <th>Job Type</th>\r\n                                <th\r\n                                  onClick={() => handleColumnClick(\"created\")}\r\n                                >\r\n                                  Applied Date {symbol}\r\n                                </th>\r\n                                <th>Status</th>\r\n\r\n                                {/* <th scope=\"col\">Action</th> */}\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              {currentItems.map((i) => {\r\n                                return (\r\n                                  <>\r\n                                    <tr>\r\n                                      <td>{i.jobtitle}</td>\r\n                                      <td>{i.jobwork_type}</td>\r\n                                      <td>{i.created}</td>\r\n                                      <td>{i.apply_status}</td>\r\n                                    </tr>\r\n                                  </>\r\n                                );\r\n                              })}\r\n                            </tbody>\r\n                          </table>\r\n                        </div>\r\n                      </>\r\n                    ) : (\r\n                      <div className=\"appliedJobListNoData\">\r\n                        No Records Found\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  {/* <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary button1\"\r\n                  onClick={handleClick}\r\n                >\r\n                  UPLOAD\r\n                </button>\r\n                <button type=\"button\" className=\"btn btn-primary button2\" onClick={() => navigate(\"/admin/candidates/index\")}>\r\n                  CANCEL\r\n                </button> */}\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <APFooter />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default APAppliedJobsList;\r\n"],"names":["APAppliedJobsList","userData","setUserData","useState","currentLogo","setCurrentLogo","loading","setLoading","tokenKey","Cookies","adminID","listData","setListData","searchQuery","setSearchQuery","currentPage","setCurrentPage","candidates","setCandidates","navigate","useNavigate","slug","useParams","useEffect","async","response","axios","BaseApi","headers","key","ApiKey","token","adminid","data","error","console","log","getData","window","scrollTo","sortConfig","setSortConfig","direction","symbol","setSymbol","sortedAndFilteredData","array","query","filter","item","_item$jobtitle","_item$created","jobtitle","toLowerCase","includes","created","sort","a","b","sortAndFilterData","filteredData","_item$jobtitle2","_item$created2","searchString","indexOfLastItem","indexOfFirstItem","currentItems","slice","totalPages","Math","ceil","length","pageNumbers","i","push","handleColumnClick","_jsxs","_Fragment","children","_jsx","APNavBar","className","APSidebar","role","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","underline","color","onClick","first_name","last_name","Typography","class","min","map","jobwork_type","apply_status","APFooter"],"sourceRoot":""}