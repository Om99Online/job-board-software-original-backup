{"version":3,"file":"static/js/3710.d12a8d7c.chunk.js","mappings":"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","sources":["Components/adminpanel/Setting/APEditEmailSetting.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport APNavBar from \"../Elements/APNavBar\";\r\nimport APSidebar from \"../APSidebar/APSidebar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Link from \"@mui/material/Link\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../../api/BaseApi\";\r\nimport ApiKey from \"../../api/ApiKey\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport Cookies from \"js-cookie\";\r\nimport APFooter from \"../Elements/APFooter\";\r\n\r\nconst APEditEmailSetting = () => {\r\n  const [userData, setUserData] = useState({\r\n    mail_value: \"\",\r\n  });\r\n\r\n  const [errors, setErrors] = useState({\r\n    mail_value: \"\",\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const tokenKey = Cookies.get(\"token\");\r\n  const adminID = Cookies.get(\"adminID\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { slug } = useParams();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUserData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      [name]: \"\",\r\n    }));\r\n  };\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + `/admin/settings/editMails/${slug}`,\r\n        null,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n            adminid: adminID,\r\n          },\r\n        }\r\n      );\r\n      setLoading(false);\r\n      setUserData(response.data.response);\r\n    } catch (error) {\r\n      console.log(\"Error at chnage username at Admin panel\");\r\n    }\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      const newErrors = {};\r\n\r\n      if (userData.mail_value === \"\") {\r\n        newErrors.mail_value = \"Email is required\";\r\n        window.scrollTo(0, 0);\r\n      } else if (!isValidEmail(userData.mail_value)) {\r\n        newErrors.mail_value = \"Invalid email format\";\r\n        window.scrollTo(0, 0);\r\n      }\r\n      setErrors(newErrors);\r\n      // Function to validate email format\r\n      function isValidEmail(email) {\r\n        // Use a regular expression to validate email format\r\n        const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\r\n        return emailPattern.test(email);\r\n      }\r\n\r\n      if (Object.keys(newErrors).length === 0) {\r\n        const confirmationResult = await Swal.fire({\r\n          title: \"Update?\",\r\n          text: \"Do you want to update email setting?\",\r\n          icon: \"question\",\r\n          showCancelButton: true,\r\n          confirmButtonText: \"Yes\",\r\n          cancelButtonText: \"No\",\r\n        });\r\n\r\n        if (confirmationResult.isConfirmed) {\r\n          setLoading(true);\r\n\r\n          const response = await axios.post(\r\n            BaseApi + `/admin/settings/editMails/${slug}`,\r\n            userData,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                key: ApiKey,\r\n                token: tokenKey,\r\n                adminid: adminID,\r\n              },\r\n            }\r\n          );\r\n\r\n          setLoading(false);\r\n\r\n          if (response.data.status === 200) {\r\n            Swal.fire({\r\n              title: \"Email Setting updated successfully!\",\r\n              icon: \"success\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n            getData();\r\n            // setUserData({\r\n            //   ...userData,\r\n            //   new_username: \"\",\r\n            //   conf_username: \"\",\r\n            // });\r\n            // window.scrollTo(0, 0)\r\n            navigate(\"/admin/settings/manageMails\");\r\n          } else {\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"error\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed\",\r\n        text: \"Could not update. Please try again later!\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Could not update email setting!\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/admin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  return (\r\n    <>\r\n      <APNavBar />\r\n      <div className=\"APBasic\">\r\n        <APSidebar />\r\n\r\n        {loading ? (\r\n          <>\r\n            <div className=\"loader-container\"></div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"site-min-height\">\r\n              <div className=\"breadCumb1\" role=\"presentation\">\r\n                <Breadcrumbs\r\n                  aria-label=\"breadcrumb\"\r\n                  separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                >\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/admins/dashboard\")}\r\n                  >\r\n                    Dashboard\r\n                  </Link>\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/settings/manageMails\")}\r\n                  >\r\n                    Manage Email Settings\r\n                  </Link>\r\n                  <Typography color=\"text.primary\">\r\n                    Edit Email Setting\r\n                  </Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n\r\n              <h2 className=\"adminPageHeading\">Edit Email Settings</h2>\r\n              <form className=\"adminForm\">\r\n                <div className=\"mb-4 mt-5\">\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Email Name<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example1\"\r\n                      className=\"form-control\"\r\n                      name=\"mail_name\"\r\n                      placeholder=\"Email Name\"\r\n                      value={userData.mail_name}\r\n                      // onChange={handleChange}\r\n                      disabled\r\n                    />\r\n                  </div>\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Email Address<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example1\"\r\n                      className={`form-control ${\r\n                        errors.mail_value && \"input-error\"\r\n                      }`}\r\n                      name=\"mail_value\"\r\n                      placeholder=\"Email Address\"\r\n                      value={userData.mail_value}\r\n                      onChange={handleChange}\r\n                    />\r\n                    {errors.mail_value && (\r\n                      <div className=\"text-danger\">{errors.mail_value}</div>\r\n                    )}\r\n                  </div>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button1\"\r\n                    onClick={handleClick}\r\n                  >\r\n                    SAVE\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button2\"\r\n                    onClick={() => navigate(\"/admin/settings/manageMails\")}\r\n                  >\r\n                    CANCEL\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <APFooter />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default APEditEmailSetting;\r\n"],"names":["APEditEmailSetting","userData","setUserData","useState","mail_value","errors","setErrors","loading","setLoading","tokenKey","Cookies","adminID","navigate","useNavigate","slug","useParams","getData","async","response","axios","BaseApi","headers","key","ApiKey","token","adminid","data","error","console","log","useEffect","window","scrollTo","_jsxs","_Fragment","children","_jsx","APNavBar","className","APSidebar","role","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","underline","color","onClick","Typography","class","for","type","id","name","placeholder","value","mail_name","disabled","onChange","e","target","prev","newErrors","isValidEmail","email","test","Object","keys","length","Swal","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","isConfirmed","status","message","APFooter"],"sourceRoot":""}