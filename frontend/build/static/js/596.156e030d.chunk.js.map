{"version":3,"file":"static/js/596.156e030d.chunk.js","mappings":"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","sources":["Components/adminpanel/Announcements/APAddAnnouncement.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport APNavBar from \"../Elements/APNavBar\";\r\nimport APSidebar from \"../APSidebar/APSidebar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Link from \"@mui/material/Link\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../../api/BaseApi\";\r\nimport ApiKey from \"../../api/ApiKey\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Cookies from \"js-cookie\";\r\nimport APFooter from \"../Elements/APFooter\";\r\n\r\nconst APAddAnnouncement = () => {\r\n  const [userData, setUserData] = useState({\r\n    name: \"\",\r\n    url: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    name: \"\",\r\n    url: \"\",\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const tokenKey = Cookies.get(\"token\");\r\n  const adminID = Cookies.get(\"adminID\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUserData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      [name]: \"\",\r\n    }));\r\n  };\r\n\r\n  // const getData = async () => {\r\n  //   try {\r\n  //     const response = await axios.post(\r\n  //       BaseApi + \"/admin/announcement/admin_add\",\r\n  //       null,\r\n  //       {\r\n  //         headers: {\r\n  //           \"Content-Type\": \"application/json\",\r\n  //           key: ApiKey,\r\n  //           token: tokenKey,\r\n  //         },\r\n  //       }\r\n  //     );\r\n  //     setUserData(response.data.response);\r\n  //   } catch (error) {\r\n  //     console.log(\"Error at chnage username at Admin panel\");\r\n  //   }\r\n  // };\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      const newErrors = {};\r\n\r\n      if (userData.name === \"\") {\r\n        newErrors.name = \"Announcement Name is required\";\r\n      }\r\n\r\n      if (userData.url === \"\") {\r\n        newErrors.url = \"URL is required\";\r\n        window.scrollTo(0, 0);\r\n      } else {\r\n        // Regular expression pattern to match a valid URL\r\n        const urlFormat = /^(https?:\\/\\/)?(www\\.)?[\\w.-]+\\.[a-z]{2,5}(\\/\\S*)?$/i;\r\n\r\n        if (!urlFormat.test(userData.url)) {\r\n          newErrors.url = \"Invalid URL format\";\r\n          window.scrollTo(0, 0);\r\n        }\r\n      }\r\n      setErrors(newErrors);\r\n\r\n      if (Object.keys(newErrors).length === 0) {\r\n        const confirmationResult = await Swal.fire({\r\n          title: \"Add Announcement?\",\r\n          text: \"Do you want to Add this Announcement?\",\r\n          icon: \"question\",\r\n          showCancelButton: true,\r\n          confirmButtonText: \"Yes\",\r\n          cancelButtonText: \"No\",\r\n        });\r\n\r\n        if (confirmationResult.isConfirmed) {\r\n          setLoading(true);\r\n\r\n          const response = await axios.post(\r\n            BaseApi + \"/admin/announcement/admin_add\",\r\n            userData,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                key: ApiKey,\r\n                token: tokenKey,\r\n                adminid: adminID,\r\n              },\r\n            }\r\n          );\r\n\r\n          setLoading(false);\r\n\r\n          if (response.data.status === 200) {\r\n            Swal.fire({\r\n              title: \"Announcement added successfully!\",\r\n              icon: \"success\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n\r\n            navigate(\"/admin/announcements\");\r\n          } else {\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"error\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed\",\r\n        text: \"Could not add announcement. Please try again later!\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Could not change username!\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/admin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      // getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  return (\r\n    <>\r\n      <APNavBar />\r\n      <div className=\"APBasic\">\r\n        <APSidebar />\r\n\r\n        {loading ? (\r\n          <>\r\n            <div className=\"loader-container\"></div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"site-min-height\">\r\n              <div className=\"breadCumb1\" role=\"presentation\">\r\n                <Breadcrumbs\r\n                  aria-label=\"breadcrumb\"\r\n                  separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                >\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/admins/dashboard\")}\r\n                  >\r\n                    Dashboard\r\n                  </Link>\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/announcements\")}\r\n                  >\r\n                    Announcement List\r\n                  </Link>\r\n\r\n                  <Typography color=\"text.primary\">Add Announcement</Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n\r\n              <h2 className=\"adminPageHeading\">Add Announcement</h2>\r\n              <form className=\"adminForm\">\r\n                <div className=\"mb-4 mt-5\">\r\n                  <div className=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Announcement Name<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example1\"\r\n                      className={`form-control ${errors.name && \"input-error\"}`}\r\n                      name=\"name\"\r\n                      placeholder=\"Announcement Name\"\r\n                      value={userData.name}\r\n                      onChange={handleChange}\r\n                    />\r\n                    {errors.name && (\r\n                      <div className=\"text-danger\">{errors.name}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      URL<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example1\"\r\n                      className={`form-control ${errors.url && \"input-error\"}`}\r\n                      name=\"url\"\r\n                      placeholder=\"URL\"\r\n                      value={userData.url}\r\n                      onChange={handleChange}\r\n                    />\r\n                    {errors.url && (\r\n                      <div className=\"text-danger\">{errors.url}</div>\r\n                    )}\r\n\r\n                    <div id=\"emailHelp\" class=\"form-text\">\r\n                      (Enter URL Like http://www.google.com)\r\n                    </div>\r\n                  </div>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button1\"\r\n                    onClick={handleClick}\r\n                  >\r\n                    SAVE\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button2\"\r\n                    onClick={() => setUserData({...userData, name: \"\", url: \"\"})}\r\n                  >\r\n                    RESET\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <APFooter />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default APAddAnnouncement;\r\n"],"names":["APAddAnnouncement","userData","setUserData","useState","name","url","errors","setErrors","loading","setLoading","tokenKey","Cookies","adminID","navigate","useNavigate","handleChange","e","value","target","prev","useEffect","window","scrollTo","_jsxs","_Fragment","children","_jsx","APNavBar","className","APSidebar","role","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","underline","color","onClick","Typography","for","class","type","id","placeholder","onChange","async","newErrors","test","Object","keys","length","Swal","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","isConfirmed","response","axios","BaseApi","headers","key","ApiKey","token","adminid","data","status","message","error","console","log","APFooter"],"sourceRoot":""}