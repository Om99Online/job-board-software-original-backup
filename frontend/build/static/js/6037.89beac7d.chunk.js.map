{"version":3,"file":"static/js/6037.89beac7d.chunk.js","mappings":"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","sources":["Components/element/Companies.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Footer from \"./Footer\";\r\nimport { Link } from \"react-router-dom\";\r\nimport NavBar from \"./NavBar\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../api/BaseApi\";\r\nimport Swal from \"sweetalert2\";\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\nimport Cookies from \"js-cookie\";\r\nimport HTMLReactParser from \"html-react-parser\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst Companies = () => {\r\n  const [formData, setFormData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    subject: \"\",\r\n    message: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    subject: \"\",\r\n    message: \"\",\r\n  });\r\n  let captchaKey = Cookies.get(\"captchaKey\");\r\n  const [loading, setLoading] = useState(false);\r\n  const recaptchaLanguage = Cookies.get(\"selectedLanguage\");\r\n  const currentLanguage = Cookies.get(\"selectedLanguage\") || \"en\";\r\n  const [recaptchaKey, setRecaptchaKey] = useState(captchaKey);\r\n  const [recaptchaVisible, setRecaptchaVisible] = useState(true);\r\n  const [isCaptchaVerified, setIsCaptchaVerified] = useState(false);\r\n  const [t, i18n] = useTranslation(\"global\");\r\n\r\n  let primaryColor = Cookies.get(\"primaryColor\");\r\n  let secondaryColor = Cookies.get(\"secondaryColor\");\r\n\r\n\r\n  const [hoverColor, setHoverColor] = useState(false);\r\n\r\n  const handleMouseEnter = () => {\r\n    setHoverColor(true);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoverColor(false);\r\n  };\r\n\r\n  const [pageContent, setPageContent] = useState([]);\r\n  const handleRecaptchaReset = () => {\r\n    setRecaptchaVisible(false);\r\n    setRecaptchaKey(generateRecaptchaKey());\r\n    setTimeout(() => {\r\n      setRecaptchaVisible(true);\r\n    }, 0); // Using setTimeout to unmount and then mount the ReCAPTCHA\r\n  };\r\n\r\n  const generateRecaptchaKey = () => {\r\n    return Math.random().toString(36).substring(2, 15);\r\n  };\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + `/page/staticpage/companies`,\r\n        { language: currentLanguage }\r\n      );\r\n      setLoading(false);\r\n      setPageContent(response.data.response);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.log(\"Cannot get data of companies page\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      [name]: \"\",\r\n    }));\r\n  };\r\n\r\n  const handleClick = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const newErrors = {};\r\n\r\n      if (formData.name === \"\") {\r\n        newErrors.name = t(\"messageForm.nameRequired\");\r\n      }\r\n      if (formData.email === \"\") {\r\n        newErrors.email = t(\"messageForm.emailRequired\");\r\n      } else if (!isValidEmail(formData.email)) {\r\n        newErrors.email = t(\"messageForm.invalidEmail\");\r\n      }\r\n      if (formData.subject === \"\") {\r\n        newErrors.subject = t(\"messageForm.subjectRequired\");\r\n      }\r\n      if (formData.message === \"\") {\r\n        newErrors.message = t(\"messageForm.messageRequired\");\r\n      }\r\n      if (!isCaptchaVerified) {\r\n        newErrors.captcha = t(\"messageForm.captchaRequired\");\r\n      }\r\n      setErrors(newErrors);\r\n\r\n      // Function to validate email format\r\n      function isValidEmail(email) {\r\n        // Use a regular expression to validate email format\r\n        const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\r\n        return emailPattern.test(email);\r\n      }\r\n\r\n      if (Object.keys(newErrors).length === 0) {\r\n        if (isCaptchaVerified) {\r\n          const response = await axios.post(\r\n            BaseApi + \"/page/contact-us\",\r\n            formData\r\n          );\r\n          // Reset the reCAPTCHA\r\n          handleRecaptchaReset();\r\n          if (response.data.status === 200) {\r\n            Swal.fire({\r\n              title: t(\"messageForm.messageSuccessTitle\"),\r\n              icon: \"success\",\r\n              confirmButtonText: t(\"messageForm.close\"),\r\n            });\r\n            setFormData({\r\n              ...formData,\r\n              name: \"\",\r\n              email: \"\",\r\n              subject: \"\",\r\n              message: \"\",\r\n            });\r\n          } else if (response.data.status === 500) {\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"error\",\r\n              confirmButtonText: t(\"messageForm.close\"),\r\n            });\r\n          } else {\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"error\",\r\n              confirmButtonText: t(\"messageForm.close\"),\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      Swal.fire({\r\n        title: t(\"messageForm.messageFailedTitle\"),\r\n        text: t(\"messageForm.messageFailedTxt\"),\r\n        icon: \"error\",\r\n        confirmButtonText: t(\"messageForm.close\"),\r\n      });\r\n    }\r\n    console.log(formData);\r\n  };\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      {loading ? (\r\n        <div className=\"loader-container\"></div>\r\n      ) : (\r\n        <>\r\n          <div className=\"privacyPolicy\">\r\n            <div className=\"text-center PPSection1\">\r\n              <h1 className=\"\">{pageContent.page_title}</h1>\r\n              <h6 className=\"text-muted fw-normal\">\r\n                {\" \"}\r\n                <Link to=\"/\" style={{ color: \"grey\" }}>\r\n                  {t(\"navHeaders.home\")}\r\n                </Link>{\" \"}\r\n                /{pageContent.page_title}\r\n              </h6>\r\n            </div>\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                  <div className=\"upperPart\">\r\n                    <p>\r\n                      {pageContent.page_description &&\r\n                        HTMLReactParser(pageContent.page_description)}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                  <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                      <h2 className=\"text-center pb-4 pt-2\">\r\n                        {t(\"messageForm.sendusa\")}\r\n                        <span className=\"textGradient\">\r\n                          {\" \"}\r\n                          <span className=\"SubHaddingTxt\">\r\n                            {\" \"}\r\n                            {t(\"messageForm.message\")}\r\n                          </span>\r\n                        </span>\r\n                      </h2>\r\n                      <form>\r\n                        <div className=\"mb-4\">\r\n                          <input\r\n                            type=\"text\"\r\n                            className={`form-control ${\r\n                              errors.name && \"input-error\"\r\n                            }`}\r\n                            id=\"exampleInputEmail1\"\r\n                            aria-describedby=\"emailHelp\"\r\n                            name=\"name\"\r\n                            value={formData.name}\r\n                            placeholder={t(\"messageForm.namePlaceholder\")}\r\n                            onChange={handleChange}\r\n                          />\r\n                          {errors.name && (\r\n                            <div className=\"text-danger\">{errors.name}</div>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"mb-4\">\r\n                          <input\r\n                            type=\"email\"\r\n                            className={`form-control ${\r\n                              errors.email && \"input-error\"\r\n                            }`}\r\n                            id=\"exampleInputEmail1\"\r\n                            aria-describedby=\"emailHelp\"\r\n                            name=\"email\"\r\n                            value={formData.email}\r\n                            placeholder={t(\"messageForm.emailPlaceholder\")}\r\n                            onChange={handleChange}\r\n                          />\r\n                          {errors.email && (\r\n                            <div className=\"text-danger\">{errors.email}</div>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"mb-4\">\r\n                          <select\r\n                            className={`form-select ${\r\n                              errors.subject && \"input-error\"\r\n                            }`}\r\n                            aria-label=\"Default select example\"\r\n                            value={formData.subject}\r\n                            name=\"subject\"\r\n                            onChange={handleChange}\r\n                          >\r\n                            <option>\r\n                              {t(\"messageForm.selectPlaceholder\")}\r\n                            </option>\r\n                            <option value=\"1\">\r\n                              {t(\"messageForm.messageFormSelectOption1\")}\r\n                            </option>\r\n                            <option value=\"2\">\r\n                              {t(\"messageForm.messageFormSelectOption2\")}\r\n                            </option>\r\n                            <option value=\"3\">\r\n                              {t(\"messageForm.messageFormSelectOption3\")}\r\n                            </option>\r\n                            <option value=\"3\">\r\n                              {t(\"messageForm.messageFormSelectOption4\")}\r\n                            </option>\r\n                            <option value=\"3\">\r\n                              {t(\"messageForm.messageFormSelectOption5\")}\r\n                            </option>\r\n                          </select>\r\n                          {errors.subject && (\r\n                            <div className=\"text-danger\">{errors.subject}</div>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"mb-4\">\r\n                          <textarea\r\n                            className={`form-control ${\r\n                              errors.message && \"input-error\"\r\n                            }`}\r\n                            id=\"exampleFormControlTextarea1\"\r\n                            rows=\"5\"\r\n                            name=\"message\"\r\n                            value={formData.message}\r\n                            placeholder={t(\"messageForm.descPlaceholder\")}\r\n                            onChange={handleChange}\r\n                          ></textarea>\r\n                          {errors.message && (\r\n                            <div className=\"text-danger\">{errors.message}</div>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"reCaptchaLogin mb-4\">\r\n                          <ReCAPTCHA\r\n                            key={recaptchaKey}\r\n                            sitekey={captchaKey}\r\n                            hl={recaptchaLanguage}\r\n                            \r\n                            onChange={(value) => setIsCaptchaVerified(value)}\r\n                          />\r\n                          {errors.captcha && (\r\n                            <div className=\"text-danger\">{errors.captcha}</div>\r\n                          )}\r\n                        </div>\r\n                        <button\r\n                          type=\"submit\"\r\n                          className=\"btn w-100\"\r\n                          onClick={handleClick}\r\n                          style={{\r\n                            backgroundColor: `${\r\n                              secondaryColor &&\r\n                              (hoverColor ? secondaryColor : primaryColor)\r\n                            }`,\r\n                          }}\r\n                          onMouseEnter={handleMouseEnter}\r\n                          onMouseLeave={handleMouseLeave}\r\n                        >\r\n                          {t(\"messageForm.sendMessageButton\")}\r\n                        </button>\r\n                      </form>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Footer />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Companies;\r\n"],"names":["Companies","formData","setFormData","useState","name","email","subject","message","errors","setErrors","captchaKey","Cookies","loading","setLoading","recaptchaLanguage","currentLanguage","recaptchaKey","setRecaptchaKey","recaptchaVisible","setRecaptchaVisible","isCaptchaVerified","setIsCaptchaVerified","t","i18n","useTranslation","primaryColor","secondaryColor","hoverColor","setHoverColor","pageContent","setPageContent","generateRecaptchaKey","Math","random","toString","substring","useEffect","async","response","axios","BaseApi","language","data","error","console","log","getData","handleChange","e","value","target","prevData","prev","window","scrollTo","_jsxs","_Fragment","children","_jsx","NavBar","className","page_title","Link","to","style","color","page_description","HTMLReactParser","type","id","placeholder","onChange","rows","ReCAPTCHA","sitekey","hl","captcha","onClick","preventDefault","newErrors","isValidEmail","test","Object","keys","length","setTimeout","status","Swal","title","icon","confirmButtonText","text","backgroundColor","onMouseEnter","handleMouseEnter","onMouseLeave","handleMouseLeave","Footer"],"sourceRoot":""}