{"version":3,"file":"static/js/9264.20a28ad0.chunk.js","mappings":"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","sources":["Components/adminpanel/Sliders/APAddSlider.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport APNavBar from \"../Elements/APNavBar\";\r\nimport APSidebar from \"../APSidebar/APSidebar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../../api/BaseApi\";\r\nimport ApiKey from \"../../api/ApiKey\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport Cookies from \"js-cookie\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport APFooter from \"../Elements/APFooter\";\r\n\r\nconst APAddSlider = () => {\r\n  const [userData, setUserData] = useState({\r\n    title: \"\",\r\n    image: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    title: \"\",\r\n    image: \"\",\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const tokenKey = Cookies.get(\"token\");\r\n  const adminID = Cookies.get(\"adminID\");\r\n  const location = useLocation();\r\n  const pathname = location.pathname;\r\n  console.log(pathname);\r\n\r\n  const navigate = useNavigate();\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n\r\n\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUserData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      [name]: \"\",\r\n    }));\r\n    \r\n  };\r\n\r\n  // const getData = async () => {\r\n  //   try {\r\n  //     const response = await axios.post(\r\n  //       BaseApi + \"/admin/changeusername\",\r\n  //       null,\r\n  //       {\r\n  //         headers: {\r\n  //           \"Content-Type\": \"application/json\",\r\n  //           key: ApiKey,\r\n  //           token: tokenKey,\r\n  //         },\r\n  //       }\r\n  //     );\r\n  //     setUserData(response.data.response);\r\n  //   } catch (error) {\r\n  //     console.log(\"Error at chnage username at Admin panel\");\r\n  //   }\r\n  // };\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      const newErrors = {};\r\n\r\n      if (userData.title === \"\") {\r\n        newErrors.title = \"Slider Title is required\";\r\n        window.scrollTo(0, 0);\r\n      }\r\n\r\n      if (userData.image === \"\") {\r\n        newErrors.image = \"Slider Image is required\";\r\n        window.scrollTo(0, 0);\r\n      }\r\n      \r\n      setErrors(newErrors);\r\n\r\n      if (Object.keys(newErrors).length === 0) {\r\n        const confirmationResult = await Swal.fire({\r\n          title: \"Add Slider?\",\r\n          text: \"Do you want to Add this Slider?\",\r\n          icon: \"question\",\r\n          showCancelButton: true,\r\n          confirmButtonText: \"Yes\",\r\n          cancelButtonText: \"No\",\r\n        });\r\n\r\n        if (confirmationResult.isConfirmed) {\r\n          setLoading(true);\r\n\r\n          const response = await axios.post(\r\n            BaseApi + \"/admin/slider/admin_add\",\r\n            userData,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                key: ApiKey,\r\n                token: tokenKey,\r\n                adminid: adminID,\r\n              },\r\n            }\r\n          );\r\n\r\n          setLoading(false);\r\n\r\n          if (response.data.status === 200) {\r\n            Swal.fire({\r\n              title: \"Slider added successfully!\",\r\n              icon: \"success\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n            // getData();\r\n            setUserData({\r\n              ...userData,\r\n              title: \"\",\r\n              image: \"\",\r\n            });\r\n            window.scrollTo(0, 0);\r\n            navigate(\"/admin/sliders\");\r\n          } else {\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"error\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed\",\r\n        text: \"Could not Add Slider. Please try again later!\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Could not add slider!\", error);\r\n    }\r\n  };\r\n\r\n  const handleFileUpload1 = async (e) => {\r\n    const fileInput = e.target;\r\n    const file = fileInput.files[0];\r\n  \r\n    // Check if the file is selected\r\n    if (file) {\r\n      // Check the file size (in bytes)\r\n      const fileSizeInBytes = file.size;\r\n      const maxSizeInBytes = 800* 1024; // 800 KB\r\n      if (fileSizeInBytes > maxSizeInBytes) {\r\n        Swal.fire({\r\n          title: \"Image size should be under 800 KB\",\r\n          icon: \"warning\",\r\n          confirmButtonText: \"Close\",\r\n        });\r\n        // setErrors({\r\n        //   ...errors,\r\n        //   image: \"Image size should be under 2MB\",\r\n        // });\r\n        // Clear the file input\r\n        fileInput.value = \"\"; // This clears the input\r\n        setSelectedImage(\"\")\r\n        setUserData({ ...userData, image: \"\" });\r\n        return;\r\n      }\r\n  \r\n      // Check image resolution\r\n      const img = new Image();\r\n      img.src = window.URL.createObjectURL(file);\r\n  \r\n      img.onload = () => {\r\n        const width = img.naturalWidth;\r\n        const height = img.naturalHeight;\r\n  \r\n        if (width !== 1920 || height !== 634) {\r\n          Swal.fire({\r\n            title: \"Image resolution should be 1920x634 pixels\",\r\n            icon: \"warning\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n          // setErrors({\r\n          //   ...errors,\r\n          //   image: \"Image resolution should be 1920x634 pixels\",\r\n          // });\r\n          // Clear the file input\r\n          fileInput.value = \"\"; // This clears the input\r\n          setSelectedImage(\"\")\r\n          setUserData({ ...userData, image: \"\" });\r\n        } else {\r\n          // Clear the image error\r\n          setErrors({\r\n            ...errors,\r\n            image: \"\",\r\n          });\r\n  \r\n          // Convert the image to base64\r\n          convertToBase64(file).then((base64) => {\r\n            setUserData({ ...userData, image: base64 });\r\n            setSelectedImage(base64);\r\n          });\r\n          \r\n        }\r\n      };\r\n    }\r\n  };\r\n  \r\n\r\n  // const handleFileUpload1 = async (e) => {\r\n  //   const file = e.target.files[0];\r\n\r\n  //   // Check if the file is selected\r\n  //   if (file) {\r\n  //     // Check the file size (in bytes)\r\n  //     const fileSizeInBytes = file.size;\r\n  //     const maxSizeInBytes = 2 * 1024 * 1024; // 2MB\r\n  //     if (fileSizeInBytes > maxSizeInBytes) {\r\n  //       setErrors({\r\n  //         ...errors,\r\n  //         image: \"Image size should be under 2MB\",\r\n  //       });\r\n  //       // setSelectedImage(\"\");\r\n  //       return;\r\n  //     }\r\n\r\n  //     // Check image resolution\r\n  //     const img = new Image();\r\n  //     img.src = window.URL.createObjectURL(file);\r\n\r\n  //     img.onload = () => {\r\n  //       const width = img.naturalWidth;\r\n  //       const height = img.naturalHeight;\r\n\r\n  //       if (width !== 1920 || height !== 634) {\r\n  //         setErrors({\r\n  //           ...errors,\r\n  //           image: \"Image resolution should be 1920x634 pixels\",\r\n  //         });\r\n  //         // setSelectedImage(\"\");\r\n  //       } else {\r\n  //         // Clear the image error\r\n  //         setErrors({\r\n  //           ...errors,\r\n  //           image: \"\",\r\n  //         });\r\n\r\n  //         // Convert the image to base64\r\n  //         convertToBase64(file).then((base64) => {\r\n  //           setUserData({ ...userData, image: base64 });\r\n  //           setSelectedImage(base64);\r\n  //         });\r\n          \r\n  //       }\r\n  //     };\r\n  //   }\r\n  // };\r\n\r\n  // const handleFileUpload1 = async (e) => {\r\n  //   const file = e.target.files[0];\r\n  //   const base64 = await convertToBase64(file);\r\n  //   setUserData({ ...userData, image: base64 });\r\n  //   setSelectedImage(base64);\r\n\r\n  //   // Clear the image error\r\n  //   setErrors({\r\n  //     ...errors,\r\n  //     image: \"\",\r\n  //   });\r\n  // };\r\n  const deleteImage = () => {\r\n    setSelectedImage(null);\r\n    setUserData({ ...userData, image: \"\" });\r\n  \r\n    // Reset the value of the file input\r\n    const fileInput = document.getElementById(\"formFile\"); // Replace with the actual ID of your file input\r\n    if (fileInput) {\r\n      fileInput.value = \"\";\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/admin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      // getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  return (\r\n    <>\r\n      <APNavBar />\r\n      <div className=\"APBasic\">\r\n        <APSidebar />\r\n\r\n        {loading ? (\r\n          <>\r\n            <div className=\"loader-container\"></div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"site-min-height\">\r\n              <div className=\"breadCumb1\" role=\"presentation\">\r\n                <Breadcrumbs\r\n                  aria-label=\"breadcrumb\"\r\n                  separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                >\r\n                  <Link\r\n                    to=\"/admin/admins/dashboard\"\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                  >\r\n                    Dashboard\r\n                  </Link>\r\n                  <Link to=\"/admin/sliders\" underline=\"hover\" color=\"inherit\">\r\n                    Sliders\r\n                  </Link>\r\n\r\n                  <Typography color=\"text.primary\">Add Slider</Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n\r\n              <h2 className=\"adminPageHeading\">Add Slider</h2>\r\n              <form className=\"adminForm\">\r\n                <div className=\"mb-4 mt-5\">\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Slider Title<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example1\"\r\n                      className={`form-control ${\r\n                        errors.title && \"input-error\"\r\n                      }`}\r\n                      name=\"title\"\r\n                      placeholder=\"Slider Title\"\r\n                      value={userData.title}\r\n                      onChange={handleChange}\r\n                    />\r\n                    {errors.title && (\r\n                      <div className=\"text-danger\">{errors.title}</div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Image<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      className={`form-control ${\r\n                        errors.image && \"input-error\"\r\n                      }`}\r\n                      type=\"file\"\r\n                      id=\"formFile\"\r\n                      label=\"Image\"\r\n                      name=\"logo\"\r\n                      accept=\".jpeg, .png, .jpg, .gif\"\r\n                      onChange={(e) => handleFileUpload1(e)}\r\n                    />\r\n                    {errors.image && (\r\n                      <div className=\"text-danger\">{errors.image}</div>\r\n                    )}\r\n                    <div id=\"emailHelp\" class=\"form-text\">\r\n                      Supported File Types: gif, jpg, jpeg, png (Max. 600 KB). Best\r\n                      file size 1920 X 634 pixels.\r\n                    </div>\r\n                    {selectedImage && (\r\n                      <div>\r\n                        <img\r\n                          className=\"selectedInputImage\"\r\n                          src={selectedImage}\r\n                          alt=\"Selected\"\r\n                        />\r\n                        <button className=\"APButton3\" onClick={deleteImage}>\r\n                          Delete\r\n                        </button>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button1\"\r\n                    onClick={handleClick}\r\n                  >\r\n                    SAVE\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button2\"\r\n                    onClick={() => navigate(\"/admin/sliders\")}\r\n                  >\r\n                    CANCEL\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <APFooter />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default APAddSlider;\r\n\r\nfunction convertToBase64(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.readAsDataURL(file);\r\n    fileReader.onload = () => {\r\n      resolve(fileReader.result);\r\n    };\r\n    fileReader.onerror = (error) => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"names":["APAddSlider","userData","setUserData","useState","title","image","errors","setErrors","loading","setLoading","tokenKey","Cookies","adminID","pathname","useLocation","console","log","navigate","useNavigate","selectedImage","setSelectedImage","handleFileUpload1","async","fileInput","e","target","file","files","size","Swal","icon","confirmButtonText","value","img","Image","src","window","URL","createObjectURL","onload","width","naturalWidth","height","naturalHeight","Promise","resolve","reject","fileReader","FileReader","readAsDataURL","result","onerror","error","convertToBase64","then","base64","useEffect","scrollTo","_jsxs","_Fragment","children","_jsx","APNavBar","className","APSidebar","role","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","to","underline","color","Typography","class","for","type","id","name","placeholder","onChange","prev","label","accept","alt","onClick","deleteImage","document","getElementById","newErrors","Object","keys","length","text","showCancelButton","cancelButtonText","isConfirmed","response","axios","BaseApi","headers","key","ApiKey","token","adminid","data","status","message","APFooter"],"sourceRoot":""}