{"version":3,"file":"static/js/4052.98ce5b50.chunk.js","mappings":"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","sources":["Components/howItWorks/HowItWorks.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Footer from \"../element/Footer\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport NavBar from \"../element/NavBar\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../api/BaseApi\";\r\nimport Swal from \"sweetalert2\";\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\nimport Cookies from \"js-cookie\";\r\nimport HTMLReactParser from \"html-react-parser\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst HowItWorks = () => {\r\n  const [formData, setFormData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    subject: \"\",\r\n    message: \"\",\r\n  });\r\n  const [t, i18n] = useTranslation(\"global\");\r\n  const [errors, setErrors] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    subject: \"\",\r\n    message: \"\",\r\n  });\r\n  const [isCaptchaVerified, setIsCaptchaVerified] = useState(false);\r\n  const recaptchaLanguage = Cookies.get(\"selectedLanguage\");\r\n  const navigate = useNavigate();\r\n  const userType = Cookies.get(\"user_type\");\r\n  const tokenKey = Cookies.get(\"tokenClient\");\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      [name]: \"\",\r\n    }));\r\n  };\r\n\r\n  let primaryColor = Cookies.get(\"primaryColor\");\r\n  let secondaryColor = Cookies.get(\"secondaryColor\");\r\n  let captchaKey = Cookies.get(\"captchaKey\");\r\n\r\n  const [hoverColor, setHoverColor] = useState(false);\r\n\r\n  const handleMouseEnter = () => {\r\n    setHoverColor(true);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoverColor(false);\r\n  };\r\n\r\n  const [pageContent, setPageContent] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + `/page/staticpage/how-it-works`,{language: currentLanguage}\r\n      );\r\n      setLoading(false);\r\n      setPageContent(response.data.response);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.log(\"Cannot get data of how it works page\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (\r\n  //     (!tokenKey && userType != \"recruiter\") ||\r\n  //     (!tokenKey && userType != \"candidate\")\r\n  //   ) {\r\n  //     navigate(\"/user/jobseekerlogin\");\r\n  //   } else {\r\n  //     getData();\r\n      \r\n  //   }\r\n  // }, []);\r\n\r\n  const [recaptchaKey, setRecaptchaKey] = useState(captchaKey);\r\n  const [recaptchaVisible, setRecaptchaVisible] = useState(true);\r\n  const currentLanguage = Cookies.get(\"selectedLanguage\") || \"en\";\r\n\r\n  const handleRecaptchaReset = () => {\r\n    setRecaptchaVisible(false);\r\n    setRecaptchaKey(generateRecaptchaKey());\r\n    setTimeout(() => {\r\n      setRecaptchaVisible(true);\r\n    }, 0); // Using setTimeout to unmount and then mount the ReCAPTCHA\r\n  };\r\n\r\n  const generateRecaptchaKey = () => {\r\n    return Math.random().toString(36).substring(2, 15);\r\n  };\r\n\r\n  const handleClick = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const newErrors = {};\r\n\r\n      if (formData.name === \"\") {\r\n        newErrors.name = t(\"messageForm.nameRequired\");\r\n      }\r\n      if (formData.email === \"\") {\r\n        newErrors.email = t(\"messageForm.emailRequired\");\r\n      } else if (!isValidEmail(formData.email)) {\r\n        newErrors.email = t(\"messageForm.invalidEmail\");\r\n      }\r\n      if (formData.subject === \"\") {\r\n        newErrors.subject = t(\"messageForm.subjectRequired\");\r\n      }\r\n      if (formData.message === \"\") {\r\n        newErrors.message = t(\"messageForm.messageRequired\");\r\n      }\r\n      if (!isCaptchaVerified) {\r\n        newErrors.captcha = t(\"messageForm.captchaRequired\");\r\n      }\r\n      setErrors(newErrors);\r\n\r\n      // Function to validate email format\r\n      function isValidEmail(email) {\r\n        // Use a regular expression to validate email format\r\n        const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\r\n        return emailPattern.test(email);\r\n      }\r\n\r\n      if (Object.keys(newErrors).length === 0) {\r\n        if (isCaptchaVerified) {\r\n          const response = await axios.post(\r\n            BaseApi + \"/page/contact-us\",\r\n            formData\r\n          );\r\n          // Reset the reCAPTCHA\r\n          handleRecaptchaReset();\r\n          if (response.data.status === 200) {\r\n            Swal.fire({\r\n              title: t(\"messageForm.messageSuccessTitle\"),\r\n              icon: \"success\",\r\n              confirmButtonText: t(\"messageForm.close\"),\r\n            });\r\n            setFormData({\r\n              ...formData,\r\n              name: \"\",\r\n              email: \"\",\r\n              subject: \"\",\r\n              message: \"\",\r\n            });\r\n          } else if (response.data.status === 500) {\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"error\",\r\n              confirmButtonText: t(\"messageForm.close\"),\r\n            });\r\n          } else {\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"error\",\r\n              confirmButtonText: t(\"messageForm.close\"),\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      Swal.fire({\r\n        title: t(\"messageForm.messageFailedTitle\"),\r\n        text: t(\"messageForm.messageFailedTxt\"),\r\n        icon: \"error\",\r\n        confirmButtonText: t(\"messageForm.close\"),\r\n      });\r\n    }\r\n    console.log(formData);\r\n  };\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      <div className=\"privacyPolicy\">\r\n        <div className=\"text-center PPSection1\">\r\n          <h1 className=\"\">{pageContent.page_title}</h1>\r\n          <h6 className=\"text-muted fw-normal\">\r\n            {\" \"}\r\n            <Link to=\"/\" style={{ color: \"grey\" }}>\r\n              {t(\"navHeaders.home\")}\r\n            </Link>{\" \"}\r\n            /{pageContent.page_title}\r\n          </h6>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <div className=\"upperPart\">\r\n                <p>\r\n                  {pageContent.page_description &&\r\n                    HTMLReactParser(pageContent.page_description)}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <h2 className=\"text-center pb-4 pt-2\">\r\n                    {t(\"messageForm.sendusa\")}\r\n                    <span className=\"textGradient\">\r\n                      {\" \"}\r\n                      <span className=\"SubHaddingTxt\">\r\n                        {\" \"}\r\n                        {t(\"messageForm.message\")}\r\n                      </span>\r\n                    </span>\r\n                  </h2>\r\n                  <form>\r\n                    <div className=\"mb-4\">\r\n                      <input\r\n                        type=\"text\"\r\n                        className={`form-control ${\r\n                          errors.name && \"input-error\"\r\n                        }`}\r\n                        id=\"exampleInputEmail1\"\r\n                        aria-describedby=\"emailHelp\"\r\n                        name=\"name\"\r\n                        value={formData.name}\r\n                        placeholder={t(\"messageForm.namePlaceholder\")}\r\n                        onChange={handleChange}\r\n                      />\r\n                      {errors.name && (\r\n                        <div className=\"text-danger\">{errors.name}</div>\r\n                      )}\r\n                    </div>\r\n                    <div className=\"mb-4\">\r\n                      <input\r\n                        type=\"email\"\r\n                        className={`form-control ${\r\n                          errors.email && \"input-error\"\r\n                        }`}\r\n                        id=\"exampleInputEmail1\"\r\n                        aria-describedby=\"emailHelp\"\r\n                        name=\"email\"\r\n                        value={formData.email}\r\n                        placeholder={t(\"messageForm.emailPlaceholder\")}\r\n                        onChange={handleChange}\r\n                      />\r\n                      {errors.email && (\r\n                        <div className=\"text-danger\">{errors.email}</div>\r\n                      )}\r\n                    </div>\r\n                    <div className=\"mb-4\">\r\n                      <select\r\n                        className={`form-select ${\r\n                          errors.subject && \"input-error\"\r\n                        }`}\r\n                        aria-label=\"Default select example\"\r\n                        value={formData.subject}\r\n                        name=\"subject\"\r\n                        onChange={handleChange}\r\n                      >\r\n                        <option>{t(\"messageForm.selectPlaceholder\")}</option>\r\n                        <option value=\"1\">\r\n                          {t(\"messageForm.messageFormSelectOption1\")}\r\n                        </option>\r\n                        <option value=\"2\">\r\n                          {t(\"messageForm.messageFormSelectOption2\")}\r\n                        </option>\r\n                        <option value=\"3\">\r\n                          {t(\"messageForm.messageFormSelectOption3\")}\r\n                        </option>\r\n                        <option value=\"3\">\r\n                          {t(\"messageForm.messageFormSelectOption4\")}\r\n                        </option>\r\n                        <option value=\"3\">\r\n                          {t(\"messageForm.messageFormSelectOption5\")}\r\n                        </option>\r\n                      </select>\r\n                      {errors.subject && (\r\n                        <div className=\"text-danger\">{errors.subject}</div>\r\n                      )}\r\n                    </div>\r\n                    <div className=\"mb-4\">\r\n                      <textarea\r\n                        className={`form-control ${\r\n                          errors.message && \"input-error\"\r\n                        }`}\r\n                        id=\"exampleFormControlTextarea1\"\r\n                        rows=\"5\"\r\n                        name=\"message\"\r\n                        value={formData.message}\r\n                        placeholder={t(\"messageForm.descPlaceholder\")}\r\n                        onChange={handleChange}\r\n                      ></textarea>\r\n                      {errors.message && (\r\n                        <div className=\"text-danger\">{errors.message}</div>\r\n                      )}\r\n                    </div>\r\n                    <div className=\"reCaptchaLogin mb-4\">\r\n                      <ReCAPTCHA\r\n                        key={recaptchaKey}\r\n                        sitekey={captchaKey}\r\n                        hl={recaptchaLanguage}\r\n                        onChange={(value) => setIsCaptchaVerified(value)}\r\n                      />\r\n                      {errors.captcha && (\r\n                        <div className=\"text-danger\">{errors.captcha}</div>\r\n                      )}\r\n                    </div>\r\n                    <button\r\n                      type=\"submit\"\r\n                      className=\"btn w-100\"\r\n                      onClick={handleClick}\r\n                      style={{\r\n                        backgroundColor: `${\r\n                          secondaryColor &&\r\n                          (hoverColor ? secondaryColor : primaryColor)\r\n                        }`,\r\n                      }}\r\n                      onMouseEnter={handleMouseEnter}\r\n                      onMouseLeave={handleMouseLeave}\r\n                    >\r\n                      {/* SEND MESSAGE */}\r\n                      {t(\"messageForm.sendMessageButton\")}\r\n                    </button>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HowItWorks;\r\n"],"names":["HowItWorks","formData","setFormData","useState","name","email","subject","message","t","i18n","useTranslation","errors","setErrors","isCaptchaVerified","setIsCaptchaVerified","recaptchaLanguage","Cookies","handleChange","useNavigate","e","value","target","prevData","prev","primaryColor","secondaryColor","captchaKey","hoverColor","setHoverColor","pageContent","setPageContent","loading","setLoading","useEffect","async","response","axios","BaseApi","language","currentLanguage","data","error","console","log","getData","recaptchaKey","setRecaptchaKey","recaptchaVisible","setRecaptchaVisible","generateRecaptchaKey","Math","random","toString","substring","window","scrollTo","_jsxs","_Fragment","children","_jsx","NavBar","className","page_title","Link","to","style","color","page_description","HTMLReactParser","type","id","placeholder","onChange","rows","ReCAPTCHA","sitekey","hl","captcha","onClick","preventDefault","newErrors","isValidEmail","test","Object","keys","length","setTimeout","status","Swal","title","icon","confirmButtonText","text","backgroundColor","onMouseEnter","handleMouseEnter","onMouseLeave","handleMouseLeave","Footer"],"sourceRoot":""}