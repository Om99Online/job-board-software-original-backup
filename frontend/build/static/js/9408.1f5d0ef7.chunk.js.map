{"version":3,"file":"static/js/9408.1f5d0ef7.chunk.js","mappings":"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","sources":["Components/adminpanel/Sliders/APSliderList.js","../node_modules/@mui/icons-material/Block.js","../node_modules/@mui/icons-material/Check.js","../node_modules/@mui/icons-material/Create.js","../node_modules/@mui/icons-material/Delete.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport APNavBar from \"../Elements/APNavBar\";\r\nimport APSidebar from \"../APSidebar/APSidebar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Link from \"@mui/material/Link\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../../api/BaseApi\";\r\nimport ApiKey from \"../../api/ApiKey\";\r\nimport Swal from \"sweetalert2\";\r\n// import CalendarMonthIcon from \"@mui/icons-material/CalendarMonth\";\r\nimport CreateIcon from \"@mui/icons-material/Create\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\n// import RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\r\n// import ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\r\nimport BlockIcon from \"@mui/icons-material/Block\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\n// import AddIcon from \"@mui/icons-material/Add\";\r\nimport Pagination from \"@mui/material/Pagination\";\r\nimport Stack from \"@mui/material/Stack\";\r\n// import VerifiedIcon from \"@mui/icons-material/Verified\";\r\n// import Box from \"@mui/material/Box\";\r\n// import Modal from \"@mui/material/Modal\";\r\nimport Cookies from \"js-cookie\";\r\nimport APFooter from \"../Elements/APFooter\";\r\n\r\nconst APSliderList = () => {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n  const [listData, setListData] = useState([]);\r\n  const [checkedData, setCheckedData] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const tokenKey = Cookies.get(\"token\");\r\n  const adminID = Cookies.get(\"adminID\");\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  // const [dataPerPage, setDataPerPage] = useState([]);\r\n  const itemsPerPage = 20;\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + \"/admin/slider/index\",\r\n        null, // Pass null as the request body if not required\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n            adminid: adminID,\r\n          },\r\n        }\r\n      );\r\n      setLoading(false);\r\n      setListData(response.data.response);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.log(\"Cannot get plans data at APmanageplans\");\r\n    }\r\n  };\r\n  const handleActivate = async (slug) => {\r\n    try {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Activate Slider?\",\r\n        text: \"Do you want to Activate this Slider?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        // setLoading(true);\r\n        const response = await axios.post(\r\n          BaseApi + `/admin/slider/admin_activate/${slug}`,\r\n          null, // Pass null as the request body if not required\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n        // setLoading(false);\r\n        if (response.data.status === 200) {\r\n          Swal.fire({\r\n            title: \"Slider Activated successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        } else {\r\n          Swal.fire({\r\n            title: response.data.message,\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n        getData();\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed. Please try after some time!\",\r\n        text: \"Could not Activate Slider\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Couldn't activate the slider!\", error.message);\r\n    }\r\n  };\r\n  const handleDeactivate = async (slug) => {\r\n    try {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Deactivate Slider?\",\r\n        text: \"Do you want to Deactivate this Slider?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        // setLoading(true);\r\n        const response = await axios.post(\r\n          BaseApi + `/admin/slider/admin_deactivate/${slug}`,\r\n          null, // Pass null as the request body if not required\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n        // setLoading(false);\r\n        if (response.data.status === 200) {\r\n          Swal.fire({\r\n            title: \"Slider Deactivated successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        } else {\r\n          Swal.fire({\r\n            title: response.data.message,\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n        getData();\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed. Please try after some time!\",\r\n        text: \"Could not Deactivate Slider\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Couldn't deactivate slider!\", error.message);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (slug) => {\r\n    try {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Delete Slider\",\r\n        text: \"Do you want to Delete this Slider?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        // setLoading(true);\r\n        const response = await axios.post(\r\n          BaseApi + `/admin/slider/admin_delete/${slug}`,\r\n          null, // Pass null as the request body if not required\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n        // setLoading(false);\r\n        if (response.data.status === 200) {\r\n          Swal.fire({\r\n            title: \"Slider Deleted successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        } else {\r\n          Swal.fire({\r\n            title: response.data.message,\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n        getData();\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed. Please try after some time!\",\r\n        text: \"Could not Delete Slider\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Couldn't delete the slider!\", error.message);\r\n    }\r\n  };\r\n\r\n  const [selectAll, setSelectAll] = useState(true);\r\n\r\n  const handleCheck = (id) => {\r\n    // Check if the id is 'selectAll', indicating the \"Select All\" checkbox\r\n    if (id === \"selectAll\") {\r\n      // If it's \"Select All\", toggle the selectAll state\r\n      setSelectAll(!selectAll);\r\n\r\n      // If selectAll is true, select all checkboxes, else unselect all\r\n      const updatedCheckedData = selectAll\r\n        ? listData.map((item) => item.id)\r\n        : [];\r\n      setCheckedData(updatedCheckedData);\r\n    } else {\r\n      // Individual checkbox handling remains the same\r\n      if (checkedData.includes(id)) {\r\n        // If the ID is already in the array, remove it\r\n        setCheckedData(checkedData.filter((checkedId) => checkedId !== id));\r\n      } else {\r\n        // If the ID is not in the array, add it\r\n        setCheckedData([...checkedData, id]);\r\n      }\r\n    }\r\n  };\r\n\r\n  // const handleCheck = (id) => {\r\n  //   if (checkedData.includes(id)) {\r\n  //     // If the ID is already in the array, remove it\r\n  //     setCheckedData(checkedData.filter((checkedId) => checkedId !== id));\r\n  //   } else {\r\n  //     // If the ID is not in the array, add it\r\n  //     setCheckedData([...checkedData, id]);\r\n  //   }\r\n  // };\r\n\r\n  const handleMultipleDeactivate = async () => {\r\n    try {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Deactivate Sliders?\",\r\n        text: \"Do you want to Deactivate Sliders?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        const ids = checkedData.join(\",\");\r\n        console.log(ids);\r\n        // setLoading(true);\r\n        const response = await axios.post(\r\n          BaseApi + \"/admin/slider/index\",\r\n          {\r\n            idList: ids,\r\n            action: \"deactivate\",\r\n          }, // Pass null as the request body if not required\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n        setSelectAll(true);\r\n        setCheckedData(\"\");\r\n        // setLoading(false);\r\n        if (response.data.status === 200) {\r\n          Swal.fire({\r\n            title: \"Sliders Deactivated successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        } else {\r\n          Swal.fire({\r\n            title: \"Couldn't Deactivate!\",\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n        getData();\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed. Please try after some time!\",\r\n        text: \"Could not Deactivate Sliders\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Couldn't deactivate the record!\", error.message);\r\n    }\r\n  };\r\n  const handleMultipleActivate = async () => {\r\n    try {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Activate Sliders?\",\r\n        text: \"Do you want to Activate Sliders?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        let ids = checkedData.toString();\r\n        console.log(ids);\r\n        // setLoading(true);\r\n        const response = await axios.post(\r\n          BaseApi + \"/admin/slider/index\",\r\n          {\r\n            idList: ids,\r\n            action: \"activate\",\r\n          }, // Pass null as the request body if not required\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n\r\n        setSelectAll(true);\r\n        setCheckedData(\"\");\r\n        // setLoading(false);\r\n        if (response.data.status === 200) {\r\n          Swal.fire({\r\n            title: \"Sliders Activated successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        } else {\r\n          Swal.fire({\r\n            title: \"Couldn't Activate!\",\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n        getData();\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed. Please try after some time!\",\r\n        text: \"Could not Activate Sliders\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Couldn't activate the record!\", error.message);\r\n    }\r\n  };\r\n  const handleMultipleDelete = async () => {\r\n    try {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Delete Sliders?\",\r\n        text: \"Do you want to Delete Sliders?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        let ids = checkedData.toString();\r\n        console.log(ids);\r\n        // setLoading(true);\r\n        const response = await axios.post(\r\n          BaseApi + \"/admin/slider/index\",\r\n          {\r\n            idList: ids,\r\n            action: \"delete\",\r\n          }, // Pass null as the request body if not required\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n\r\n        setSelectAll(true);\r\n        setCheckedData(\"\");\r\n        // setLoading(false);\r\n        if (response.data.status === 200) {\r\n          Swal.fire({\r\n            title: \"Sliders Deleted successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        } else {\r\n          Swal.fire({\r\n            title: \"Couldn't Delete!\",\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n        getData();\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed. Please try after some time!\",\r\n        text: \"Could not Delete Sliders\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Couldn't Delete the record!\", error.message);\r\n    }\r\n  };\r\n\r\n  const sortAndFilterData = (array, key, direction, query) => {\r\n    const sortedAndFilteredArray = [...array]\r\n      .filter(\r\n        (item) =>\r\n          item.title?.toLowerCase().includes(query) ||\r\n          item.created?.toLowerCase().includes(query)\r\n      )\r\n      .sort((a, b) => {\r\n        if (a[key] < b[key]) {\r\n          return direction === \"ascending\" ? -1 : 1;\r\n        }\r\n        if (a[key] > b[key]) {\r\n          return direction === \"ascending\" ? 1 : -1;\r\n        }\r\n        return 0;\r\n      });\r\n    return sortedAndFilteredArray;\r\n  };\r\n  const [sortConfig, setSortConfig] = useState({\r\n    key: \"\",\r\n    direction: \"ascending\",\r\n  });\r\n  const [symbol, setSymbol] = useState(\"🔺\");\r\n\r\n  const sortedAndFilteredData = sortAndFilterData(\r\n    listData,\r\n    sortConfig.key,\r\n    sortConfig.direction,\r\n    searchQuery\r\n  );\r\n\r\n  const filteredData = listData.filter((item) => {\r\n    const searchString = searchQuery.toLowerCase();\r\n    return (\r\n      item.title?.toLowerCase().includes(searchString) ||\r\n      item.created?.toLowerCase().includes(searchString)\r\n    );\r\n  });\r\n\r\n  const indexOfLastItem = currentPage * itemsPerPage;\r\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n  const currentItems = sortedAndFilteredData.slice(\r\n    indexOfFirstItem,\r\n    indexOfLastItem\r\n  );\r\n\r\n  const totalPages = Math.ceil(sortedAndFilteredData.length / itemsPerPage);\r\n\r\n  const pageNumbers = [];\r\n  for (let i = 1; i <= totalPages; i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/admin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  useEffect(() => {\r\n    setCurrentPage(1); // Reset currentPage to 1 when searchQuery changes\r\n  }, [searchQuery]);\r\n\r\n  const handleColumnClick = (key) => {\r\n    let direction = \"ascending\";\r\n    if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\r\n      direction = \"descending\";\r\n      setSymbol(\"🔻\");\r\n    } else {\r\n      setSymbol(\"🔺\");\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n  const handleSearchChange = (e) => {\r\n    const newQuery = e.target.value.toLowerCase();\r\n    setSearchQuery(newQuery);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <APNavBar />\r\n      <div className=\"APBasic APManageSubadmin\">\r\n        <APSidebar />\r\n\r\n        {loading ? (\r\n          <>\r\n            <div className=\"loader-container\"></div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"site-min-height\">\r\n              <div className=\"breadCumb1\" role=\"presentation\">\r\n                <Breadcrumbs\r\n                  aria-label=\"breadcrumb\"\r\n                  separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                >\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/admins/dashboard\")}\r\n                  >\r\n                    Dashboard\r\n                  </Link>\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"\")}\r\n                  >\r\n                    Sliders\r\n                  </Link>\r\n\r\n                  <Typography color=\"text.primary\">Slider List</Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n              <div className=\"ManageSubAdminHeader\">\r\n                <h2 className=\"\">Slider List</h2>\r\n\r\n                <button\r\n                  className=\"btn navButton1 APMSbutton\"\r\n                  onClick={() => navigate(\"/admin/sliders/add\")}\r\n                >\r\n                  Add Slider\r\n                </button>\r\n              </div>\r\n              {listData != \"\" ? (\r\n                <>\r\n                  <div className=\"manageSubadminPart1\">\r\n                    <form>\r\n                      <div className=\"manageSubadminPart1Sec1\">\r\n                        <h4>Search Slider by typing title or Created date</h4>\r\n                        <div class=\"APDashboardSearchBx \">\r\n                          {/* <label for=\"formFile\" class=\"form-label\">\r\n                          Search By Keyword\r\n                        </label> */}\r\n\r\n                          <input\r\n                            type=\"text\"\r\n                            id=\"form3Example1\"\r\n                            className=\"form-control\"\r\n                            name=\"searchQuery\"\r\n                            placeholder=\"Search..\"\r\n                            value={searchQuery}\r\n                            onChange={handleSearchChange}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </form>\r\n                    <h4>\r\n                      No. of Results {indexOfFirstItem + 1}-\r\n                      {Math.min(\r\n                        indexOfLastItem,\r\n                        filteredData.length || listData.length\r\n                      )}{\" \"}\r\n                      of {listData.length}\r\n                    </h4>\r\n                  </div>\r\n\r\n                  <div className=\"manageSubadminPart2\">\r\n                    <table class=\"table\">\r\n                      <thead>\r\n                        <tr>\r\n                          <td className=\"checkBoxCol checkBxHead\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              className=\"tableCheckBox\"\r\n                              // checked={selectAll}\r\n\r\n                              onClick={() => handleCheck(\"selectAll\")}\r\n                            />\r\n                          </td>\r\n                          <th onClick={() => handleColumnClick(\"title\")}>\r\n                            Title{symbol}\r\n                          </th>\r\n                          <th onClick={() => handleColumnClick(\"created_date\")}>\r\n                            Created Date{symbol}\r\n                          </th>\r\n\r\n                          <th scope=\"col\">Action</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {currentItems.map((i) => {\r\n                          return (\r\n                            <>\r\n                              <tr>\r\n                                <td className=\"checkBoxCol\">\r\n                                  <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"tableCheckBox\"\r\n                                    checked={checkedData.includes(i.id)} // Check if the current ID is in checkedData\r\n                                    onChange={() => handleCheck(i.id)} // Pass the ID to the handler\r\n                                  />\r\n                                </td>\r\n                                <td>{i.title}</td>\r\n                                <td>{i.created}</td>\r\n\r\n                                <td className=\"APActionButton\">\r\n                                  {i.status === 1 ? (\r\n                                    <button\r\n                                      className=\"btn-secondary\"\r\n                                      onClick={() => handleDeactivate(i.slug)}\r\n                                    >\r\n                                      <Tooltip title=\"Deactivate\">\r\n                                        <CheckIcon />\r\n                                      </Tooltip>\r\n                                    </button>\r\n                                  ) : (\r\n                                    <button\r\n                                      className=\"btn-secondary\"\r\n                                      onClick={() => handleActivate(i.slug)}\r\n                                    >\r\n                                      <Tooltip title=\"Activate\">\r\n                                        <BlockIcon />\r\n                                      </Tooltip>\r\n                                    </button>\r\n                                  )}\r\n                                  <button\r\n                                    className=\"btn-primary\"\r\n                                    onClick={() =>\r\n                                      navigate(`/admin/sliders/edit/${i.slug}`)\r\n                                    }\r\n                                  >\r\n                                    <Tooltip title=\"Edit\">\r\n                                      <CreateIcon />\r\n                                    </Tooltip>\r\n                                  </button>\r\n                                  <button\r\n                                    className=\"btn btn-secondary\"\r\n                                    onClick={() => handleDelete(i.slug)}\r\n                                  >\r\n                                    <Tooltip title=\"Delete\">\r\n                                      <DeleteIcon />\r\n                                    </Tooltip>\r\n                                  </button>\r\n                                </td>\r\n                              </tr>\r\n                            </>\r\n                          );\r\n                        })}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                  <div className=\"manageSubadminpart3\">\r\n                    <div className=\"functionalityButton\">\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary APButton3\"\r\n                        onClick={() => handleMultipleActivate()}\r\n                      >\r\n                        ACTIVATE\r\n                      </button>\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary APButton3\"\r\n                        onClick={() => handleMultipleDeactivate()}\r\n                      >\r\n                        DEACTIVATE\r\n                      </button>\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary APButton4\"\r\n                        onClick={() => handleMultipleDelete()}\r\n                      >\r\n                        DELETE\r\n                      </button>\r\n                    </div>\r\n\r\n                    <div className=\"pagination\">\r\n                      <Stack spacing={2}>\r\n                        <Pagination\r\n                          count={totalPages}\r\n                          color=\"primary\"\r\n                          page={currentPage}\r\n                          onChange={(event, page) => setCurrentPage(page)}\r\n                        />\r\n                      </Stack>\r\n                    </div>\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <div className=\"appliedJobListNoData mt-5\">\r\n                  No Records Found\r\n                </div>\r\n              )}\r\n            </div>\r\n            <APFooter />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default APSliderList;\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM4 12c0-4.42 3.58-8 8-8 1.85 0 3.55.63 4.9 1.69L5.69 16.9C4.63 15.55 4 13.85 4 12zm8 8c-1.85 0-3.55-.63-4.9-1.69L18.31 7.1C19.37 8.45 20 10.15 20 12c0 4.42-3.58 8-8 8z\"\n}), 'Block');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M9 16.17 4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"\n}), 'Check');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Create');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\nexports.default = _default;"],"names":["APSliderList","navigate","useNavigate","loading","setLoading","useState","listData","setListData","checkedData","setCheckedData","searchQuery","setSearchQuery","tokenKey","Cookies","adminID","currentPage","setCurrentPage","getData","async","response","axios","BaseApi","headers","key","ApiKey","token","adminid","data","error","console","log","selectAll","setSelectAll","handleCheck","id","updatedCheckedData","map","item","includes","filter","checkedId","sortConfig","setSortConfig","direction","symbol","setSymbol","sortedAndFilteredData","array","query","_item$title","_item$created","title","toLowerCase","created","sort","a","b","sortAndFilterData","filteredData","_item$title2","_item$created2","searchString","indexOfLastItem","indexOfFirstItem","currentItems","slice","totalPages","Math","ceil","length","pageNumbers","i","push","useEffect","window","scrollTo","handleColumnClick","_jsxs","_Fragment","children","_jsx","APNavBar","className","APSidebar","role","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","underline","color","onClick","Typography","class","type","name","placeholder","value","onChange","e","newQuery","target","min","scope","checked","status","Swal","text","icon","showCancelButton","confirmButtonText","cancelButtonText","isConfirmed","slug","message","handleDeactivate","Tooltip","CheckIcon","handleActivate","BlockIcon","CreateIcon","handleDelete","DeleteIcon","ids","toString","idList","action","handleMultipleActivate","join","handleMultipleDeactivate","handleMultipleDelete","Stack","spacing","Pagination","count","page","event","APFooter","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}