{"version":3,"file":"static/js/5523.40a88b93.chunk.js","mappings":"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","sources":["Components/adminpanel/Jobs/APImportJob.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport APNavBar from \"../Elements/APNavBar\";\r\nimport APSidebar from \"../APSidebar/APSidebar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Link from \"@mui/material/Link\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../../api/BaseApi\";\r\nimport ApiKey from \"../../api/ApiKey\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Cookies from \"js-cookie\";\r\nimport APFooter from \"../Elements/APFooter\";\r\n\r\nconst APImportJob = () => {\r\n  const [userData, setUserData] = useState({\r\n    xml_url: \"\",\r\n    employer_id: \"\",\r\n    // company_name: \"\"\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    xml_url: \"\",\r\n    employer_id: \"\",\r\n    // company_name: \"\"\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [employersData, setEmployersData] = useState([]);\r\n\r\n  const tokenKey = Cookies.get(\"token\");\r\n  const adminID = Cookies.get(\"adminID\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUserData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      [name]: \"\",\r\n    }));\r\n    console.log(userData);\r\n  };\r\n\r\n  // function to get the employer data\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + \"/admin/job/admin_jobimport\",\r\n        null,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n            adminid: adminID,\r\n          },\r\n        }\r\n      );\r\n      setLoading(false);\r\n      setEmployersData(response.data.response.employers);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.log(\"Error at import jobs at Admin panel\");\r\n    }\r\n  };\r\n\r\n  // Function to sumbit the data on API\r\n  const handleClick = async () => {\r\n    try {\r\n      const newErrors = {};\r\n\r\n      if (userData.xml_url === \"\") {\r\n        newErrors.xml_url = \"URL is required\";\r\n        window.scrollTo(0, 0);\r\n      } else {\r\n        // Regular expression pattern to match a valid URL\r\n        const urlPattern = /^(https:\\/\\/)(www\\.)?[\\w.-]+\\.[a-z]{2,5}(\\/\\S*)?$/i;\r\n\r\n        if (!urlPattern.test(userData.xml_url)) {\r\n          newErrors.xml_url = \"Invalid URL format\";\r\n          // window.scrollTo(0, 0);\r\n        }\r\n      }\r\n      if (userData.employer_id === \"\") {\r\n        newErrors.employer_id = \"Please select a company\";\r\n        // window.scrollTo(0, 0);\r\n      }\r\n      setErrors(newErrors);\r\n\r\n      if (Object.keys(newErrors).length === 0) {\r\n        const confirmationResult = await Swal.fire({\r\n          title: \"Import?\",\r\n          text: \"Do you want to Import Jobs?\",\r\n          icon: \"question\",\r\n          showCancelButton: true,\r\n          confirmButtonText: \"Yes\",\r\n          cancelButtonText: \"No\",\r\n        });\r\n\r\n        if (confirmationResult.isConfirmed) {\r\n          setLoading(true);\r\n\r\n          const response = await axios.post(\r\n            BaseApi + \"/admin/job/admin_jobimport\",\r\n            userData,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                key: ApiKey,\r\n                token: tokenKey,\r\n                adminid: adminID,\r\n              },\r\n            }\r\n          );\r\n\r\n          setLoading(false);\r\n\r\n          if (response.data.status === 200) {\r\n            Swal.fire({\r\n              title: \"Jobs Imported successfully!\",\r\n              icon: \"success\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n            // getData();\r\n            // setUserData({\r\n            //   ...userData,\r\n            //   xml_url: \"\",\r\n            //   employer_id: \"\",\r\n            // });\r\n            // window.scrollTo(0, 0);\r\n            navigate(\"/admin/jobs/importlist\");\r\n          } else {\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"error\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed\",\r\n        text: \"Could not Import Jobs. Please try again later!\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Could not change username!\", error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the login page\r\n      navigate(\"/admin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  return (\r\n    <>\r\n      <APNavBar />\r\n      <div className=\"APBasic\">\r\n        <APSidebar />\r\n\r\n        {loading ? (\r\n          <>\r\n            <div className=\"loader-container\"></div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"site-min-height\">\r\n              <div className=\"breadCumb1\" role=\"presentation\">\r\n                <Breadcrumbs\r\n                  aria-label=\"breadcrumb\"\r\n                  separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                >\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/admins/dashboard\")}\r\n                  >\r\n                    Dashboard\r\n                  </Link>\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/jobs\")}\r\n                  >\r\n                    List Jobs\r\n                  </Link>\r\n\r\n                  <Typography color=\"text.primary\">Import Jobs</Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n\r\n              <h2 className=\"adminPageHeading\">Import Jobs</h2>\r\n              <form className=\"adminForm\">\r\n                <div className=\"mb-4 mt-5\">\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      XML Feed URL<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example1\"\r\n                      className={`form-control ${\r\n                        errors.xml_url && \"input-error\"\r\n                      }`}\r\n                      name=\"xml_url\"\r\n                      placeholder=\"XML URL\"\r\n                      value={userData.xml_url}\r\n                      onChange={handleChange}\r\n                    />\r\n                    {errors.xml_url && (\r\n                      <div className=\"text-danger\">{errors.xml_url}</div>\r\n                    )}\r\n                  </div>\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Company Name<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.employer_id && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"employer_id\"\r\n                      value={userData.employer_id}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        Select Company\r\n                      </option>\r\n                      {employersData.map((i) => {\r\n                        return (\r\n                          <option value={i.id}>\r\n                            {i.company_name ? i.company_name:i.first_name}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                    </select>\r\n                    {errors.employer_id && (\r\n                      <div className=\"text-danger\">{errors.employer_id}</div>\r\n                    )}\r\n                  </div>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button1\"\r\n                    onClick={handleClick}\r\n                  >\r\n                    NEXT\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <APFooter />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default APImportJob;\r\n"],"names":["APImportJob","userData","setUserData","useState","xml_url","employer_id","errors","setErrors","loading","setLoading","employersData","setEmployersData","tokenKey","Cookies","adminID","navigate","useNavigate","handleChange","e","name","value","target","prev","console","log","useEffect","async","response","axios","BaseApi","headers","key","ApiKey","token","adminid","data","employers","error","getData","window","scrollTo","_jsxs","_Fragment","children","_jsx","APNavBar","className","APSidebar","role","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","underline","color","onClick","Typography","class","for","type","id","placeholder","onChange","selected","map","i","company_name","first_name","newErrors","test","Object","keys","length","Swal","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","isConfirmed","status","message","APFooter"],"sourceRoot":""}