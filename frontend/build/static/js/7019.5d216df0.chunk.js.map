{"version":3,"file":"static/js/7019.5d216df0.chunk.js","mappings":"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","sources":["Components/adminpanel/Jobs/APEditJob.js","../node_modules/@mui/icons-material/LocationOn.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport APNavBar from \"../Elements/APNavBar\";\r\nimport APSidebar from \"../APSidebar/APSidebar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport JoditEditor from \"jodit-react\";\r\nimport { useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../../api/BaseApi\";\r\nimport ApiKey from \"../../api/ApiKey\";\r\nimport { useNavigate, useParams, Link } from \"react-router-dom\";\r\n// import HTMLReactParser from \"html-react-parser\";\r\nimport Select from \"react-select\";\r\nimport Swal from \"sweetalert2\";\r\nimport Cookies from \"js-cookie\";\r\nimport LocationOnIcon from \"@mui/icons-material/LocationOn\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\"; // import styles\r\nimport APFooter from \"../Elements/APFooter\";\r\nconst APEditJob = () => {\r\n\r\n  const [errors, setErrors] = useState({\r\n    user_id: \"\",\r\n    job_title: \"\",\r\n    category: \"\",\r\n    jobDescription: \"\",\r\n    company_name: \"\",\r\n    work_type: \"\",\r\n    contact_name: \"\",\r\n    skill: \"\",\r\n    contact_number: \"\",\r\n    company_website: \"\",\r\n    companyProfile: \"\",\r\n    designation: \"\",\r\n    location: \"\",\r\n    last_date: \"\",\r\n    experience: \"\",\r\n    annual_salary: \"\",\r\n    logo: \"\",\r\n    subCategory: \"\",\r\n  });\r\n  const [jobData, setJobData] = useState({\r\n    job_title: \"\",\r\n    category: \"\",\r\n    subCategory: [],\r\n    jobDescription: \"\",\r\n    company_name: \"\",\r\n    created: \"\",\r\n    companyProfile: \"\",\r\n    work_type: \"\",\r\n    contact_name: \"\",\r\n    contact_number: \"\",\r\n    company_website: \"\",\r\n    skill: \"\",\r\n    designation: \"\",\r\n    location: \"\",\r\n    experience: \"\",\r\n    annual_salary: \"\",\r\n    logo: \"\",\r\n    last_date: \"\",\r\n    user_id: \"\",\r\n  });\r\n\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n\r\n  const { slug } = useParams();\r\n  // From create job section\r\n\r\n  const editor = useRef(null);\r\n  const tokenKey = Cookies.get(\"token\");\r\n  const adminID = Cookies.get(\"adminID\");\r\n  const mapKey = Cookies.get(\"mapKey\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [totalData, setTotalData] = useState([]);\r\n  const [jobCategories, setJobCategories] = useState([]);\r\n  const [subCategories, setSubCategories] = useState([]);\r\n  const [designationList, setDesignationList] = useState([]);\r\n  const [skillList, setSkillList] = useState([]);\r\n  const [experience, setExperience] = useState([]);\r\n  const [salary, setSalary] = useState([]);\r\n  const [workType, setWorkType] = useState([]);\r\n  const [existingSkill, setExistingSkill] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [employersList, setEmployersList] = useState([]);\r\n  const [selectedSkills, setSelectedSkills] = useState([]);\r\n  const [skillValidationError, setSkillValidationError] = useState(\"\");\r\n  const [selectedCategories, setSelectedSubCategories] = useState([]);\r\n  const [selectedcategories, setSelectedCategories] = useState([]);\r\n\r\n  const handleSkillChange = (selectedOptions) => {\r\n    setSelectedSkills(selectedOptions); // Update selected skills\r\n\r\n    // console.log(selectedOptions);\r\n\r\n    // Check if selectedOptions is not empty\r\n    // if (selectedOptions.length > 0) {\r\n    //   setSkillValidationError(\"\"); // Clear the error message\r\n    // } else {\r\n    //   setSkillValidationError(\"Skill is required\");\r\n    // }\r\n  };\r\n\r\n  const handleCategory = (selectedOption) => {\r\n    // console.log(selectedOption, \"param\");\r\n\r\n    setSelectedCategories(selectedOption);\r\n    // console.log(selectedcategories, \"state\");\r\n\r\n    const ids = selectedOption.value;\r\n    // console.log(ids);\r\n\r\n    getSubCategories(selectedOption.value);\r\n\r\n    setJobData((prevJobData) => ({\r\n      ...prevJobData,\r\n      category: ids,\r\n    }));\r\n  };\r\n\r\n  const handleSubcategory = (selectedOption) => {\r\n    // console.log(selectedOption);\r\n\r\n    setSelectedSubCategories(selectedOption);\r\n\r\n    const ids = selectedOption.map((item) => item.value);\r\n    // console.log(ids);\r\n\r\n    setJobData((prevJobData) => ({\r\n      ...prevJobData,\r\n      subCategory: ids,\r\n    }));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"skill\") {\r\n      setJobData((prevJobData) => ({\r\n        ...prevJobData,\r\n        skill: [...prevJobData.skill, value],\r\n      }));\r\n    } else if (name === \"subCategory\") {\r\n      setJobData((prevJobData) => ({\r\n        ...prevJobData,\r\n        subCategory: [...prevJobData.subCategory, value],\r\n      }));\r\n    } else {\r\n      setJobData((prevJobData) => ({\r\n        ...prevJobData,\r\n        [name]: value,\r\n      }));\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        [name]: \"\",\r\n      }));\r\n    }\r\n  };\r\n\r\n  const getSkillNameById = (skillId) => {\r\n    const selectedSkill = skillList.find((skill) => skill.id === skillId);\r\n    return selectedSkill ? selectedSkill.name : \"\";\r\n  };\r\n\r\n  // const handleSkillChange = (selectedOptions) => {\r\n  //   // Update the jobData state with the selected skills\r\n  //   setJobData((prevJobData) => ({\r\n  //     ...prevJobData,\r\n  //     skill: selectedOptions.map((option) => option.id),\r\n  //   }));\r\n  // };\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + `/admin/job/admin_edit/${slug}`,\r\n        null,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n            adminid: adminID,\r\n          },\r\n        }\r\n      );\r\n      setLoading(false);\r\n\r\n      // console.log(response);\r\n\r\n      // For fetching categories\r\n\r\n      var categoryList = response.data.response.categories;\r\n      var categorySelected = response.data.response.job.category;\r\n      var selectedCategory = [];\r\n\r\n      // categorySelected.forEach((element) => {\r\n      categoryList.forEach((listElement) => {\r\n        if (parseInt(categorySelected) == parseInt(listElement.id)) {\r\n          let obj = {\r\n            value: listElement.id,\r\n            label: listElement.name,\r\n          };\r\n          selectedCategory.push(obj);\r\n        }\r\n      });\r\n      // });\r\n\r\n      // console.log(selectedCategory);\r\n\r\n      // For fetching subcategories\r\n      var subCategoryList = response.data.response.subcategories;\r\n\r\n      var subCategoriesSelected = response.data.response.job.subcategory_id;\r\n\r\n      if(subCategoriesSelected !== null){\r\n        var subCategoriesArray = subCategoriesSelected.split(\",\");\r\n\r\n        var selectedSubCategories = [];\r\n  \r\n        subCategoriesArray.forEach((element) => {\r\n          subCategoryList.forEach((listElement) => {\r\n            if (parseInt(element) == parseInt(listElement.id)) {\r\n              let obj = {\r\n                value: listElement.id,\r\n                label: listElement.name,\r\n              };\r\n              selectedSubCategories.push(obj);\r\n            }\r\n          });\r\n        });\r\n        setSelectedSubCategories(selectedSubCategories);\r\n\r\n      }\r\n\r\n      \r\n      console.log(\"Yha\")\r\n\r\n      // code to handel preselected skills\r\n      var skillList = response.data.response.skillList;\r\n      var selectedSkillsName = response.data.response.job.skill;\r\n      var SelectSkills = [];\r\n\r\n      skillList.forEach((element) => {\r\n        for (let i = 0; i < selectedSkillsName.length; i++) {\r\n          if (parseInt(selectedSkillsName[i]) == element.id) {\r\n            let obj = {\r\n              value: element.id,\r\n              label: element.name,\r\n            };\r\n            SelectSkills.push(obj);\r\n          }\r\n        }\r\n      });\r\n      setSelectedImage(response.data.response.job.logo_path);\r\n\r\n      setJobData(response.data.response.job);\r\n      setSelectedSkills(SelectSkills);\r\n      setSelectedCategories(selectedCategory);\r\n      setSubCategories(subCategoryList);\r\n\r\n      setTotalData(response.data.response);\r\n      setJobCategories(response.data.response.categories);\r\n      setDesignationList(response.data.response.designationlList);\r\n      setSkillList(response.data.response.skillList);\r\n      setExperience(response.data.response.experience);\r\n      setSalary(response.data.response.sallery);\r\n      setWorkType(response.data.response.worktype);\r\n      setEmployersList(response.data.response.employers);\r\n      setExistingSkill(response.data.response.job.skill);\r\n      // console.log(\"hi\")\r\n      // skillGetter(existingSkill, skillList);\r\n      // console.log(arary1);\r\n      // console.log(skillList)\r\n\r\n      // console.log(existingSkill);\r\n    } catch (error) {\r\n      console.log(\"No data received\");\r\n    }\r\n  };\r\n\r\n  // const [extractedSkills, setExtractedSkills] = useState([]);\r\n\r\n  // const skillGetter = (skills, skillList) => {\r\n\r\n  //   for (let i = 0; i < skills.length; i++) {\r\n  //     let found = false;\r\n\r\n  //     for (let j = 0; j < skillList.length; j++) {\r\n  //       if (skills[i] == skillList[j].id) {\r\n  //         found = true;\r\n\r\n  //         // Check if the skill is already in extractedSkills\r\n  //         const duplicateSkill = extractedSkills.find(\r\n  //           (skill) => skill.value === skillList[j].id.toString()\r\n  //         );\r\n\r\n  //         if (!duplicateSkill) {\r\n  //           extractedSkills.push({\r\n  //             value: skillList[j].id.toString(),\r\n  //             label: skillList[j].name,\r\n  //           });\r\n  //         }\r\n\r\n  //         break;\r\n  //       }\r\n  //     }\r\n\r\n  //     if (!found) {\r\n  //       console.log(\"false\");\r\n  //       // Handle the case when the skill is not found in skillList, if needed.\r\n  //     }\r\n  //   }\r\n\r\n  //   console.log(extractedSkills, \"Data\");\r\n\r\n  //   return extractedSkills;\r\n\r\n  // };\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/admin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n\r\n      getData();\r\n      // skillGetter(existingSkill, skillList);\r\n      getSubCategories();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  const getSubCategories = async (id) => {\r\n    setSelectedSubCategories([]);\r\n    try {\r\n      const subCatData = await axios.post(\r\n        BaseApi + `/categories/getSubCategory/${id}`,\r\n        null,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n            adminid: adminID,\r\n          },\r\n        }\r\n      );\r\n      setSubCategories(subCatData.data.response);\r\n    } catch (error) {\r\n      console.log(\"Couldn't get Sub category data!\");\r\n    }\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    var skills = document.getElementsByName(\"skill\");\r\n    var skillArray = [];\r\n\r\n    skills.forEach((element) => {\r\n      skillList.forEach((skill) => {\r\n        if (skill.id == element.value) {\r\n          skillArray.push(skill.id);\r\n        }\r\n      });\r\n    });\r\n\r\n    // Check initial skill validation\r\n    // if (selectedSkills.length === 0) {\r\n    //   setSkillValidationError(\"Skill is required\");\r\n    // }\r\n\r\n    try {\r\n      const {\r\n        job_title,\r\n        category,\r\n        company_name,\r\n        work_type,\r\n        contact_name,\r\n        skill,\r\n        contact_number,\r\n        companyProfile,\r\n        designation,\r\n        location,\r\n        last_date,\r\n        experience,\r\n        annual_salary,\r\n        company_website,\r\n      } = jobData;\r\n\r\n      if (\r\n        !job_title ||\r\n        !category ||\r\n        !company_name ||\r\n        !work_type ||\r\n        !contact_name ||\r\n        // !skillArray ||\r\n        !contact_number ||\r\n        !companyProfile ||\r\n        !designation ||\r\n        !location ||\r\n        !last_date ||\r\n        !experience ||\r\n        !annual_salary\r\n      ) {\r\n        setErrors({\r\n          job_title: job_title ? \"\" : \"Job Title is required\",\r\n          category: category ? \"\" : \"Category is required\",\r\n          company_name: company_name ? \"\" : \"Company Name is required\",\r\n          work_type: work_type ? \"\" : \"Work Type is required\",\r\n          contact_name: contact_name ? \"\" : \"Contact Name is required\",\r\n          // skillArray: skillArray ? \"\" : \"Skill is required\",\r\n          contact_number: contact_number ? \"\" : \"Contact Number is required\",\r\n          companyProfile: companyProfile ? \"\" : \"Company Profile is required\",\r\n          designation: designation ? \"\" : \"Designation is required\",\r\n          location: location ? \"\" : \"Location is required\",\r\n          last_date: last_date ? \"\" : \"Last Date is required\",\r\n          experience: experience ? \"\" : \"Experience is required\",\r\n          annual_salary: annual_salary ? \"\" : \"Annual Salary is required\",\r\n        });\r\n        return;\r\n      }\r\n\r\n      const contactFormat = /^\\+?\\d{1,3}-?\\d{9,15}$/;\r\n      if (contact_number && !contactFormat.test(contact_number)) {\r\n        setErrors({\r\n          contact_number: \"Please enter contact number under 15 digits\",\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (company_website) {\r\n        const urlFormat =\r\n          /^(https?:\\/\\/)?(www\\.)?[\\w.-]+\\.[a-z]{2,5}(\\/\\S*)?$/i;\r\n        if (company_website && !urlFormat.test(company_website)) {\r\n          setErrors({\r\n            company_website: \"Invalid URL format\",\r\n          });\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (skillValidationError) {\r\n        return;\r\n      }\r\n\r\n      // if (Object.keys(newErrors).length === 0) {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Update Job?\",\r\n        text: \"Do you want to update this job?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        const updatedProfile = {\r\n          ...jobData,\r\n          skill: skillArray,\r\n        };\r\n\r\n        setLoading(true);\r\n        const response = await axios.post(\r\n          BaseApi + `/admin/job/admin_edit/${slug}`,\r\n          updatedProfile,\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n        if (response.data.status === 200) {\r\n          setLoading(false);\r\n          Swal.fire({\r\n            title: \"Job Updated successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n          navigate(\"/admin/jobs\");\r\n        } else {\r\n          setLoading(false);\r\n          Swal.fire({\r\n            title: \"Failed\",\r\n            text: response.data.message,\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n      }\r\n      // }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Could not update this job. Please try after some time!\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Could not submit job data\");\r\n    }\r\n  };\r\n\r\n  // const handleFileUpload = async (e) => {\r\n  //   const file = e.target.files[0];\r\n  //   const base64 = await convertToBase64(file);\r\n  //   console.log(base64);\r\n  //   setJobData({ ...jobData, logo: base64 });\r\n  // };\r\n\r\n  const jobType = (value) => {\r\n    sessionStorage.setItem(\"jobtype\", \"value\");\r\n  };\r\n\r\n  // const handleFileUpload1 = async (e) => {\r\n  //   const file = e.target.files[0];\r\n  //   const base64 = await convertToBase64(file);\r\n  //   setJobData({ ...jobData, logo: base64 });\r\n  //   setSelectedImage(base64);\r\n\r\n  //   // Clear the image error\r\n  //   setErrors({\r\n  //     ...errors,\r\n  //     logo: \"\",\r\n  //   });\r\n  // };\r\n\r\n  const handleFileUpload1 = async (e) => {\r\n    const fileInput = e.target;\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      // Check the file size (in bytes)\r\n      const fileSizeInBytes = file.size;\r\n      const maxSizeInBytes = 600 * 1024; // 600 KB\r\n      if (fileSizeInBytes > maxSizeInBytes) {\r\n        Swal.fire({\r\n          title: \"Image size should be under 600 KB\",\r\n          icon: \"warning\",\r\n          confirmButtonText: \"Close\",\r\n        });\r\n        fileInput.value = \"\"; // This clears the input\r\n        return;\r\n      }\r\n      // Convert the image to base64\r\n      convertToBase64(file).then((base64) => {\r\n        setJobData({ ...jobData, logo: base64 });\r\n        setSelectedImage(base64);\r\n      });\r\n      setErrors({\r\n        ...errors,\r\n        logo: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteImage = () => {\r\n    setSelectedImage(null);\r\n    setJobData({ ...jobData, profile_image: \"\" });\r\n\r\n    window.location.reload();\r\n  };\r\n\r\n  // Code for loading Location\r\n\r\n  const [autocompleteService, setAutocompleteService] = useState(null);\r\n  const [suggestions, setSuggestions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Load Google Maps AutocompleteService after component mounts\r\n    const script = document.createElement(\"script\");\r\n    script.src = `https://maps.googleapis.com/maps/api/js?key=${mapKey}&libraries=places`;\r\n    script.onload = () => {\r\n      setAutocompleteService(\r\n        new window.google.maps.places.AutocompleteService()\r\n      );\r\n      console.log(autocompleteService);\r\n    };\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      document.body.removeChild(script);\r\n    };\r\n  }, []);\r\n\r\n  const handleLocationChange = (e) => {\r\n    const { value } = e.target;\r\n    setSuggestionTaken(false);\r\n    if (value == \"\") {\r\n      setSuggestionTaken(true);\r\n    }\r\n    if (value != \"\") {\r\n      setErrors({\r\n        location: \"\",\r\n      });\r\n    }\r\n\r\n    setJobData((prevFilter) => ({\r\n      ...prevFilter,\r\n      location: value,\r\n    }));\r\n\r\n    if (autocompleteService) {\r\n      // Call Google Maps Autocomplete API\r\n      autocompleteService.getPlacePredictions(\r\n        {\r\n          input: value,\r\n          types: [\"(cities)\"], // Restrict to cities if needed\r\n        },\r\n        (predictions, status) => {\r\n          if (status === \"OK\" && predictions) {\r\n            setSuggestions(\r\n              predictions.map((prediction) => prediction.description)\r\n            );\r\n          } else {\r\n            setSuggestions([]);\r\n          }\r\n        }\r\n      );\r\n    }\r\n    if (jobData.location === \"\") {\r\n      setSuggestions([]);\r\n    }\r\n  };\r\n  const [suggestionTaken, setSuggestionTaken] = useState(false);\r\n\r\n  const handleSuggestionClick = (suggestion) => {\r\n    // Update the input value with the clicked suggestion\r\n    handleLocationChange({ target: { name: \"location\", value: suggestion } });\r\n\r\n    setSuggestionTaken(true);\r\n    // Clear the suggestions\r\n    setSuggestions([]);\r\n    // console.log(filterItem);\r\n  };\r\n\r\n  // Ends here\r\n\r\n  return (\r\n    <>\r\n      <APNavBar />\r\n      <div className=\"APBasic\">\r\n        <APSidebar />\r\n\r\n        {loading ? (\r\n          <>\r\n            <div className=\"loader-container\"></div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"site-min-height\">\r\n              <div className=\"breadCumb1\" role=\"presentation\">\r\n                <Breadcrumbs\r\n                  aria-label=\"breadcrumb\"\r\n                  separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                >\r\n                  <Link\r\n                    to=\"/admin/admins/dashboard\"\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                  >\r\n                    Dashboard\r\n                  </Link>\r\n                  <Link to=\"/admin/jobs\" underline=\"hover\" color=\"inherit\">\r\n                    Jobs\r\n                  </Link>\r\n\r\n                  <Typography color=\"text.primary\">Edit Jobs</Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n\r\n              <h2 className=\"adminPageHeading\">Edit Job</h2>\r\n              <form className=\"adminForm\">\r\n                <div className=\"mb-5 mt-4\">\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                      Select Employer\r\n                    </label>\r\n\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example1\"\r\n                      className={`form-control ${\r\n                        errors.company_name && \"input-error\"\r\n                      }`}\r\n                      name=\"company_name\"\r\n                      value={jobData.company_name}\r\n                      placeholder=\"Company Name\"\r\n                      onChange={handleChange}\r\n                      disabled\r\n                    />\r\n                    {errors.company_name && (\r\n                      <div className=\"text-danger\">{errors.company_name}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                      Job title<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example1\"\r\n                      className={`form-control ${\r\n                        errors.job_title && \"input-error\"\r\n                      }`}\r\n                      name=\"job_title\"\r\n                      value={jobData.job_title}\r\n                      placeholder=\"Job Title\"\r\n                      onChange={handleChange}\r\n                    />\r\n                    {errors.job_title && (\r\n                      <div className=\"text-danger\">{errors.job_title}</div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx skillPackageCategory APJoditEditor\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                      Category<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    {/* <select\r\n                      className={`form-select ${\r\n                        errors.category && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"category\"\r\n                      value={jobData.category}\r\n                      onChange={(e) => {\r\n                        handleChange(e);\r\n                        getSubCategories(e.target.value);\r\n                      }}\r\n                    >\r\n                      <option value=\"\">Select Job Category</option>\r\n                      {jobCategories.map((i, index) => (\r\n                        <option value={i.id} key={index}>\r\n                          {i.name}\r\n                        </option>\r\n                      ))}\r\n                    </select> */}\r\n\r\n                    <Select\r\n                      // defaultValue={[colourOptions[2], colouptions[3]]}\r\n                      // isMulti\r\n                      isSearchable\r\n                      name=\"category\"\r\n                      options={jobCategories.map((i) => ({\r\n                        value: i.id,\r\n                        label: i.name,\r\n                      }))}\r\n                      className=\"basic-multi-select\"\r\n                      value={selectedcategories}\r\n                      classNamePrefix=\"select\"\r\n                      onChange={(e) => {\r\n                        handleCategory(e);\r\n                        // getSubCategories(e.target.value);\r\n                      }}\r\n                    />\r\n                    {errors.category && (\r\n                      <div className=\"text-danger\">{errors.category}</div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                {/* {jobData.category && subCategories ? (\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                      Sub Category\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.subCategory && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"subCategory\"\r\n                      value={jobData.subCategory}\r\n                      onChange={handleChange}\r\n                      multiple\r\n                    >\r\n                      <option selected>Select Sub Category</option>\r\n                      {subCategories?.map((i, index) => {\r\n                        return (\r\n                          <option key={index} value={i.id}>\r\n                            {i.name}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                    </select>\r\n                    {errors.subCategory && (\r\n                      <div className=\"text-danger\">{errors.subCategory}</div>\r\n                    )}\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )} */}\r\n\r\n                {jobData.category && subCategories ? (\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx skillPackageSubcategory APJoditEditor\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                      Sub Category\r\n                    </label>\r\n\r\n                    <Select\r\n                      // defaultValue={[colourOptions[2], colouptions[3]]}\r\n                      isMulti\r\n                      isSearchable\r\n                      name=\"Subcategory\"\r\n                      options={subCategories.map((i) => ({\r\n                        value: i.id,\r\n                        label: i.name,\r\n                      }))}\r\n                      className=\"basic-multi-select\"\r\n                      value={selectedCategories}\r\n                      classNamePrefix=\"select\"\r\n                      onChange={handleSubcategory}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx APJoditEditor\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                    Job Description\r\n                  </label>\r\n                  {/* <JoditEditor\r\n                    ref={editor}\r\n                    name=\"jobDescription\"\r\n                    value={jobData.jobDescription}\r\n                    onChange={(jobDescription) =>\r\n                      handleChange({\r\n                        target: {\r\n                          value: jobDescription,\r\n                          name: \"jobDescription\",\r\n                        },\r\n                      })\r\n                    }\r\n                  /> */}\r\n                  <ReactQuill\r\n                    theme=\"snow\"\r\n                    value={jobData.jobDescription}\r\n                    onChange={(value) =>\r\n                      handleChange({\r\n                        target: { name: \"jobDescription\", value },\r\n                      })\r\n                    }\r\n                    style={{ minHeight: \"250px\", height: \"200px\" }}\r\n                    placeholder=\"Add your text here...\"\r\n                  />\r\n                  {errors.jobDescription && (\r\n                    <div className=\"text-danger\">{errors.jobDescription}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                    Company Name<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"form3Example3\"\r\n                    className={`form-control ${\r\n                      errors.company_name && \"input-error\"\r\n                    }`}\r\n                    name=\"company_name\"\r\n                    value={jobData.company_name}\r\n                    placeholder=\"Company Name\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  {errors.company_name && (\r\n                    <div className=\"text-danger\">{errors.company_name}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                    Work Type<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <select\r\n                    className={`form-select ${\r\n                      errors.work_type && \"input-error\"\r\n                    }`}\r\n                    aria-label=\"Default select example\"\r\n                    name=\"work_type\"\r\n                    value={jobData.work_type}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option selected>Select Work Type</option>\r\n                    {Object.entries(workType).map(([key, value]) => {\r\n                      return (\r\n                        <>\r\n                          <option\r\n                            key={key}\r\n                            value={key}\r\n                            onChange={() => jobType(value)}\r\n                          >\r\n                            {value}\r\n                          </option>\r\n                        </>\r\n                      );\r\n                    })}\r\n                  </select>\r\n                  {errors.work_type && (\r\n                    <div className=\"text-danger\">{errors.work_type}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                    Contact Name<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"form3Example3\"\r\n                    className={`form-control ${\r\n                      errors.contact_name && \"input-error\"\r\n                    }`}\r\n                    name=\"contact_name\"\r\n                    value={jobData.contact_name}\r\n                    placeholder=\"Contact Name\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  {errors.contact_name && (\r\n                    <div className=\"text-danger\">{errors.contact_name}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx  APJoditEditor\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                    Company Profile<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  {/* <JoditEditor\r\n                    ref={editor}\r\n                    name=\"companyProfile\"\r\n                    value={jobData.companyProfile}\r\n                    onChange={(companyProfile) =>\r\n                      handleChange({\r\n                        target: {\r\n                          value: companyProfile,\r\n                          name: \"companyProfile\",\r\n                        },\r\n                      })\r\n                    }\r\n                  /> */}\r\n                  <ReactQuill\r\n                    theme=\"snow\"\r\n                    value={jobData.companyProfile}\r\n                    onChange={(value) =>\r\n                      handleChange({\r\n                        target: { name: \"companyProfile\", value },\r\n                      })\r\n                    }\r\n                    style={{ minHeight: \"250px\", height: \"200px\" }}\r\n                      placeholder=\"Add your text here...\"\r\n                  />\r\n                  {errors.companyProfile && (\r\n                    <div className=\"text-danger\">{errors.companyProfile}</div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                    Contact Number<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"form3Example3\"\r\n                    className={`form-control ${\r\n                      errors.contact_number && \"input-error\"\r\n                    }`}\r\n                    name=\"contact_number\"\r\n                    value={jobData.contact_number}\r\n                    placeholder=\"Contact Number\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  {errors.contact_number && (\r\n                    <div className=\"text-danger\">{errors.contact_number}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                    Company Website\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"form3Example3\"\r\n                    className={`form-control ${\r\n                      errors.company_website && \"input-error\"\r\n                    }`}\r\n                    name=\"company_website\"\r\n                    value={jobData.company_website}\r\n                    placeholder=\"Company Website\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  {errors.company_website && (\r\n                    <div className=\"text-danger\">{errors.company_website}</div>\r\n                  )}\r\n                  <div id=\"emailHelp\" className=\"form-text\">\r\n                    Eg: https://www.google.com or www.google.com\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                    Experience (In Years)<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <select\r\n                    className={`form-select ${\r\n                      errors.experience && \"input-error\"\r\n                    }`}\r\n                    aria-label=\"Default select example\"\r\n                    name=\"experience\"\r\n                    value={jobData.experience}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option selected>Choose Experience</option>\r\n                    {Object.entries(experience).map(([key, value]) => {\r\n                      return (\r\n                        <option key={key} value={key}>\r\n                          {value}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </select>\r\n                  {errors.experience && (\r\n                    <div className=\"text-danger\">{errors.experience}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                    Annual Salary<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <select\r\n                    className={`form-select ${\r\n                      errors.annual_salary && \"input-error\"\r\n                    }`}\r\n                    aria-label=\"Default select example\"\r\n                    name=\"annual_salary\"\r\n                    value={jobData.annual_salary}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option selected>Select Salary</option>\r\n                    {Object.entries(salary).map(([key, value]) => {\r\n                      return (\r\n                        <option key={key} value={key}>\r\n                          {value}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </select>\r\n                  {errors.annual_salary && (\r\n                    <div className=\"text-danger\">{errors.annual_salary}</div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx skillPackage  APJoditEditor\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                    Skills\r\n                  </label>\r\n\r\n                  <Select\r\n                    // defaultValue={[\r\n                    //   extractedSkills?.[0],\r\n                    //   extractedSkills?.[1],\r\n                    //   extractedSkills?.[2],\r\n\r\n                    // ]}\r\n\r\n                    defaultValue={selectedSkills}\r\n                    isMulti\r\n                    isSearchable\r\n                    name=\"skill\"\r\n                    options={skillList.map((i) => ({\r\n                      value: i.id,\r\n                      label: i.name,\r\n                    }))}\r\n                    className=\"basic-multi-select\"\r\n                    classNamePrefix=\"select\"\r\n                    value={selectedSkills}\r\n                    onChange={handleSkillChange}\r\n                  />\r\n                  {skillValidationError && (\r\n                    <div className=\"text-danger\">{skillValidationError}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                    Designation<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <select\r\n                    className={`form-select ${\r\n                      errors.designation && \"input-error\"\r\n                    }`}\r\n                    aria-label=\"Default select example\"\r\n                    name=\"designation\"\r\n                    value={jobData.designation}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option selected value=\"\">\r\n                      Choose Designation\r\n                    </option>\r\n                    {designationList.map((i, index) => {\r\n                      return (\r\n                        <>\r\n                          <option value={i.id} key={index}>\r\n                            {i.name}\r\n                          </option>\r\n                        </>\r\n                      );\r\n                    })}\r\n                  </select>\r\n                  {errors.designation && (\r\n                    <div className=\"text-danger\">{errors.designation}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                    Location<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"form3Example3\"\r\n                    className={`form-control ${\r\n                      errors.location && \"input-error\"\r\n                    }`}\r\n                    name=\"location\"\r\n                    value={jobData.location}\r\n                    placeholder=\"Location\"\r\n                    onChange={handleLocationChange}\r\n                  />\r\n                  {suggestions.length > 0 && (\r\n                    <div\r\n                      className=\"suggestionsAdminSide\"\r\n                      style={{ display: suggestionTaken ? \"none\" : \"\" }}\r\n                    >\r\n                      <ul className=\"locationDropdown\">\r\n                        {suggestions.map((suggestion, index) => (\r\n                          <div key={index} className=\"suggestion-item\">\r\n                            <li\r\n                              onClick={() => handleSuggestionClick(suggestion)}\r\n                            >\r\n                              <div className=\"eachLocation\">\r\n                                <div className=\"locationIcon\">\r\n                                  <LocationOnIcon fontSize=\"small\" />\r\n                                </div>{\" \"}\r\n                                <div className=\"locationSuggestion\">\r\n                                  {suggestion}\r\n                                </div>\r\n                              </div>{\" \"}\r\n                            </li>\r\n                          </div>\r\n                        ))}\r\n                      </ul>\r\n                    </div>\r\n                  )}\r\n                  {errors.location && (\r\n                    <div className=\"text-danger\">{errors.location}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                    Last Date<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"date\"\r\n                    id=\"form3Example3\"\r\n                    className={`form-control ${\r\n                      errors.last_date && \"input-error\"\r\n                    }`}\r\n                    name=\"last_date\"\r\n                    value={jobData.last_date}\r\n                    placeholder=\"Last Date\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  {errors.last_date && (\r\n                    <div className=\"text-danger\">{errors.last_date}</div>\r\n                  )}\r\n                </div>\r\n                <div class=\"mb-5 DashBoardInputBx\">\r\n                  <label for=\"formFile\" class=\"form-label\">\r\n                    Company Logo\r\n                  </label>\r\n                  <input\r\n                    class=\"form-control\"\r\n                    type=\"file\"\r\n                    id=\"formFile\"\r\n                    label=\"profile_image\"\r\n                    name=\"logo\"\r\n                    accept=\".jpeg, .png, .jpg, .gif\"\r\n                    onChange={(e) => handleFileUpload1(e)}\r\n                  />\r\n\r\n                  <div id=\"emailHelp\" class=\"form-text\">\r\n                    Supported File Types: gif, jpg, jpeg, png (Max. 600 KB).\r\n                  </div>\r\n                  {selectedImage && (\r\n                    <div>\r\n                      <div className=\"\">\r\n                        <img\r\n                          className=\"selectedInputImage\"\r\n                          src={selectedImage}\r\n                          alt=\"Selected\"\r\n                        />\r\n                      </div>\r\n\r\n                      {/* <button className=\"APButton3\" onClick={deleteImage}>\r\n                        Delete\r\n                      </button> */}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                    Job Posted Date<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"date\"\r\n                    id=\"form3Example3\"\r\n                    className=\"form-control\"\r\n                    name=\"last_date\"\r\n                    value={jobData.created}\r\n                    placeholder=\"Last Date\"\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div className=\"APAddJobBottomButtons\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button1\"\r\n                    onClick={handleClick}\r\n                  >\r\n                    SAVE\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button2\"\r\n                    onClick={() => navigate(\"/admin/jobs\")}\r\n                  >\r\n                    CANCEL\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <APFooter />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default APEditJob;\r\n\r\nfunction convertToBase64(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.readAsDataURL(file);\r\n    fileReader.onload = () => {\r\n      resolve(fileReader.result);\r\n    };\r\n    fileReader.onerror = (error) => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"\n}), 'LocationOn');\nexports.default = _default;"],"names":["APEditJob","errors","setErrors","useState","user_id","job_title","category","jobDescription","company_name","work_type","contact_name","skill","contact_number","company_website","companyProfile","designation","location","last_date","experience","annual_salary","logo","subCategory","jobData","setJobData","created","selectedImage","setSelectedImage","slug","useParams","tokenKey","useRef","Cookies","adminID","mapKey","navigate","useNavigate","totalData","setTotalData","jobCategories","setJobCategories","subCategories","setSubCategories","designationList","setDesignationList","skillList","setSkillList","setExperience","salary","setSalary","workType","setWorkType","existingSkill","setExistingSkill","loading","setLoading","employersList","setEmployersList","selectedSkills","setSelectedSkills","skillValidationError","setSkillValidationError","selectedCategories","setSelectedSubCategories","selectedcategories","setSelectedCategories","handleChange","e","name","value","target","prevJobData","prev","useEffect","async","response","axios","BaseApi","headers","key","ApiKey","token","adminid","categoryList","data","categories","categorySelected","job","selectedCategory","forEach","listElement","parseInt","id","obj","label","push","subCategoryList","subcategories","subCategoriesSelected","subcategory_id","subCategoriesArray","split","selectedSubCategories","element","console","log","selectedSkillsName","SelectSkills","i","length","logo_path","designationlList","sallery","worktype","employers","error","getData","getSubCategories","window","scrollTo","subCatData","handleFileUpload1","fileInput","file","files","size","Swal","title","icon","confirmButtonText","Promise","resolve","reject","fileReader","FileReader","readAsDataURL","onload","result","onerror","convertToBase64","then","base64","autocompleteService","setAutocompleteService","suggestions","setSuggestions","script","document","createElement","src","google","maps","places","AutocompleteService","body","appendChild","removeChild","handleLocationChange","setSuggestionTaken","prevFilter","getPlacePredictions","input","types","predictions","status","map","prediction","description","suggestionTaken","_jsxs","_Fragment","children","_jsx","APNavBar","className","APSidebar","role","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","to","underline","color","Typography","htmlFor","type","placeholder","onChange","disabled","Select","isSearchable","options","classNamePrefix","selectedOption","ids","handleCategory","isMulti","item","ReactQuill","theme","style","minHeight","height","selected","Object","entries","_ref","sessionStorage","setItem","_ref2","_ref3","defaultValue","selectedOptions","index","display","suggestion","onClick","handleSuggestionClick","LocationOnIcon","class","for","accept","alt","skills","getElementsByName","skillArray","test","text","showCancelButton","cancelButtonText","isConfirmed","updatedProfile","message","APFooter","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}