{"version":3,"file":"static/js/4250.c8cb5f82.chunk.js","mappings":"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","sources":["Components/adminpanel/Configuration/APEditPlan.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport APNavBar from \"../Elements/APNavBar\";\r\nimport APSidebar from \"../APSidebar/APSidebar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Link from \"@mui/material/Link\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../../api/BaseApi\";\r\nimport ApiKey from \"../../api/ApiKey\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport Cookies from \"js-cookie\";\r\nimport APFooter from \"../Elements/APFooter\";\r\n\r\nconst APAddPlan = () => {\r\n  const [userData, setUserData] = useState({\r\n    plan_name: \"\",\r\n    job_post: \"empty\",\r\n    resume_download: \"\",\r\n    candidate_search: \"0\",\r\n    job_apply: \"0\",\r\n    profile_view: \"0\",\r\n    amount: \"\",\r\n    planuser: \"\",\r\n    type_value: \"\",\r\n    type: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    plan_name: \"\",\r\n    job_post: \"\",\r\n    resume_download: \"\",\r\n    candidate_search: \"\",\r\n    job_apply: \"\",\r\n    profile_view: \"\",\r\n    amount: \"\",\r\n    planuser: \"\",\r\n    type_value: \"\",\r\n    type: \"\",\r\n    job_apply_checkbx: \"\",\r\n    job_apply_input: \"\",\r\n    emp_checkbx: \"\",\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const tokenKey = Cookies.get(\"token\");\r\n  const adminID = Cookies.get(\"adminID\");\r\n  const [planType, setPlanType] = useState([]);\r\n  const [typeofUser, setTypeofUser] = useState([]);\r\n\r\n  const { slug } = useParams();\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + `/admin/plan/editPlan/${slug}`,\r\n        null, // Pass null as the request body if not required\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n            adminid: adminID,\r\n          },\r\n        }\r\n      );\r\n      setLoading(false);\r\n      setUserData(response.data.response.plan);\r\n      setPlanType(response.data.response.planType);\r\n      setTypeofUser(response.data.response.userType);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.log(\"Cannot get plans data at APmanageplans\");\r\n    }\r\n  };\r\n\r\n  const navigate = useNavigate();\r\n  const handleClick = async () => {\r\n    try {\r\n      const newErrors = {};\r\n\r\n      if (userData.plan_name === \"\") {\r\n        newErrors.plan_name = \"Plan Name is required\";\r\n      }\r\n\r\n      if (userData.amount === \"\") {\r\n        newErrors.amount = \"Amount is required\";\r\n      }\r\n      if (userData.planuser === \"\") {\r\n        newErrors.planuser = \"User Plan is required\";\r\n      }\r\n      if (userData.type === \"\") {\r\n        newErrors.type = \"Plan Type is required\";\r\n      }\r\n      if (userData.type_value === \"\") {\r\n        newErrors.type_value = \"Type is required\";\r\n      }\r\n      if (userData.planuser === \"jobseeker\" && !isNumJobApplyCheckboxChecked) {\r\n        newErrors.job_apply_checkbx = \"Please select atleast one feature\";\r\n      }\r\n      if (\r\n        userData.planuser === \"jobseeker\" &&\r\n        isNumJobApplyCheckboxChecked &&\r\n        userData.job_apply === \"\"\r\n      ) {\r\n        newErrors.job_apply_input = \"Please enter a value\";\r\n      }\r\n      if (\r\n        userData.planuser === \"jobseeker\" &&\r\n        isNumJobApplyCheckboxChecked &&\r\n        userData.job_apply <= 0\r\n      ) {\r\n        newErrors.job_apply_input = \"Please enter a value greater than 0\";\r\n      }\r\n      // if (userData.planuser === \"jobseeker\" && (!isNumJobApplyCheckboxChecked)) {\r\n      //   newErrors.jobseeker_checkbx = \"Please select atleast one feature\";\r\n      // }\r\n      // if (\r\n      //   userData.planuser === \"employer\" &&\r\n      //   (!isNumJobPostCheckboxChecked ||\r\n      //     !isResumeDownloadCheckboxChecked ||\r\n      //     !isCandidateSearchFunctionalityCheckBxChecked ||\r\n      //     !isProfileViewCheckboxChecked)\r\n      // ) {\r\n      //   newErrors.emp_checkbx = \"Please select atleast one feature\";\r\n      // }else{\r\n      //   newErrors.emp_checkbx = \"\"\r\n      // }\r\n      // if (userData.planuser === \"jobseeker\" && isNumJobApplyCheckboxChecked && userData.job_apply === \"\") {\r\n      //   newErrors.job_apply_input = \"Please enter value greater than 0\"\r\n      // }\r\n\r\n      // Validate that at least one of the checkboxes is checked for employer plan\r\n      if (\r\n        userData.planuser === \"employer\" &&\r\n        !(\r\n          isNumJobPostCheckboxChecked ||\r\n          isResumeDownloadCheckboxChecked ||\r\n          isCandidateSearchFunctionalityCheckBxChecked ||\r\n          isProfileViewCheckboxChecked\r\n        )\r\n      ) {\r\n        newErrors.emp_checkbx = \"Please select at least one feature\";\r\n      }\r\n\r\n      if (\r\n        userData.planuser === \"employer\" &&\r\n        isNumJobPostCheckboxChecked &&\r\n        userData.job_post === \"\"\r\n      ) {\r\n        newErrors.job_post = \"Please enter a value\";\r\n      }\r\n      if (\r\n        userData.planuser === \"employer\" &&\r\n        isNumJobPostCheckboxChecked &&\r\n        userData.job_post <= 0\r\n      ) {\r\n        newErrors.job_post = \"Please enter a value greater than 0\";\r\n      }\r\n\r\n      // for employer - resume download\r\n      if (\r\n        userData.planuser === \"employer\" &&\r\n        isResumeDownloadCheckboxChecked &&\r\n        userData.resume_download === \"\"\r\n      ) {\r\n        newErrors.resume_download = \"Please enter a value\";\r\n      }\r\n      if (\r\n        userData.planuser === \"employer\" &&\r\n        isResumeDownloadCheckboxChecked &&\r\n        userData.resume_download <= 0\r\n      ) {\r\n        newErrors.resume_download = \"Please enter a value greater than 0\";\r\n      }\r\n\r\n      //for employer - profile view\r\n      if (\r\n        userData.planuser === \"employer\" &&\r\n        isProfileViewCheckboxChecked &&\r\n        userData.profile_view === \"\"\r\n      ) {\r\n        newErrors.profile_view = \"Please enter a value\";\r\n      }\r\n      if (\r\n        userData.planuser === \"employer\" &&\r\n        isProfileViewCheckboxChecked &&\r\n        userData.profile_view <= 0\r\n      ) {\r\n        newErrors.profile_view = \"Please enter a value greater than 0\";\r\n      }\r\n\r\n      setErrors(newErrors);\r\n      console.log(errors);\r\n\r\n      if (Object.keys(newErrors).length === 0) {\r\n        const confirmationResult = await Swal.fire({\r\n          title: \"Update Plan\",\r\n          text: \"Do you want to update this Plan?\",\r\n          icon: \"question\",\r\n          showCancelButton: true,\r\n          confirmButtonText: \"Yes\",\r\n          cancelButtonText: \"No\",\r\n        });\r\n\r\n        if (confirmationResult.isConfirmed) {\r\n          setLoading(true);\r\n\r\n          const response = await axios.post(\r\n            BaseApi + `/admin/plan/editPlan/${slug}`,\r\n            userData,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                key: ApiKey,\r\n                token: tokenKey,\r\n                adminid: adminID,\r\n              },\r\n            }\r\n          );\r\n\r\n          setLoading(false);\r\n\r\n          if (response.data.status === 200) {\r\n            Swal.fire({\r\n              title: \"Plan updated successfully!\",\r\n              icon: \"success\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n            setUserData({\r\n              ...userData,\r\n              plan_name: \"\",\r\n              type_value: \"\",\r\n              type: \"\",\r\n              amount: \"\",\r\n              userplan: \"\",\r\n              feature_ids: \"\",\r\n            });\r\n            window.scrollTo(0, 0);\r\n            navigate(\"/admin/plans/index\");\r\n          } else {\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"error\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed\",\r\n        text: \"Could not update plan. Please try again later!\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Could not add plan!\", error);\r\n    }\r\n  };\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === \"planuser\") {\r\n      const selectedUserType = e.target.value;\r\n      setUserType(selectedUserType);\r\n      if (value === \"employer\") {\r\n        setUserData({ ...userData, job_apply: \"0\" });\r\n      }\r\n      if (value === \"jobseeker\") {\r\n        setUserData({\r\n          ...userData,\r\n          job_post: \"0\",\r\n          resume_download: \"0\",\r\n          candidate_search: \"0\",\r\n          profile_view: \"0\",\r\n        });\r\n      }\r\n\r\n      // If the user type changes, hide the input box and checkbox\r\n      setIsNumJobApplyCheckboxChecked(false);\r\n      setIsProfileViewCheckboxChecked(false);\r\n      setIsResumeDownloadCheckboxChecked(false);\r\n    }\r\n    setUserData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      [name]: \"\",\r\n    }));\r\n  };\r\n\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const [usertype, setUserType] = useState(\"\");\r\n\r\n  const [isUnlimitedChecked, setIsUnlimitedChecked] = useState(false);\r\n\r\n  // Employer\r\n  // Number of job post\r\n  const [isNumJobPostCheckboxChecked, setIsNumJobPostCheckboxChecked] =\r\n    useState(false);\r\n  const [numJobPostInputValue, setNumJobPostInputValue] = useState(\"\");\r\n  const [isNumJobPostUnlimitedChecked, setIsNumJobPostUnlimitedChecked] =\r\n    useState(false);\r\n\r\n  // const handleNumJobPostCheckBxChange = (event) => {\r\n\r\n  //   if (!event.target.checked) {\r\n  //     setUserData({ ...userData, job_post: \"0\" });\r\n  //   }\r\n  //   if (!isNumJobPostUnlimitedChecked) {\r\n  //     setNumJobPostInputValue(event.target.value);\r\n  //   }\r\n  // };\r\n\r\n  const handleNumJobPostCheckBxChange = (event) => {\r\n    const isChecked = event.target.checked;\r\n\r\n    // Update the userData based on the checked state\r\n    if (isChecked) {\r\n      setUserData({ ...userData, job_post: \"\" }); // Or any other value you prefer\r\n      setIsNumJobPostCheckboxChecked(true);\r\n    } else {\r\n      setUserData({ ...userData, job_post: \"empty\" });\r\n      setIsNumJobPostCheckboxChecked(false);\r\n    }\r\n    setErrors({\r\n      emp_checkbx: \"\",\r\n    });\r\n    // Handle other logic if needed\r\n  };\r\n  const handleNumJobPostUnlimitedChange = (event) => {\r\n    setIsNumJobPostUnlimitedChecked(event.target.checked);\r\n    // if(userData.job_post === \"50000\") {\r\n    //   setIsNumJobPostUnlimitedChecked(true);\r\n    // }\r\n\r\n    if (event.target.checked) {\r\n      setNumJobPostInputValue(\"\"); // Reset input value when \"Unlimited\" is checked\r\n      setUserData({ ...userData, job_post: \"50000\" });\r\n      setErrors({\r\n        job_post_input: \"\",\r\n      });\r\n    } else {\r\n      setUserData({ ...userData, job_post: \"\" });\r\n      setIsNumJobPostUnlimitedChecked(false);\r\n    }\r\n\r\n    console.log(userData);\r\n  };\r\n\r\n  const handleJobPostInputChange = (e) => {\r\n    const inputValue = e.target.value;\r\n    const numericValue = parseFloat(inputValue);\r\n    // if (numericValue <= 0) {\r\n    //   setErrors({\r\n    //     job_post_input: \"Please enter value geater than 0\",\r\n    //   });\r\n    //   return;\r\n    // } else {\r\n    //   setErrors({\r\n    //     job_post_input: \"\",\r\n    //   });\r\n    // }\r\n\r\n    if (!isNumJobPostUnlimitedChecked && numericValue > 0) {\r\n      setNumJobPostInputValue(inputValue);\r\n      setUserData({\r\n        ...userData,\r\n        job_post: numericValue,\r\n      });\r\n      setErrors({\r\n        job_post: \"\",\r\n      });\r\n      console.log(userData);\r\n    }\r\n  };\r\n\r\n  // **********End**********\r\n\r\n  // number of resume download\r\n  const [isResumeDownloadCheckboxChecked, setIsResumeDownloadCheckboxChecked] =\r\n    useState(false);\r\n  const [resumeDownloadsInputValue, setResumeDownloadsInputValue] =\r\n    useState(\"\");\r\n  const [\r\n    isResumeDownloadsUnlimitedChecked,\r\n    setIsResumeDownloadsUnlimitedChecked,\r\n  ] = useState(false);\r\n  // Function to handle changes in the \"Unlimited\" checkbox for Resume Downloads\r\n  const handleResumeDownloadsUnlimitedChange = (e) => {\r\n    // setIsResumeDownloadsUnlimitedChecked(e.target.checked);\r\n\r\n    // // If \"Unlimited\" is checked, clear the input value\r\n    // if (e.target.checked) {\r\n    //   setResumeDownloadsInputValue(\"\");\r\n    //   setUserData({ ...userData, resume_download: \"1000000\" });\r\n    // }\r\n    // console.log(userData);\r\n\r\n    setIsResumeDownloadsUnlimitedChecked(e.target.checked);\r\n    // if(userData.job_post === \"50000\") {\r\n    //   setIsNumJobPostUnlimitedChecked(true);\r\n    // }\r\n\r\n    if (e.target.checked) {\r\n      setResumeDownloadsInputValue(\"\"); // Reset input value when \"Unlimited\" is checked\r\n      setUserData({ ...userData, resume_download: \"50000\" });\r\n      setErrors({\r\n        resume_download_input: \"\",\r\n      });\r\n    } else {\r\n      setUserData({ ...userData, resume_download: \"\" });\r\n      setIsResumeDownloadsUnlimitedChecked(false);\r\n    }\r\n\r\n    console.log(userData);\r\n  };\r\n  // Function to handle changes in the \"Number of Resume Downloads\" input value\r\n  const handleResumeDownloadsCheckBxChange = (e) => {\r\n    // setIsResumeDownloadCheckboxChecked(e.target.checked);\r\n    // if (!e.target.checked) {\r\n    //   setUserData({ ...userData, resume_download: \"0\" });\r\n    // }\r\n    // if (!isResumeDownloadsUnlimitedChecked) {\r\n    //   setResumeDownloadsInputValue(e.target.value);\r\n    // }\r\n    const isChecked = e.target.checked;\r\n    // Update the userData based on the checked state\r\n    if (isChecked) {\r\n      setUserData({ ...userData, resume_download: \"\" }); // Or any other value you prefer\r\n      setIsResumeDownloadCheckboxChecked(true);\r\n    } else {\r\n      setUserData({ ...userData, resume_download: \"empty\" });\r\n      setIsResumeDownloadCheckboxChecked(false);\r\n    }\r\n    setErrors({\r\n      emp_checkbx: \"\",\r\n    });\r\n  };\r\n\r\n  const handleResumeDownloadInputChange = (e) => {\r\n    const inputValue = e.target.value;\r\n    const numericValue = parseFloat(inputValue);\r\n    // if (numericValue <= 0) {\r\n    //   setErrors({\r\n    //     resume_download_input: \"Please enter value geater than 0\",\r\n    //   });\r\n    //   return;\r\n    // } else {\r\n    //   setErrors({\r\n    //     resume_download_input: \"\",\r\n    //   });\r\n    // }\r\n\r\n    if (!isResumeDownloadsUnlimitedChecked && numericValue > 0) {\r\n      setResumeDownloadsInputValue(inputValue);\r\n      setUserData({\r\n        ...userData,\r\n        resume_download: numericValue,\r\n      });\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        resume_download: \"\",\r\n      }));\r\n      console.log(userData);\r\n    }\r\n  };\r\n\r\n  // *****************End****************\r\n\r\n  // Access candidate search functionality\r\n  const [\r\n    isCandidateSearchFunctionalityCheckBxChecked,\r\n    setIsCandidateSearchFunctionalityCheckBxChecked,\r\n  ] = useState(false);\r\n\r\n  const handleCandidateSearchFunctionalityCheckBxChange = (e) => {\r\n    setIsCandidateSearchFunctionalityCheckBxChecked(e.target.checked);\r\n    if (isCandidateSearchFunctionalityCheckBxChecked) {\r\n      setUserData({ ...userData, candidate_search: \"1\" });\r\n    } else {\r\n      setUserData({ ...userData, candidate_search: \"empty\" });\r\n    }\r\n    console.log(userData);\r\n    setErrors({\r\n      emp_checkbx: \"\",\r\n    });\r\n  };\r\n\r\n  // *************End*************\r\n\r\n  // Number of candidate profile view\r\n\r\n  const [isProfileViewCheckboxChecked, setIsProfileViewCheckboxChecked] =\r\n    useState(false);\r\n  const [profileViewsInputValue, setProfileViewsInputValue] = useState(\"\");\r\n  const [isProfileViewsUnlimitedChecked, setIsProfileViewsUnlimitedChecked] =\r\n    useState(false);\r\n\r\n  // Function to handle changes in the \"Number of Candidate Profile Views\" input value\r\n  const handleProfileViewsCheckBxChange = (e) => {\r\n    // setIsProfileViewCheckboxChecked(e.target.checked);\r\n    // if (!e.target.checked) {\r\n    //   setUserData({ ...userData, profile_view: \"0\" });\r\n    // }\r\n    // if (!isProfileViewsUnlimitedChecked) {\r\n    //   setProfileViewsInputValue(e.target.value);\r\n    // }\r\n    // console.log(userData);\r\n\r\n    const isChecked = e.target.checked;\r\n    // Update the userData based on the checked state\r\n    if (isChecked) {\r\n      setUserData({ ...userData, profile_view: \"\" }); // Or any other value you prefer\r\n      setIsProfileViewCheckboxChecked(true);\r\n    } else {\r\n      setUserData({ ...userData, profile_view: \"empty\" });\r\n      setIsProfileViewCheckboxChecked(false);\r\n    }\r\n    setErrors({\r\n      emp_checkbx: \"\",\r\n    });\r\n  };\r\n\r\n  // Function to handle changes in the \"Unlimited\" checkbox for Profile Views\r\n  const handleProfileViewsUnlimitedChange = (e) => {\r\n    // setIsProfileViewsUnlimitedChecked(e.target.checked);\r\n\r\n    // // If \"Unlimited\" is checked, clear the input value\r\n    // if (e.target.checked) {\r\n    //   setProfileViewsInputValue(\"\");\r\n    //   setUserData({ ...userData, profile_view: \"1000000\" });\r\n    // }\r\n\r\n    setIsProfileViewsUnlimitedChecked(e.target.checked);\r\n    // if(userData.job_post === \"50000\") {\r\n    //   setIsNumJobPostUnlimitedChecked(true);\r\n    // }\r\n\r\n    if (e.target.checked) {\r\n      setProfileViewsInputValue(\"\"); // Reset input value when \"Unlimited\" is checked\r\n      setUserData({ ...userData, profile_view: \"1000000\" });\r\n      setErrors({\r\n        profile_view_input: \"\",\r\n      });\r\n    } else {\r\n      setUserData({ ...userData, profile_view: \"\" });\r\n      setIsProfileViewsUnlimitedChecked(false);\r\n    }\r\n\r\n    console.log(userData);\r\n  };\r\n\r\n  const handleProfileViewInputChange = (e) => {\r\n    const inputValue = e.target.value;\r\n    const numericValue = parseFloat(inputValue);\r\n    // if (numericValue <= 0) {\r\n    //   setErrors({\r\n    //     profile_view_input: \"Please enter value geater than 0\",\r\n    //   });\r\n    //   return;\r\n    // } else {\r\n    //   setErrors({\r\n    //     profile_view_input: \"\",\r\n    //   });\r\n    // }\r\n\r\n    if (!isProfileViewsUnlimitedChecked && numericValue > 0) {\r\n      setProfileViewsInputValue(inputValue);\r\n      setUserData({\r\n        ...userData,\r\n        profile_view: numericValue,\r\n      });\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        profile_view: \"\",\r\n      }));\r\n      console.log(userData);\r\n    }\r\n  };\r\n\r\n  // ***************End*****************\r\n\r\n  //Jobseeker\r\n  // Number of Job Apply\r\n  const [isNumJobApplyCheckboxChecked, setIsNumJobApplyCheckboxChecked] =\r\n    useState(false);\r\n  const [numJobApplyInputValue, setNumJobApplyInputValue] = useState(\"\");\r\n  const [isNumJobApplyUnlimitedChecked, setIsNumJobApplyUnlimitedChecked] =\r\n    useState(false);\r\n  const [jobApplyValidation, setJobApplyValidation] = useState(false);\r\n  const [jobApplyUnlimitedCheck, setJobApplyUnlimitedCheck] = useState(false);\r\n\r\n  const handleNumJobApplyCheckBxChange = (event) => {\r\n    const isChecked = event.target.checked;\r\n\r\n    // Update the userData based on the checked state\r\n    if (isChecked) {\r\n      setUserData({ ...userData, job_apply: \"\" }); // Or any other value you prefer\r\n      setIsNumJobApplyCheckboxChecked(true);\r\n    } else {\r\n      setUserData({ ...userData, job_apply: \"empty\" });\r\n      setIsNumJobApplyCheckboxChecked(false);\r\n      setIsNumJobApplyUnlimitedChecked(false);\r\n    }\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      job_apply_checkbx: \"\",\r\n    }));\r\n  };\r\n\r\n  const handleJobseekerUnlimitedChange = (event) => {\r\n    setIsNumJobApplyUnlimitedChecked(event.target.checked);\r\n    // if(userData.job_post === \"50000\") {\r\n    //   setIsNumJobPostUnlimitedChecked(true);\r\n    // }\r\n\r\n    if (event.target.checked) {\r\n      setNumJobApplyInputValue(\"\"); // Reset input value when \"Unlimited\" is checked\r\n      setUserData({ ...userData, job_apply: \"1000000\" });\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        job_apply_input: \"\",\r\n      }));\r\n      setIsNumJobApplyUnlimitedChecked(true);\r\n    } else {\r\n      setUserData({ ...userData, job_apply: \"\" });\r\n      setIsNumJobApplyUnlimitedChecked(false);\r\n    }\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      job_apply_input: \"\",\r\n    }));\r\n  };\r\n\r\n  const handleJobApplyInputChange = (e) => {\r\n    const inputValue = e.target.value;\r\n    const numericValue = parseFloat(inputValue);\r\n    // if (numericValue <= 0) {\r\n    //   setErrors({\r\n    //     job_post_input: \"Please enter value geater than 0\",\r\n    //   });\r\n    //   return;\r\n    // } else {\r\n    //   setErrors({\r\n    //     job_apply_input: \"\",\r\n    //   });\r\n    // }\r\n\r\n    if (!isNumJobApplyUnlimitedChecked && numericValue > 0) {\r\n      setNumJobApplyInputValue(inputValue);\r\n      setUserData({\r\n        ...userData,\r\n        job_apply: numericValue,\r\n      });\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        job_apply_input: \"\",\r\n      }));\r\n      console.log(userData);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    // Check if userData.job_apply is greater than 0\r\n\r\n    // Job Apply(Jobseeker)\r\n    if (userData.job_apply != \"empty\") {\r\n      setIsNumJobApplyCheckboxChecked(true);\r\n    } else {\r\n      setIsNumJobApplyCheckboxChecked(false);\r\n    }\r\n    if (userData.job_apply === \"1000000\") {\r\n      setIsNumJobApplyUnlimitedChecked(true);\r\n    }\r\n\r\n    // Job Post\r\n    if (userData.job_post != \"empty\") {\r\n      setIsNumJobPostCheckboxChecked(true);\r\n    } else {\r\n      setIsNumJobPostCheckboxChecked(false);\r\n    }\r\n    if (userData.job_post === \"50000\") {\r\n      setIsNumJobPostUnlimitedChecked(true);\r\n    }\r\n\r\n    // Resume download\r\n    if (userData.resume_download != \"empty\") {\r\n      setIsResumeDownloadCheckboxChecked(true);\r\n    } else {\r\n      setIsResumeDownloadCheckboxChecked(false);\r\n    }\r\n    if (userData.resume_download === \"1000000\") {\r\n      setIsResumeDownloadsUnlimitedChecked(true);\r\n    }\r\n\r\n    // Profile view\r\n    if (userData.profile_view != \"empty\") {\r\n      setIsProfileViewCheckboxChecked(true);\r\n    } else {\r\n      setIsProfileViewCheckboxChecked(false);\r\n    }\r\n    if (userData.profile_view === \"1000000\") {\r\n      setIsProfileViewsUnlimitedChecked(true);\r\n    }\r\n\r\n    console.log(isNumJobApplyCheckboxChecked);\r\n  }, [userData]);\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/admin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  return (\r\n    <>\r\n      <APNavBar />\r\n      <div className=\"APBasic\">\r\n        <APSidebar />\r\n\r\n        {loading ? (\r\n          <>\r\n            <div className=\"loader-container\"></div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"site-min-height\">\r\n              <div className=\"breadCumb1\" role=\"presentation\">\r\n                <Breadcrumbs\r\n                  aria-label=\"breadcrumb\"\r\n                  separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                >\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/admins/dashboard\")}\r\n                  >\r\n                    Dashboard\r\n                  </Link>\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/plans/index\")}\r\n                  >\r\n                    Plan List\r\n                  </Link>\r\n                  <Typography color=\"text.primary\">Edit Plan</Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n\r\n              <h2 className=\"adminPageHeading\">Edit Plan</h2>\r\n              <form className=\"adminForm\">\r\n                <div className=\"mb-4 mt-5\">\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Plan Name<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example1\"\r\n                      className=\"form-control\"\r\n                      name=\"plan_name\"\r\n                      placeholder=\"Plan Name\"\r\n                      value={userData.plan_name}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </div>\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Type<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className=\"form-select\"\r\n                      aria-label=\"Default select example\"\r\n                      name=\"type\"\r\n                      value={userData.type}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected>Select Plan Type</option>\r\n                      {Object.entries(planType).map(([key, value]) => {\r\n                        return <option value={key}>{value}</option>;\r\n                      })}\r\n                    </select>\r\n                  </div>\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      User Plan<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className=\"form-select\"\r\n                      aria-label=\"Default select example\"\r\n                      name=\"planuser\"\r\n                      value={userData.planuser}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected>Select User Plan</option>\r\n                      {Object.entries(typeofUser).map(([key, value]) => {\r\n                        return <option value={key}>{value}</option>;\r\n                      })}\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      {userData.type === \"Years\"\r\n                        ? \"Time Period (In Years)\"\r\n                        : userData.type === \"Months\"\r\n                        ? \"Time Period (In Months)\"\r\n                        : \"Time Period\"}\r\n\r\n                      <span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example1\"\r\n                      className=\"form-control\"\r\n                      name=\"type_value\"\r\n                      placeholder=\"Time Period\"\r\n                      value={userData.type_value}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </div>\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Plan Amount<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example1\"\r\n                      className=\"form-control\"\r\n                      name=\"amount\"\r\n                      placeholder=\"Plan Amount\"\r\n                      value={userData.amount}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </div>\r\n\r\n                  {/* ****************************** Code for Employer ************************ */}\r\n\r\n                  {userData.planuser === \"employer\" && (\r\n                    <>\r\n                      {errors.emp_checkbx && (\r\n                        <div className=\"text-danger mb-3\">\r\n                          {errors.emp_checkbx}\r\n                        </div>\r\n                      )}\r\n                      <div className=\"mb-4 DashBoardInputBx checkBoxDiv\">\r\n                        <label htmlFor=\"formFile\" className=\"form-label\">\r\n                          Select Features<span className=\"RedStar\">*</span>\r\n                        </label>\r\n                        <div className=\"NumberCheck\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            id=\"jobPostCheckbox\"\r\n                            className=\"\"\r\n                            label=\"Number of Job Post\"\r\n                            // className=\"form-select\"\r\n                            // aria-label=\"Default select example\"\r\n                            name=\"job_post\"\r\n                            // value={userData.feature_ids}\r\n                            checked={\r\n                              userData.planuser === \"employer\" &&\r\n                              // userData.job_post > 0\r\n                              userData.job_post != \"empty\"\r\n                            }\r\n                            onChange={handleNumJobPostCheckBxChange}\r\n                          />\r\n\r\n                          <label>Number of Job Post</label>\r\n                        </div>\r\n\r\n                        <div className=\"NumberCheck\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            id=\"resumeDownloadsCheckbox\"\r\n                            className=\"\"\r\n                            name=\"resume_download\"\r\n                            // value={userData}\r\n                            checked={\r\n                              userData.planuser === \"employer\" &&\r\n                              // userData.job_post > 0\r\n                              userData.resume_download != \"empty\"\r\n                            }\r\n                            onChange={handleResumeDownloadsCheckBxChange}\r\n                          />\r\n                          <label>Number of resume download</label>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"mb-4 DashBoardInputBx checkBoxDiv\">\r\n                        <div className=\"NumberCheck\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            id=\"jobPostCheckbox\"\r\n                            className=\"\"\r\n                            label=\"Number of Job Post\"\r\n                            // className=\"form-select\"\r\n                            // aria-label=\"Default select example\"\r\n                            name=\"candidate_search\"\r\n                            checked={\r\n                              userData.planuser === \"employer\" &&\r\n                              // userData.job_post > 0\r\n                              userData.candidate_search != \"empty\"\r\n                            }\r\n                            // value={userData.candidate_search}\r\n                            onChange={\r\n                              handleCandidateSearchFunctionalityCheckBxChange\r\n                            }\r\n                          />\r\n                          <label>Access candidate search functionality</label>\r\n                        </div>\r\n                        <div className=\"NumberCheck\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            id=\"profileViewsCheckbox\"\r\n                            className=\"\"\r\n                            name=\"profile_view\"\r\n                            checked={\r\n                              userData.planuser === \"employer\" &&\r\n                              // userData.job_post > 0\r\n                              userData.profile_view != \"empty\"\r\n                            }\r\n                            // value={userData.profile_view}\r\n                            onChange={handleProfileViewsCheckBxChange}\r\n                          />\r\n                          <label>Number of Candidate Profile Views</label>\r\n                        </div>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                  {userData.planuser === \"employer\" &&\r\n                    (isNumJobPostCheckboxChecked ||\r\n                      userData.job_post != \"empty\") && (\r\n                      <>\r\n                        <div className=\"mb-4 DashBoardInputBx\">\r\n                          <label htmlFor=\"jobApplyInput\" className=\"form-label\">\r\n                            Number of Job Post:\r\n                          </label>\r\n                          <input\r\n                            type=\"text\"\r\n                            id=\"jobPostInput\"\r\n                            className={`form-control ${\r\n                              errors.job_post_input && \"input-error\"\r\n                            }`}\r\n                            name=\"job_post\"\r\n                            // value={userData.job_post}\r\n                            value={\r\n                              isNumJobPostUnlimitedChecked\r\n                                ? \"\"\r\n                                : userData.job_post\r\n                            }\r\n                            onChange={handleJobPostInputChange}\r\n                            disabled={\r\n                              isNumJobPostUnlimitedChecked ||\r\n                              userData.job_post === \"50000\"\r\n                            }\r\n                          />\r\n\r\n                          <div className=\"mb-4 DashBoardInputBx checkBoxDiv\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              id=\"unlimitedCheckbox\"\r\n                              className=\"unlimitedCheckbx\"\r\n                              name=\"job_post\"\r\n                              checked={\r\n                                isNumJobPostUnlimitedChecked ||\r\n                                userData.job_post === \"50000\"\r\n                              }\r\n                              onChange={handleNumJobPostUnlimitedChange}\r\n                            />\r\n                            <label className=\"unlimitedLabel\">Unlimited</label>\r\n                          </div>\r\n                          {errors.job_post && (\r\n                            <div className=\"text-danger\">{errors.job_post}</div>\r\n                          )}\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  {userData.planuser === \"employer\" &&\r\n                    (isResumeDownloadCheckboxChecked ||\r\n                      userData.resume_download != \"empty\") && (\r\n                      <>\r\n                        <div className=\"mb-4 DashBoardInputBx\">\r\n                          <label\r\n                            htmlFor=\"resumeDownloadsInput\"\r\n                            className=\"form-label\"\r\n                          >\r\n                            Number of Resume Downloads:\r\n                          </label>\r\n                          <input\r\n                            type=\"text\"\r\n                            id=\"jobPostInput\"\r\n                            className={`form-control ${\r\n                              errors.resume_download && \"input-error\"\r\n                            }`}\r\n                            name=\"resume_download\"\r\n                            value={\r\n                              isResumeDownloadsUnlimitedChecked\r\n                                ? \"\"\r\n                                : userData.resume_download\r\n                            }\r\n                            onChange={handleResumeDownloadInputChange}\r\n                            disabled={\r\n                              isResumeDownloadsUnlimitedChecked ||\r\n                              userData.resume_download === \"1000000\"\r\n                            }\r\n                          />\r\n\r\n                          <div className=\"mb-4 DashBoardInputBx checkBoxDiv\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              id=\"resumeDownloadsUnlimitedCheckbox\"\r\n                              className=\"unlimitedCheckbx\"\r\n                              name=\"resumeDownloadsUnlimited\"\r\n                              checked={\r\n                                isResumeDownloadsUnlimitedChecked ||\r\n                                userData.resume_download === \"1000000\"\r\n                              }\r\n                              onChange={handleResumeDownloadsUnlimitedChange}\r\n                            />\r\n                            <label className=\"unlimitedLabel\">Unlimited</label>\r\n                          </div>\r\n                          {errors.resume_download && (\r\n                            <div className=\"text-danger\">\r\n                              {errors.resume_download}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  {userData.planuser === \"employer\" &&\r\n                    (isProfileViewCheckboxChecked ||\r\n                      userData.profile_view != \"empty\") && (\r\n                      <>\r\n                        <div className=\"mb-4 DashBoardInputBx\">\r\n                          <label\r\n                            htmlFor=\"profileViewsInput\"\r\n                            className=\"form-label\"\r\n                          >\r\n                            Number of Candidate Profile Views:\r\n                          </label>\r\n                          <input\r\n                            type=\"text\"\r\n                            id=\"jobPostInput\"\r\n                            className={`form-control ${\r\n                              errors.profile_view && \"input-error\"\r\n                            }`}\r\n                            name=\"profile_view\"\r\n                            value={\r\n                              isProfileViewsUnlimitedChecked\r\n                                ? \"\"\r\n                                : userData.profile_view\r\n                            }\r\n                            onChange={handleProfileViewInputChange}\r\n                            disabled={\r\n                              isProfileViewsUnlimitedChecked ||\r\n                              userData.profile_view === \"1000000\"\r\n                            }\r\n                          />\r\n\r\n                          <div className=\"mb-2 DashBoardInputBx checkBoxDiv\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              id=\"profileViewsUnlimitedCheckbox\"\r\n                              className=\"unlimitedCheckbx\"\r\n                              name=\"profileViewsUnlimited\"\r\n                              checked={\r\n                                isProfileViewsUnlimitedChecked ||\r\n                                userData.profile_view === \"1000000\"\r\n                              }\r\n                              onChange={handleProfileViewsUnlimitedChange}\r\n                            />\r\n                            <label className=\"unlimitedLabel\">Unlimited</label>\r\n                          </div>\r\n                          {errors.profile_view && (\r\n                            <div className=\"text-danger\">\r\n                              {errors.profile_view}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </>\r\n                    )}\r\n\r\n                  {/* *************************** Code for Jobseeker****************************** */}\r\n\r\n                  {userData.planuser === \"jobseeker\" && (\r\n                    <div className=\"mb-5 DashBoardInputBx checkBoxDiv\">\r\n                      <label htmlFor=\"formFile\" className=\"form-label\">\r\n                        Select Features<span className=\"RedStar\">*</span>\r\n                      </label>\r\n                      <div className=\"NumberCheck\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          id=\"jobPostCheckbox\"\r\n                          className=\"m-4\"\r\n                          label=\"Number of Job Post\"\r\n                          // className=\"form-select\"\r\n                          // aria-label=\"Default select example\"\r\n                          name=\"job_apply\"\r\n                          // value={userData.feature_ids}\r\n                          checked={\r\n                            userData.planuser === \"jobseeker\" &&\r\n                            userData.job_apply != \"empty\"\r\n                          }\r\n                          onChange={handleNumJobApplyCheckBxChange}\r\n                        />\r\n\r\n                        <label>Number of Job Apply</label>\r\n                      </div>\r\n                      {errors.job_apply_checkbx && (\r\n                        <div className=\"text-danger\">\r\n                          {errors.job_apply_checkbx}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                  {userData.planuser === \"jobseeker\" &&\r\n                    (isNumJobApplyCheckboxChecked ||\r\n                      userData.job_apply != \"empty\") && (\r\n                      <div className=\"mb-4 DashBoardInputBx\">\r\n                        <label htmlFor=\"jobApplyInput\" className=\"form-label\">\r\n                          Number of Job Apply:\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          id=\"jobPostInput\"\r\n                          className={`form-control ${\r\n                            errors.job_apply_input && \"input-error\"\r\n                          }`}\r\n                          name=\"job_apply\"\r\n                          value={\r\n                            isNumJobApplyUnlimitedChecked\r\n                              ? \"\"\r\n                              : userData.job_apply\r\n                          }\r\n                          onChange={handleJobApplyInputChange}\r\n                          disabled={\r\n                            isNumJobApplyUnlimitedChecked ||\r\n                            userData.job_apply === \"1000000\"\r\n                          }\r\n                        />\r\n\r\n                        <div className=\"mb-5 DashBoardInputBx checkBoxDiv\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            id=\"unlimitedCheckbox\"\r\n                            className=\"unlimitedCheckbx\"\r\n                            name=\"job_apply\"\r\n                            checked={\r\n                              jobApplyUnlimitedCheck ||\r\n                              userData.job_apply === \"1000000\"\r\n                            }\r\n                            onChange={handleJobseekerUnlimitedChange}\r\n                          />\r\n                          <label className=\"unlimitedLabel\">Unlimited</label>\r\n                        </div>\r\n                        {errors.job_apply_input && (\r\n                          <div className=\"text-danger\">\r\n                            {errors.job_apply_input}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                </div>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary adminLowerButton1\"\r\n                  onClick={handleClick}\r\n                >\r\n                  SAVE\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary adminLowerButton2\"\r\n                  // onClick={() => handleReset()}\r\n                >\r\n                  RESET\r\n                </button>\r\n              </form>\r\n            </div>\r\n            <APFooter />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default APAddPlan;\r\n"],"names":["APAddPlan","userData","setUserData","useState","plan_name","job_post","resume_download","candidate_search","job_apply","profile_view","amount","planuser","type_value","type","errors","setErrors","job_apply_checkbx","job_apply_input","emp_checkbx","loading","setLoading","tokenKey","Cookies","adminID","planType","setPlanType","typeofUser","setTypeofUser","slug","useParams","navigate","useNavigate","handleChange","e","name","value","target","selectedUserType","setUserType","setIsNumJobApplyCheckboxChecked","setIsProfileViewCheckboxChecked","setIsResumeDownloadCheckboxChecked","prev","inputValue","setInputValue","usertype","isUnlimitedChecked","setIsUnlimitedChecked","isNumJobPostCheckboxChecked","setIsNumJobPostCheckboxChecked","numJobPostInputValue","setNumJobPostInputValue","isNumJobPostUnlimitedChecked","setIsNumJobPostUnlimitedChecked","isResumeDownloadCheckboxChecked","resumeDownloadsInputValue","setResumeDownloadsInputValue","isResumeDownloadsUnlimitedChecked","setIsResumeDownloadsUnlimitedChecked","isCandidateSearchFunctionalityCheckBxChecked","setIsCandidateSearchFunctionalityCheckBxChecked","isProfileViewCheckboxChecked","profileViewsInputValue","setProfileViewsInputValue","isProfileViewsUnlimitedChecked","setIsProfileViewsUnlimitedChecked","isNumJobApplyCheckboxChecked","numJobApplyInputValue","setNumJobApplyInputValue","isNumJobApplyUnlimitedChecked","setIsNumJobApplyUnlimitedChecked","jobApplyValidation","setJobApplyValidation","jobApplyUnlimitedCheck","setJobApplyUnlimitedCheck","useEffect","console","log","async","response","axios","BaseApi","headers","key","ApiKey","token","adminid","data","plan","userType","error","getData","window","scrollTo","_jsxs","_Fragment","children","_jsx","APNavBar","className","APSidebar","role","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","underline","color","onClick","Typography","class","for","id","placeholder","onChange","selected","Object","entries","map","_ref","_ref2","htmlFor","label","checked","event","job_post_input","numericValue","parseFloat","disabled","resume_download_input","profile_view_input","newErrors","keys","length","Swal","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","isConfirmed","status","userplan","feature_ids","message","APFooter"],"sourceRoot":""}