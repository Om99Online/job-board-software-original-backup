{"version":3,"file":"static/js/8283.0cbb95d9.chunk.js","mappings":"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","sources":["Components/adminpanel/Jobs/APCopyJob.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport APNavBar from \"../Elements/APNavBar\";\r\nimport APSidebar from \"../APSidebar/APSidebar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport JoditEditor from \"jodit-react\";\r\nimport { useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../../api/BaseApi\";\r\nimport ApiKey from \"../../api/ApiKey\";\r\nimport { useNavigate, Link, useParams } from \"react-router-dom\";\r\nimport HTMLReactParser from \"html-react-parser\";\r\nimport Select from \"react-select\";\r\nimport Swal from \"sweetalert2\";\r\nimport Cookies from \"js-cookie\";\r\nimport APFooter from \"../Elements/APFooter\";\r\n\r\nconst APCopyJob = () => {\r\n  // const [userData, setUserData] = useState({\r\n  //   user_id: \"\",\r\n  //   job_title: \"\",\r\n  //   category: \"\",\r\n  //   jobDescription: \"\",\r\n  //   company_name: \"\",\r\n  //   work_type: \"\",\r\n  //   contact_name: \"\",\r\n  //   skill: \"\",\r\n  //   contact_number: \"\",\r\n  //   company_website: \"\",\r\n  //   companyProfile: \"\",\r\n  //   designation: \"\",\r\n  //   location: \"\",\r\n  //   last_date: \"\",\r\n  //   experience: \"\",\r\n  //   annual_salary: \"\",\r\n  //   logo: \"\",\r\n  //   subCategory: \"\",\r\n  // });\r\n  const [errors, setErrors] = useState({\r\n    user_id: \"\",\r\n    job_title: \"\",\r\n    category: \"\",\r\n    jobDescription: \"\",\r\n    company_name: \"\",\r\n    work_type: \"\",\r\n    contact_name: \"\",\r\n    skill: \"\",\r\n    contact_number: \"\",\r\n    company_website: \"\",\r\n    companyProfile: \"\",\r\n    designation: \"\",\r\n    location: \"\",\r\n    last_date: \"\",\r\n    experience: \"\",\r\n    annual_salary: \"\",\r\n    logo: \"\",\r\n    subCategory: \"\",\r\n  });\r\n  const [jobData, setJobData] = useState({\r\n    job_title: \"\",\r\n    category: \"\",\r\n    subCategory: [],\r\n    jobDescription: \"\",\r\n    company_name: \"\",\r\n    companyProfile: \"\",\r\n    work_type: \"\",\r\n    contact_name: \"\",\r\n    contact_number: \"\",\r\n    company_website: \"\",\r\n    skill: \"\",\r\n    designation: \"\",\r\n    location: \"\",\r\n    experience: \"\",\r\n    annual_salary: \"\",\r\n    logo: \"\",\r\n    last_date: \"\",\r\n    user_id: \"\",\r\n  });\r\n\r\n  // From create job section\r\n\r\n  const editor = useRef(null);\r\n  const tokenKey = Cookies.get(\"token\");\r\n  const adminID = Cookies.get(\"adminID\");\r\n  const mapKey = Cookies.get(\"mapKey\");\r\n\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // useEffect(() => {\r\n  //   if (tokenKey === null || tokenKey === \"\") {\r\n  //     navigate(\"/user/employerlogin\");\r\n  //   }\r\n  // }, []);\r\n\r\n  const [totalData, setTotalData] = useState([]);\r\n  const [jobCategories, setJobCategories] = useState([]);\r\n  const [subCategories, setSubCategories] = useState([]);\r\n  const [designationList, setDesignationList] = useState([]);\r\n  const [skillList, setSkillList] = useState([]);\r\n  const [experience, setExperience] = useState([]);\r\n  const [salary, setSalary] = useState([]);\r\n  const [workType, setWorkType] = useState([]);\r\n  const [employersList, setEmployersList] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"skill\") {\r\n      setJobData((prevJobData) => ({\r\n        ...prevJobData,\r\n        skill: [...prevJobData.skill, value],\r\n      }));\r\n    } else if (name === \"subCategory\") {\r\n      setJobData((prevJobData) => ({\r\n        ...prevJobData,\r\n        subCategory: [...prevJobData.subCategory, value],\r\n      }));\r\n    } else {\r\n      setJobData((prevJobData) => ({\r\n        ...prevJobData,\r\n        [name]: value,\r\n      }));\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        [name]: \"\",\r\n      }));\r\n    }\r\n    // if (value.trim() === \"\") {\r\n    //   setErrors((prev) => ({\r\n    //     ...prev,\r\n    //     [name]: `${name.charAt(0).toUpperCase() + name.slice(1)} is required`,\r\n    //   }));\r\n    // } else {\r\n    //   // If the input is not empty, clear the error message\r\n    //   setErrors((prev) => ({\r\n    //     ...prev,\r\n    //     [name]: \"\",\r\n    //   }));\r\n    // }\r\n  };\r\n\r\n  const {slug} = useParams();\r\n\r\n  const handleSkillChange = (selectedOptions) => {\r\n    // Update the jobData state with the selected skills\r\n    setJobData((prevJobData) => ({\r\n      ...prevJobData,\r\n      skill: selectedOptions.map((option) => option.id),\r\n    }));\r\n  };\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + `/admin/job/admin_add/${slug}`,\r\n        null,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n            adminid: adminID,\r\n          },\r\n        }\r\n      );\r\n      setLoading(false);\r\n\r\n      console.log(response);\r\n\r\n      setTotalData(response.data);\r\n      setJobCategories(response.data.response.categories);\r\n      setDesignationList(response.data.response.designationlList);\r\n      setSkillList(response.data.response.skillList);\r\n      setExperience(response.data.response.experience);\r\n      setSalary(response.data.response.sallery);\r\n      setWorkType(response.data.response.worktype);\r\n      setEmployersList(response.data.response.employers);\r\n      console.log(totalData);\r\n    } catch (error) {\r\n      console.log(\"No data received\");\r\n    }\r\n  };\r\n\r\n  const getSubCategories = async (id) => {\r\n    try {\r\n      const subCatData = await axios.post(\r\n        BaseApi + `/categories/getSubCategory/${id}`,\r\n        null,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n            adminid: adminID,\r\n          },\r\n        }\r\n      );\r\n      setSubCategories(subCatData.data.response);\r\n    } catch (error) {\r\n      console.log(\"Couldn't get Sub category data!\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (tokenKey === null || tokenKey === \"\") {\r\n      navigate(\"/admin\");\r\n    }\r\n    getData();\r\n    getSubCategories();\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  const handleClick = async () => {\r\n    var skills = document.getElementsByName(\"skill\");\r\n    var skillArray = [];\r\n\r\n    skills.forEach((element) => {\r\n      skillList.forEach((skill) => {\r\n        if (skill.id == element.value) {\r\n          skillArray.push(skill.id);\r\n        }\r\n      });\r\n    });\r\n\r\n    try {\r\n      // const newErrors = {};\r\n\r\n      // if (jobData.annual_salary === \"\") {\r\n      //   newErrors.annual_salary = \"Annual Salary is required\";\r\n      //   window.scrollTo(0, 0);\r\n      // }\r\n\r\n      // if (jobData.category === \"\") {\r\n      //   newErrors.category = \"Category is required\";\r\n      //   window.scrollTo(0, 0);\r\n      // }\r\n      // if (jobData.companyProfile === \"\") {\r\n      //   newErrors.companyProfile = \"Company Profile is required\";\r\n      //   window.scrollTo(0, 0);\r\n      // }\r\n      // if (jobData.company_name === \"\") {\r\n      //   newErrors.company_name = \"Company Name is required\";\r\n      //   window.scrollTo(0, 0);\r\n      // }\r\n      // if (jobData.contact_name === \"\") {\r\n      //   newErrors.contact_name = \"Contact Name is required\";\r\n      //   window.scrollTo(0, 0);\r\n      // }\r\n      // if (jobData.contact_number === \"\") {\r\n      //   newErrors.contact_number = \"Contact Number is required\";\r\n      //   window.scrollTo(0, 0);\r\n      // }\r\n      // if (jobData.designation === \"\") {\r\n      //   newErrors.designation = \"Designation is required\";\r\n      //   window.scrollTo(0, 0);\r\n      // }\r\n      // if (jobData.experience === \"\") {\r\n      //   newErrors.experience = \"Experience is required\";\r\n      //   window.scrollTo(0, 0);\r\n      // }\r\n      // if (jobData.jobDescription === \"\") {\r\n      //   newErrors.jobDescription = \"Job Description is required\";\r\n      //   window.scrollTo(0, 0);\r\n      // }\r\n      // if (jobData.job_title === \"\") {\r\n      //   newErrors.job_title = \"Job Title is required\";\r\n      //   window.scrollTo(0, 0);\r\n      // }\r\n      // if (jobData.last_date === \"\") {\r\n      //   newErrors.last_date = \"Last Date is required\";\r\n      //   window.scrollTo(0, 0);\r\n      // }\r\n      // if (jobData.location === \"\") {\r\n      //   newErrors.location = \"Location is required\";\r\n      //   window.scrollTo(0, 0);\r\n      // }\r\n      // if (jobData.skill === \"\") {\r\n      //   newErrors.skill = \"Skill is required\";\r\n      //   window.scrollTo(0, 0);\r\n      // }\r\n      // if (jobData.subCategory === \"\") {\r\n      //   newErrors.subCategory = \"Sub Category is required\";\r\n      //   window.scrollTo(0, 0);\r\n      // }\r\n      // if (jobData.work_type === \"\") {\r\n      //   newErrors.work_type = \"Work Type is required\";\r\n      //   window.scrollTo(0, 0);\r\n      // }\r\n      // if (jobData.user_id === \"\") {\r\n      //   newErrors.user_id = \"Employer is required\";\r\n      //   window.scrollTo(0, 0);\r\n      // }\r\n\r\n      // setErrors(newErrors);\r\n\r\n      const {\r\n        user_id,\r\n        job_title,\r\n        category,\r\n        company_name,\r\n        work_type,\r\n        contact_name,\r\n        skillArray,\r\n        contact_number,\r\n        companyProfile,\r\n        designation,\r\n        location,\r\n        last_date,\r\n        experience,\r\n        annual_salary,\r\n      } = jobData;\r\n\r\n      if (\r\n        !user_id ||\r\n        !job_title ||\r\n        !category ||\r\n        !company_name ||\r\n        !work_type ||\r\n        !contact_name ||\r\n        // !skillArray ||\r\n        !contact_number ||\r\n        !companyProfile ||\r\n        !designation ||\r\n        !location ||\r\n        !last_date ||\r\n        !experience ||\r\n        !annual_salary\r\n      ) {\r\n        setErrors({\r\n          user_id: user_id ? \"\" : \"Select an Employer\",\r\n          job_title: job_title ? \"\" : \"Job Title is required\",\r\n          category: category ? \"\" : \"Category is required\",\r\n          company_name: company_name ? \"\" : \"Company Name is required\",\r\n          work_type: work_type ? \"\" : \"Work Type is required\",\r\n          contact_name: contact_name ? \"\" : \"Contact Name is required\",\r\n          // skillArray: skillArray ? \"\" : \"Skill is required\",\r\n          contact_number: contact_number ? \"\" : \"Contact Number is required\",\r\n          companyProfile: companyProfile ? \"\" : \"Company Profile is required\",\r\n          designation: designation ? \"\" : \"Designation is required\",\r\n          location: location ? \"\" : \"Location is required\",\r\n          last_date: last_date ? \"\" : \"Last Date is required\",\r\n          experience: experience ? \"\" : \"Experience is required\",\r\n          annual_salary: annual_salary ? \"\" : \"Annual Salary is required\",\r\n        });\r\n        return;\r\n      }\r\n      // Validation: Check if contact is exactly 10 digits\r\n      const contactFormat = /^\\+?\\d{1,3}-?\\d{9,15}$/;\r\n      if (contact_number && !contactFormat.test(contact_number)) {\r\n        setErrors({\r\n          contact_number: \"Contact must be 10 digits\",\r\n        });\r\n        return;\r\n      }\r\n\r\n      // if (Object.keys(newErrors).length === 0) {\r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Add Job?\",\r\n        text: \"Do you want to Add this Job?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n      if (confirmationResult.isConfirmed) {\r\n        const updatedProfile = {\r\n          ...jobData,\r\n          skill: skillArray,\r\n        };\r\n\r\n        setLoading(true);\r\n        const response = await axios.post(\r\n          BaseApi + \"/admin/job/admin_add\",\r\n          updatedProfile,\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n        if (response.data.status === 200) {\r\n          setLoading(false);\r\n          Swal.fire({\r\n            title: \"Job added successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n          navigate(\"/admin/jobs\");\r\n        } else {\r\n          setLoading(false);\r\n          Swal.fire({\r\n            title: \"Failed\",\r\n            text: response.data.message,\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n      }\r\n      // }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Could not add this job. Please try after some time!\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Could not submit job data\");\r\n    }\r\n  };\r\n\r\n  // const handleFileUpload = async (e) => {\r\n  //   const file = e.target.files[0];\r\n  //   const base64 = await convertToBase64(file);\r\n  //   console.log(base64);\r\n  //   setJobData({ ...jobData, logo: base64 });\r\n  // };\r\n\r\n  const jobType = (value) => {\r\n    sessionStorage.setItem(\"jobtype\", \"value\");\r\n  };\r\n\r\n  // Ends here\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/admin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  return (\r\n    <>\r\n      <APNavBar />\r\n      <div className=\"APBasic\">\r\n        <APSidebar />\r\n\r\n        {loading ? (\r\n          <>\r\n            <div className=\"loader-container\"></div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"site-min-height\">\r\n              <div className=\"breadCumb1\" role=\"presentation\">\r\n                <Breadcrumbs\r\n                  aria-label=\"breadcrumb\"\r\n                  separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                >\r\n                  <Link\r\n                    to=\"/admin/admins/dashboard\"\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                  >\r\n                    Dashboard\r\n                  </Link>\r\n                  <Link to=\"/admin/jobs\" underline=\"hover\" color=\"inherit\">\r\n                    Jobs\r\n                  </Link>\r\n\r\n                  <Typography color=\"text.primary\">Copy Job</Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n\r\n              <h2 className=\"adminPageHeading\">Copy Job</h2>\r\n              <form className=\"adminForm\">\r\n                <div className=\"mb-5 mt-5\">\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                      Select Employer<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.user_id && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"user_id\"\r\n                      value={jobData.user_id}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option selected value=\"\">\r\n                        Select Employer\r\n                      </option>\r\n                      {employersList.map((i, key) => {\r\n                        return (\r\n                          <>\r\n                            <option\r\n                              key={key}\r\n                              value={i.id}\r\n                              // onChange={() => jobType(value)}\r\n                            >\r\n                              {i.first_name}\r\n                              {i.last_name}\r\n                            </option>\r\n                          </>\r\n                        );\r\n                      })}\r\n                    </select>\r\n                    {errors.user_id && (\r\n                      <div className=\"text-danger\">{errors.user_id}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                      Job title<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example1\"\r\n                      className={`form-control ${\r\n                        errors.job_title && \"input-error\"\r\n                      }`}\r\n                      name=\"job_title\"\r\n                      value={jobData.job_title}\r\n                      placeholder=\"Job Title\"\r\n                      onChange={handleChange}\r\n                    />\r\n                    {errors.job_title && (\r\n                      <div className=\"text-danger\">{errors.job_title}</div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                      Category<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.category && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"category\"\r\n                      value={jobData.category}\r\n                      onChange={(e) => {\r\n                        handleChange(e);\r\n                        getSubCategories(e.target.value);\r\n                      }}\r\n                    >\r\n                      <option value=\"\">Select Job Category</option>\r\n                      {jobCategories.map((i, index) => (\r\n                        <option value={i.id} key={index}>\r\n                          {i.name}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                    {errors.category && (\r\n                      <div className=\"text-danger\">{errors.category}</div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                {jobData.category && subCategories ? (\r\n                  <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                      Sub Category\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.subCategory && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"subCategory\"\r\n                      value={jobData.subCategory}\r\n                      onChange={handleChange}\r\n                      multiple\r\n                    >\r\n                      <option selected>Select Sub Category</option>\r\n                      {subCategories?.map((i, index) => {\r\n                        return (\r\n                          <option key={index} value={i.id}>\r\n                            {i.name}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                    </select>\r\n                    {errors.subCategory && (\r\n                      <div className=\"text-danger\">{errors.subCategory}</div>\r\n                    )}\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n\r\n                <div className=\"mb-5 DashBoardInputBx DashBoardCreatBx APJoditEditor\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                    Job Description\r\n                  </label>\r\n                  <JoditEditor\r\n                    ref={editor}\r\n                    name=\"jobDescription\"\r\n                    value={jobData.jobDescription}\r\n                    onChange={(jobDescription) =>\r\n                      handleChange({\r\n                        target: {\r\n                          value: jobDescription,\r\n                          name: \"jobDescription\",\r\n                        },\r\n                      })\r\n                    }\r\n                  />\r\n                  {errors.jobDescription && (\r\n                    <div className=\"text-danger\">{errors.jobDescription}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                    Company Name<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"form3Example3\"\r\n                    className={`form-control ${\r\n                      errors.company_name && \"input-error\"\r\n                    }`}\r\n                    name=\"company_name\"\r\n                    value={jobData.company_name}\r\n                    placeholder=\"Company Name\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  {errors.company_name && (\r\n                    <div className=\"text-danger\">{errors.company_name}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                    Work Type<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <select\r\n                    className={`form-select ${\r\n                      errors.work_type && \"input-error\"\r\n                    }`}\r\n                    aria-label=\"Default select example\"\r\n                    name=\"work_type\"\r\n                    value={jobData.work_type}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option selected>Select Work Type</option>\r\n                    {Object.entries(workType).map(([key, value]) => {\r\n                      return (\r\n                        <>\r\n                          <option\r\n                            key={key}\r\n                            value={key}\r\n                            onChange={() => jobType(value)}\r\n                          >\r\n                            {value}\r\n                          </option>\r\n                        </>\r\n                      );\r\n                    })}\r\n                  </select>\r\n                  {errors.work_type && (\r\n                    <div className=\"text-danger\">{errors.work_type}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                    Contact Name<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"form3Example3\"\r\n                    className={`form-control ${\r\n                      errors.contact_name && \"input-error\"\r\n                    }`}\r\n                    name=\"contact_name\"\r\n                    value={jobData.contact_name}\r\n                    placeholder=\"Contact Name\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  {errors.contact_name && (\r\n                    <div className=\"text-danger\">{errors.contact_name}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"mb-5 DashBoardInputBx DashBoardCreatBx APJoditEditor\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                    Company Profile<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <JoditEditor\r\n                    ref={editor}\r\n                    name=\"companyProfile\"\r\n                    value={jobData.companyProfile}\r\n                    onChange={(companyProfile) =>\r\n                      handleChange({\r\n                        target: {\r\n                          value: companyProfile,\r\n                          name: \"companyProfile\",\r\n                        },\r\n                      })\r\n                    }\r\n                  />\r\n                  {errors.companyProfile && (\r\n                    <div className=\"text-danger\">{errors.companyProfile}</div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                    Contact Number<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"form3Example3\"\r\n                    className={`form-control ${\r\n                      errors.contact_number && \"input-error\"\r\n                    }`}\r\n                    name=\"contact_number\"\r\n                    value={jobData.contact_number}\r\n                    placeholder=\"Contact Number\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  {errors.contact_number && (\r\n                    <div className=\"text-danger\">{errors.contact_number}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                    Company Website\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"form3Example3\"\r\n                    className=\"form-control\"\r\n                    name=\"company_website\"\r\n                    value={jobData.company_website}\r\n                    placeholder=\"Company Website\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  <div id=\"emailHelp\" className=\"form-text\">\r\n                    Eg: https://www.google.com or http://google.com\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                    Experience (In Years)<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <select\r\n                    className={`form-select ${\r\n                      errors.experience && \"input-error\"\r\n                    }`}\r\n                    aria-label=\"Default select example\"\r\n                    name=\"experience\"\r\n                    value={jobData.experience}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option selected>Choose Experience</option>\r\n                    {Object.entries(experience).map(([key, value]) => {\r\n                      return (\r\n                        <option key={key} value={key}>\r\n                          {value}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </select>\r\n                  {errors.experience && (\r\n                    <div className=\"text-danger\">{errors.experience}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                    Annual Salary<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <select\r\n                    className={`form-select ${\r\n                      errors.annual_salary && \"input-error\"\r\n                    }`}\r\n                    aria-label=\"Default select example\"\r\n                    name=\"annual_salary\"\r\n                    value={jobData.annual_salary}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option selected>Select Salary</option>\r\n                    {Object.entries(salary).map(([key, value]) => {\r\n                      return (\r\n                        <option key={key} value={key}>\r\n                          {value}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </select>\r\n                  {errors.annual_salary && (\r\n                    <div className=\"text-danger\">{errors.annual_salary}</div>\r\n                  )}\r\n                </div>\r\n                {/* <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                    <label htmlFor=\"formFile\" className=\"form-label\">\r\n                      Company Logo<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      className=\"form-select\"\r\n                      aria-label=\"Default select example\"\r\n                      type=\"file\"\r\n                      lable=\"Image\"\r\n                      name=\"logo\"\r\n                      id=\"file-upload\"\r\n                      accept=\".jpeg, .png, .jpg\"\r\n                      onChange={(e) => handleFileUpload(e)}\r\n                    />\r\n                    <img\r\n                      src={jobData.logo || \"\"}\r\n                      alt=\"\"\r\n                      style={{\r\n                        width: \"150px\",\r\n                        marginTop: \"10px\",\r\n                        marginRight: \"10px\",\r\n                      }}\r\n                    />\r\n                    {jobData.logo ? (\r\n                      <button\r\n                        className=\"btn-sm btn-outline-dark button1 ml-3\"\r\n                        style={{}}\r\n                        onClick={() => setJobData({ ...jobData, logo: \"\" })}\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <div id=\"emailHelp\" className=\"form-text\">\r\n                      Supported File Types: gif, jpg, jpeg, png (Max. 10MB)\r\n                    </div>\r\n                  </div> */}\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx skillPackage  APJoditEditor\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                    Skills<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  {/* <Multiselect\r\n                      options={skillList}\r\n                      onSelect={(e) => handleSkillChange(e)}\r\n                      onRemove={(e) => handleSkillChange(e)}\r\n                      displayValue=\"name\"\r\n                      className=\"form-select\"\r\n                      aria-label=\"Default select example\"\r\n                    /> */}\r\n                  <Select\r\n                    // defaultValue={[colourOptions[2], colouptions[3]]}\r\n                    isMulti\r\n                    isSearchable\r\n                    name=\"skill\"\r\n                    options={skillList.map((i) => ({\r\n                      value: i.id,\r\n                      label: i.name,\r\n                    }))}\r\n                    className=\"basic-multi-select\"\r\n                    classNamePrefix=\"select\"\r\n                  />\r\n                  {errors.skill && (\r\n                    <div className=\"text-danger\">{errors.skill}</div>\r\n                  )}\r\n\r\n                  {/* <select\r\n                  className=\"form-select\"\r\n                  aria-label=\"Default select example\"\r\n                  name=\"skill\"\r\n                  value={jobData.skill}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option selected>Choose Skills</option>\r\n                  {skillList.map((i, index) => {\r\n                    return (\r\n                      <>\r\n                        <option value={i.id} key={index}>\r\n                          {i.name}\r\n                        </option>\r\n                      </>\r\n                    );\r\n                  })}\r\n                </select> */}\r\n                </div>\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example1\">\r\n                    Designation<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <select\r\n                    className={`form-select ${\r\n                      errors.designation && \"input-error\"\r\n                    }`}\r\n                    aria-label=\"Default select example\"\r\n                    name=\"designation\"\r\n                    value={jobData.designation}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option selected>Choose Designation</option>\r\n                    {designationList.map((i, index) => {\r\n                      return (\r\n                        <>\r\n                          <option value={i.id} key={index}>\r\n                            {i.name}\r\n                          </option>\r\n                        </>\r\n                      );\r\n                    })}\r\n                  </select>\r\n                  {errors.designation && (\r\n                    <div className=\"text-danger\">{errors.designation}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                    Location<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"form3Example3\"\r\n                    className={`form-control ${\r\n                      errors.location && \"input-error\"\r\n                    }`}\r\n                    name=\"location\"\r\n                    value={jobData.location}\r\n                    placeholder=\"Location\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  {errors.location && (\r\n                    <div className=\"text-danger\">{errors.location}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-outline mb-5 DashBoardInputBx DashBoardCreatBx\">\r\n                  <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                    Last Date<span className=\"RedStar\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"date\"\r\n                    id=\"form3Example3\"\r\n                    className={`form-control ${\r\n                      errors.last_date && \"input-error\"\r\n                    }`}\r\n                    name=\"last_date\"\r\n                    value={jobData.last_date}\r\n                    placeholder=\"Last Date\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  {errors.last_date && (\r\n                    <div className=\"text-danger\">{errors.last_date}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"APAddJobBottomButtons\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button1\"\r\n                    onClick={handleClick}\r\n                  >\r\n                    SAVE\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button2\"\r\n                    onClick={() => navigate(\"/admin/jobs/index\")}\r\n                  >\r\n                    CANCEL\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <APFooter />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default APCopyJob;\r\n\r\n// function convertToBase64(file) {\r\n//   return new Promise((resolve, reject) => {\r\n//     const fileReader = new FileReader();\r\n//     fileReader.readAsDataURL(file);\r\n//     fileReader.onload = () => {\r\n//       resolve(fileReader.result);\r\n//     };\r\n//     fileReader.onerror = (error) => {\r\n//       reject(error);\r\n//     };\r\n//   });\r\n// }\r\n"],"names":["APCopyJob","errors","setErrors","useState","user_id","job_title","category","jobDescription","company_name","work_type","contact_name","skill","contact_number","company_website","companyProfile","designation","location","last_date","experience","annual_salary","logo","subCategory","jobData","setJobData","editor","useRef","tokenKey","Cookies","adminID","navigate","useNavigate","totalData","setTotalData","jobCategories","setJobCategories","subCategories","setSubCategories","designationList","setDesignationList","skillList","setSkillList","setExperience","salary","setSalary","workType","setWorkType","employersList","setEmployersList","loading","setLoading","handleChange","e","name","value","target","prevJobData","prev","slug","useParams","getData","async","response","axios","BaseApi","headers","key","ApiKey","token","adminid","console","log","data","categories","designationlList","sallery","worktype","employers","error","getSubCategories","subCatData","id","useEffect","window","scrollTo","_jsxs","_Fragment","children","_jsx","APNavBar","className","APSidebar","role","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","to","underline","color","Typography","htmlFor","onChange","selected","map","i","first_name","last_name","type","placeholder","index","multiple","JoditEditor","ref","Object","entries","_ref","sessionStorage","setItem","_ref2","_ref3","Select","isMulti","isSearchable","options","label","classNamePrefix","onClick","skills","document","getElementsByName","skillArray","forEach","element","push","test","Swal","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","isConfirmed","updatedProfile","status","message","APFooter"],"sourceRoot":""}