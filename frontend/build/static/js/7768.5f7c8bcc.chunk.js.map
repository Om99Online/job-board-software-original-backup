{"version":3,"file":"static/js/7768.5f7c8bcc.chunk.js","mappings":"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","sources":["Components/adminpanel/Email Templates/APEditEmailTemplate.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport APNavBar from \"../Elements/APNavBar\";\r\nimport APSidebar from \"../APSidebar/APSidebar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport BaseApi from \"../../api/BaseApi\";\r\nimport ApiKey from \"../../api/ApiKey\";\r\nimport Swal from \"sweetalert2\";\r\nimport axios from \"axios\";\r\nimport { useNavigate, useParams, Link } from \"react-router-dom\";\r\nimport JoditEditor from \"jodit-react\";\r\nimport { useRef } from \"react\";\r\nimport Cookies from \"js-cookie\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\"; // import styles\r\nimport APFooter from \"../Elements/APFooter\";\r\nconst APEditEmailTemplate = () => {\r\n  const editor = useRef(null);\r\n\r\n  const [userData, setUserData] = useState({\r\n    title: \"\",\r\n    subject: \"\",\r\n    template: \"\",\r\n    subject_el: \"\",\r\n    template_el: \"\",\r\n    // subject_fra: \"\",\r\n    // template_fra: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    title: \"\",\r\n    subject: \"\",\r\n    template: \"\",\r\n    subject_el: \"\",\r\n    template_el: \"\",\r\n    // subject_fra: \"\",\r\n    // template_fra: \"\",\r\n  });\r\n  const [variables, setVariables] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const tokenKey = Cookies.get(\"token\");\r\n  const adminID = Cookies.get(\"adminID\");\r\n  const[templateId, setTemplateId] = useState({\r\n    id: \"\"\r\n  });\r\n\r\n  const navigate = useNavigate();\r\n  const { slug } = useParams();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUserData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      [name]: \"\",\r\n    }));\r\n  };\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + `/admin/editemailtemplates/${slug}`,\r\n        null, // Pass null as the request body if not required\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n            adminid: adminID,\r\n          },\r\n        }\r\n      );\r\n      setLoading(false);\r\n      setTemplateId({...templateId, id: response.data.response.id});\r\n      console.log(templateId);\r\n      setUserData(response.data.response);\r\n      setVariables(response.data.response.variables);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.log(\"Cannot get data at edit Page List\");\r\n    }\r\n  };\r\n\r\n  // var variablesPart = [];\r\n\r\n  // variablesPart = variables.split(\",\");\r\n  // console.log(variablesPart, \"variablesPart\");\r\n\r\n  // const newArray = variablesPart.map((element) => element.trim());\r\n  // console.log(newArray, \"newarray\");\r\n\r\n  const handleVariableClickSubject = (e, value) => {\r\n    e.preventDefault();\r\n    console.log(value);\r\n    // Concatenate value to the subject key in userData state\r\n    setUserData((prevUserData) => ({\r\n      ...prevUserData,\r\n      subject: prevUserData.subject + value,\r\n    }));\r\n  };\r\n  const handleVariableClickTemplate = (e, value) => {\r\n    e.preventDefault();\r\n    console.log(value);\r\n    // Concatenate value to the subject key in userData state\r\n    setUserData((prevUserData) => ({\r\n      ...prevUserData,\r\n      template: prevUserData.template + value,\r\n    }));\r\n  };\r\n  const handleVariableClickSubjectDe = (e, value) => {\r\n    e.preventDefault();\r\n    console.log(value);\r\n    // Concatenate value to the subject key in userData state\r\n    setUserData((prevUserData) => ({\r\n      ...prevUserData,\r\n      subject_de: prevUserData.subject_de + value,\r\n    }));\r\n  };\r\n  const handleVariableClickTemplateDe = (e, value) => {\r\n    e.preventDefault();\r\n    console.log(value);\r\n    // Concatenate value to the subject key in userData state\r\n    setUserData((prevUserData) => ({\r\n      ...prevUserData,\r\n      template_de: prevUserData.template_de + value,\r\n    }));\r\n  };\r\n  const handleVariableClickSubjectFra = (e, value) => {\r\n    e.preventDefault();\r\n    console.log(value);\r\n    // Concatenate value to the subject key in userData state\r\n    setUserData((prevUserData) => ({\r\n      ...prevUserData,\r\n      subject_fra: prevUserData.subject_fra + value,\r\n    }));\r\n  };\r\n  const handleVariableClickTemplateFra = (e, value) => {\r\n    e.preventDefault();\r\n    console.log(value);\r\n    // Concatenate value to the subject key in userData state\r\n    setUserData((prevUserData) => ({\r\n      ...prevUserData,\r\n      template_fra: prevUserData.template_fra + value,\r\n    }));\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      console.log(userData);\r\n      const newErrors = {};\r\n\r\n      if (userData.title === \"\") {\r\n        newErrors.title = \"Title is required\";\r\n        window.scrollTo(0, 0);\r\n      }\r\n      if (userData.subject === \"\") {\r\n        newErrors.subject = \"Subject is required\";\r\n        window.scrollTo(0, 0);\r\n      }\r\n      if (userData.template === \"\") {\r\n        newErrors.template = \"Template is required\";\r\n        window.scrollTo(0, 0);\r\n      }\r\n      if (userData.subject_el === \"\") {\r\n        newErrors.subject_el = \"Subject(Greek) is required\";\r\n        window.scrollTo(0, 0);\r\n      }\r\n      if (userData.template_el === \"\") {\r\n        newErrors.template_el = \"Template(Greek) is required\";\r\n        window.scrollTo(0, 0);\r\n      }\r\n      // if (userData.subject_fra === \"\") {\r\n      //   newErrors.subject_fra = \"Subject(French) is required\";\r\n      //   // window.scrollTo(0, 0);\r\n      // }\r\n      // if (userData.template_fra === \"\") {\r\n      //   newErrors.template_fra = \"Template(French) is required\";\r\n      //   window.scrollTo(0, 0);\r\n      // }\r\n      setErrors(newErrors);\r\n\r\n      if (Object.keys(newErrors).length === 0) {\r\n        const confirmationResult = await Swal.fire({\r\n          title: \"Update Template?\",\r\n          text: \"Do you want to update this template?\",\r\n          icon: \"question\",\r\n          showCancelButton: true,\r\n          confirmButtonText: \"Yes\",\r\n          cancelButtonText: \"No\",\r\n        });\r\n\r\n        if (confirmationResult.isConfirmed) {\r\n          setLoading(true);\r\n\r\n          const response = await axios.post(\r\n            BaseApi + `/admin/editemailtemplates/${slug}`,\r\n            userData,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                key: ApiKey,\r\n                token: tokenKey,\r\n                adminid: adminID,\r\n              },\r\n            }\r\n          );\r\n\r\n          setLoading(false);\r\n\r\n          if (response.data.status === 200) {\r\n            Swal.fire({\r\n              title: \"Template Updated successfully!\",\r\n              icon: \"success\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n            // setUserData({\r\n            //   ...userData,\r\n            //   new_username: \"\",\r\n            //   conf_username: \"\",\r\n            // });\r\n            // window.scrollTo(0, 0);\r\n            navigate(\"/admin/emailtemplates\");\r\n          } else {\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"error\",\r\n              confirmButtonText: \"Close\",\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed\",\r\n        text: \"Could not update email template. Please try again later!\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Could not update email template!\", error);\r\n    }\r\n  };\r\n\r\n  const handleTestMail = async() => {\r\n    try {\r\n      setLoading(true);\r\n      console.log(\"Sending request with data:\",  templateId.id );\r\n      const response = await axios.post(\r\n        BaseApi + `/admin/testmail/${slug}`,\r\n        templateId, // Pass null as the request body if not required\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            // token: tokenKey,\r\n            adminid: adminID,\r\n          },\r\n        }\r\n      );\r\n      setLoading(false);\r\n      if(response.data.status === 200){\r\n        Swal.fire({\r\n          title: \"Success\",\r\n          icon: \"success\",\r\n          confirmButtonText: \"Close\",\r\n        });\r\n      }else{\r\n        Swal.fire({\r\n          title: response.data.message,\r\n          icon: \"error\",\r\n          confirmButtonText: \"Close\",\r\n        });\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed\",\r\n        text: \"Could not test mail. Please try again later!\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/admin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  return (\r\n    <>\r\n      <APNavBar />\r\n      <div className=\"APBasic\">\r\n        <APSidebar />\r\n\r\n        {loading ? (\r\n          <>\r\n            <div className=\"loader-container\"></div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"site-min-height\">\r\n              <div className=\"breadCumb1\" role=\"presentation\">\r\n                <Breadcrumbs\r\n                  aria-label=\"breadcrumb\"\r\n                  separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                >\r\n                  <Link\r\n                    to=\"/admin/admins/dashboard\"\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                  >\r\n                    Dashboard\r\n                  </Link>\r\n                  <Link\r\n                    to=\"/admin/emailtemplates\"\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                  >\r\n                    Email Template Management\r\n                  </Link>\r\n\r\n                  <Typography color=\"text.primary\">\r\n                    Edit Email Template Detail\r\n                  </Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n              <div className=\"ManageSubAdminHeader\">\r\n                <h2 className=\"adminPageHeading\">Edit Email Template Detail</h2>\r\n\r\n                <button\r\n                  className=\"btn adminMediumButton1 APMSbutton\"\r\n                  onClick={handleTestMail}\r\n                >\r\n                  Test Mail\r\n                </button>\r\n              </div>\r\n              <form>\r\n                <div className=\"mb-4 mt-5\">\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Title<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"form3Example1\"\r\n                      className={`form-control ${\r\n                        errors.title && \"input-error\"\r\n                      }`}\r\n                      name=\"title\"\r\n                      placeholder=\"Enter Title\"\r\n                      value={userData.title}\r\n                      onChange={handleChange}\r\n                    />\r\n                    {errors.title && (\r\n                      <div className=\"text-danger\">{errors.title}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"firstBlockEmailTemplate\">\r\n                    <div class=\"mb-5 DashBoardInputBx\">\r\n                      <label for=\"formFile\" class=\"form-label\">\r\n                        Variables to use\r\n                      </label>\r\n\r\n                      {Object.entries(variables)?.map(([key, value]) => {\r\n                        return (\r\n                          <div className=\"APEditEmailTemplateButtons\">\r\n                            <button\r\n                              className=\"btn APButton3\"\r\n                              onClick={(e) =>\r\n                                handleVariableClickSubject(e, value)\r\n                              }\r\n                            >\r\n                              {value}\r\n                            </button>\r\n                          </div>\r\n                        );\r\n                      })}\r\n\r\n                      <div id=\"emailHelp\" class=\"form-text\">\r\n                        Note* : click on above variable buttons to use these in\r\n                        below subject on behalf of dynamic values (like :\r\n                        username: [!username!])\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"mb-5 DashBoardInputBx\">\r\n                      <label for=\"formFile\" class=\"form-label\">\r\n                        Subject<span className=\"RedStar\">*</span>\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"form3Example1\"\r\n                        className={`form-control ${\r\n                          errors.subject && \"input-error\"\r\n                        }`}\r\n                        name=\"subject\"\r\n                        placeholder=\"Subject\"\r\n                        value={userData.subject}\r\n                        onChange={handleChange}\r\n                      />\r\n                      {errors.subject && (\r\n                        <div className=\"text-danger\">{errors.subject}</div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"secondBlockEmailTemplate\">\r\n                    <div class=\"mb-5 DashBoardInputBx\">\r\n                      <label for=\"formFile\" class=\"form-label\">\r\n                        Variables to use\r\n                      </label>\r\n                      {Object.entries(variables)?.map(([key, value]) => {\r\n                        return (\r\n                          <div className=\"APEditEmailTemplateButtons\">\r\n                            <button\r\n                              className=\"btn APButton3\"\r\n                              onClick={(e) =>\r\n                                handleVariableClickTemplate(e, value)\r\n                              }\r\n                            >\r\n                              {value}\r\n                            </button>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                      <div id=\"emailHelp\" class=\"form-text\">\r\n                        Note* : click on above variable buttons to use these in\r\n                        below subject on behalf of dynamic values (like :\r\n                        username: [!username!])\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"mb-5 DashBoardInputBx DashBoardCreatBx APJoditEditor\">\r\n                      <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                        Body<span className=\"RedStar\">*</span>\r\n                      </label>\r\n                      {/* <JoditEditor\r\n                        ref={editor}\r\n                        name=\"template\"\r\n                        value={userData.template}\r\n                        onChange={(template) =>\r\n                          handleChange({\r\n                            target: {\r\n                              value: template,\r\n                              name: \"template\",\r\n                            },\r\n                          })\r\n                        }\r\n                      /> */}\r\n                      <ReactQuill\r\n                      theme=\"snow\"\r\n                      value={userData.template}\r\n                      onChange={(value) =>\r\n                        handleChange({\r\n                          target: {\r\n                            name: \"template\",\r\n                            value,\r\n                          },\r\n                        })\r\n                      }\r\n                      style={{ minHeight: \"250px\", height: \"200px\" }}\r\n                      placeholder=\"Add your text here...\"\r\n                    />\r\n                      {errors.template && (\r\n                        <div className=\"text-danger\">{errors.template}</div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"thirdBlockEmailTemplate\">\r\n                    <div class=\"mb-5 DashBoardInputBx\">\r\n                      <label for=\"formFile\" class=\"form-label\">\r\n                        Variables to use\r\n                      </label>\r\n                      {Object.entries(variables)?.map(([key, value]) => {\r\n                        return (\r\n                          <div className=\"APEditEmailTemplateButtons\">\r\n                            <button\r\n                              className=\"btn APButton3\"\r\n                              onClick={(e) =>\r\n                                handleVariableClickSubjectDe(e, value)\r\n                              }\r\n                            >\r\n                              {value}\r\n                            </button>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                      <div id=\"emailHelp\" class=\"form-text\">\r\n                        Note* : click on above variable buttons to use these in\r\n                        below subject on behalf of dynamic values (like :\r\n                        username: [!username!])\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"mb-5 DashBoardInputBx\">\r\n                      <label for=\"formFile\" class=\"form-label\">\r\n                        Subject (Greek)<span className=\"RedStar\">*</span>\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"form3Example1\"\r\n                        className={`form-control ${\r\n                          errors.subject_el && \"input-error\"\r\n                        }`}\r\n                        name=\"subject_el\"\r\n                        placeholder=\"Subject Greek\"\r\n                        value={userData.subject_el}\r\n                        onChange={handleChange}\r\n                      />\r\n                      {errors.subject_el && (\r\n                        <div className=\"text-danger\">{errors.subject_el}</div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"fourthBlockEmailTemplate\">\r\n                    <div class=\"mb-5 DashBoardInputBx\">\r\n                      <label for=\"formFile\" class=\"form-label\">\r\n                        Variables to use\r\n                      </label>\r\n                      {Object.entries(variables)?.map(([key, value]) => {\r\n                        return (\r\n                          <div className=\"APEditEmailTemplateButtons\">\r\n                            <button\r\n                              className=\"btn APButton3\"\r\n                              onClick={(e) =>\r\n                                handleVariableClickTemplateDe(e, value)\r\n                              }\r\n                            >\r\n                              {value}\r\n                            </button>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                      <div id=\"emailHelp\" class=\"form-text\">\r\n                        Note* : click on above variable buttons to use these in\r\n                        below subject on behalf of dynamic values (like :\r\n                        username: [!username!])\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"mb-5 DashBoardInputBx DashBoardCreatBx APJoditEditor\">\r\n                      <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                        Body (Greek)<span className=\"RedStar\">*</span>\r\n                      </label>\r\n                      {/* <JoditEditor\r\n                        ref={editor}\r\n                        name=\"template_el\"\r\n                        value={userData.template_el}\r\n                        onChange={(template_el) =>\r\n                          handleChange({\r\n                            target: {\r\n                              value: template_el,\r\n                              name: \"template_el\",\r\n                            },\r\n                          })\r\n                        }\r\n                      /> */}\r\n                      <ReactQuill\r\n                      theme=\"snow\"\r\n                      value={userData.template_el}\r\n                      onChange={(value) =>\r\n                        handleChange({\r\n                          target: {\r\n                            name: \"template_el\",\r\n                            value,\r\n                          },\r\n                        })\r\n                      }\r\n                      style={{ minHeight: \"250px\", height: \"200px\" }}\r\n                      placeholder=\"Add your text here...\"\r\n                    />\r\n                      {errors.template_el && (\r\n                        <div className=\"text-danger\">{errors.template_el}</div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  {/* <div className=\"fifthBlockEmailTemplate\">\r\n                    <div class=\"mb-5 DashBoardInputBx\">\r\n                      <label for=\"formFile\" class=\"form-label\">\r\n                        Variables to use\r\n                      </label>\r\n                      {Object.entries(variables)?.map(([key, value]) => {\r\n                        return (\r\n                          <div className=\"APEditEmailTemplateButtons\">\r\n                            <button\r\n                              className=\"btn APButton3\"\r\n                              onClick={(e) =>\r\n                                handleVariableClickSubjectFra(e, value)\r\n                              }\r\n                            >\r\n                              {value}\r\n                            </button>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                      <div id=\"emailHelp\" class=\"form-text\">\r\n                        Note* : click on above variable buttons to use these in\r\n                        below subject on behalf of dynamic values (like :\r\n                        username: [!username!])\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"mb-5 DashBoardInputBx\">\r\n                      <label for=\"formFile\" class=\"form-label\">\r\n                        Subject (French)<span className=\"RedStar\">*</span>\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"form3Example1\"\r\n                        className={`form-control ${\r\n                          errors.subject_fra && \"input-error\"\r\n                        }`}\r\n                        name=\"subject_fra\"\r\n                        placeholder=\"Subject French\"\r\n                        value={userData.subject_fra}\r\n                        onChange={handleChange}\r\n                      />\r\n                      {errors.subject_fra && (\r\n                        <div className=\"text-danger\">{errors.subject_fra}</div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"sixthBlockEmailTemplate\">\r\n                    <div class=\"mb-5 DashBoardInputBx\">\r\n                      <label for=\"formFile\" class=\"form-label\">\r\n                        Variables to use\r\n                      </label>\r\n                      {Object.entries(variables)?.map(([key, value]) => {\r\n                        return (\r\n                          <div className=\"APEditEmailTemplateButtons\">\r\n                            <button\r\n                              className=\"btn APButton3\"\r\n                              onClick={(e) =>\r\n                                handleVariableClickTemplateFra(e, value)\r\n                              }\r\n                            >\r\n                              {value}\r\n                            </button>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                      <div id=\"emailHelp\" class=\"form-text\">\r\n                        Note* : click on above variable buttons to use these in\r\n                        below subject on behalf of dynamic values (like :\r\n                        username: [!username!])\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"mb-5 DashBoardInputBx DashBoardCreatBx APJoditEditor\">\r\n                      <label className=\"form-label\" htmlFor=\"form3Example3\">\r\n                        Body (French)<span className=\"RedStar\">*</span>\r\n                      </label>\r\n                      <JoditEditor\r\n                        ref={editor}\r\n                        name=\"template_fra\"\r\n                        value={userData.template_fra}\r\n                        onChange={(template_fra) =>\r\n                          handleChange({\r\n                            target: {\r\n                              value: template_fra,\r\n                              name: \"template_fra\",\r\n                            },\r\n                          })\r\n                        }\r\n                      />\r\n                      {errors.template_fra && (\r\n                        <div className=\"text-danger\">{errors.template_fra}</div>\r\n                      )}\r\n                    </div>\r\n                  </div> */}\r\n\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary adminLowerButton1\"\r\n                    onClick={handleClick}\r\n                  >\r\n                    SAVE\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary adminLowerButton2\"\r\n                    onClick={() => navigate(\"/admin/emailtemplates\")}\r\n                  >\r\n                    CANCEL\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <APFooter />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default APEditEmailTemplate;\r\n"],"names":["APEditEmailTemplate","_Object$entries","_Object$entries2","_Object$entries3","_Object$entries4","useRef","userData","setUserData","useState","title","subject","template","subject_el","template_el","errors","setErrors","variables","setVariables","loading","setLoading","tokenKey","Cookies","adminID","templateId","setTemplateId","id","navigate","useNavigate","slug","useParams","handleChange","e","name","value","target","prev","useEffect","async","response","axios","BaseApi","headers","key","ApiKey","token","adminid","data","console","log","error","getData","window","scrollTo","_jsxs","_Fragment","children","_jsx","APNavBar","className","APSidebar","role","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","to","underline","color","Typography","onClick","status","Swal","icon","confirmButtonText","message","text","class","for","type","placeholder","onChange","Object","entries","map","_ref","handleVariableClickSubject","preventDefault","prevUserData","_ref2","handleVariableClickTemplate","htmlFor","ReactQuill","theme","style","minHeight","height","_ref3","handleVariableClickSubjectDe","subject_de","_ref4","handleVariableClickTemplateDe","template_de","newErrors","keys","length","showCancelButton","cancelButtonText","isConfirmed","APFooter"],"sourceRoot":""}