{"version":3,"file":"static/js/1154.f7f25746.chunk.js","mappings":"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","sources":["Components/element/CheckoutForm.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  PaymentElement,\r\n  useStripe,\r\n  useElements,\r\n} from \"@stripe/react-stripe-js\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../api/BaseApi\";\r\nimport ApiKey from \"../api/ApiKey\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nexport default function CheckoutForm() {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const navigate = useNavigate();\r\n  let transactionID = {\r\n    transaction_id: \"\",\r\n  };\r\n  const [message, setMessage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [paymentStatus, setPaymentStatus] = useState(false);\r\n  const { slug } = useParams();\r\n  const userType = Cookies.get(\"user_type\");\r\n  const tokenKey = Cookies.get(\"tokenClient\");\r\n\r\n\r\n  const handleSuccessApi = async (orderID) => {\r\n    try {\r\n      // console.log(orderID);\r\n      if (orderID) {\r\n        var currentSlug = sessionStorage.getItem(\"prePaymentSlug\");\r\n        transactionID.transaction_id = orderID;\r\n        // setPostPaymentDetail({ ...postPaymentDetail, transaction_id: orderID });\r\n        const response = await axios.post(\r\n          BaseApi + `/payments/checkoutSuccess/${currentSlug}`,\r\n          transactionID,\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n            },\r\n          }\r\n        );\r\n      } else {\r\n        console.log(\"Failed to generate order ID\");\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in handle success api\");\r\n    }\r\n  };\r\n\r\n  function generateRandomID() {\r\n    const characters =\r\n      \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n    const idLength = 17;\r\n    let randomID = \"\";\r\n\r\n    for (let i = 0; i < idLength; i++) {\r\n      const randomIndex = Math.floor(Math.random() * characters.length);\r\n      randomID += characters.charAt(randomIndex);\r\n    }\r\n\r\n    return randomID;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!stripe) {\r\n      return;\r\n    }\r\n\r\n    const clientSecret = new URLSearchParams(window.location.search).get(\r\n      \"payment_intent_client_secret\"\r\n    );\r\n\r\n    if (!clientSecret) {\r\n      return;\r\n    }\r\n\r\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\r\n      switch (paymentIntent.status) {\r\n        case \"succeeded\":\r\n          setMessage(\"Payment succeeded!\");\r\n          const randomTransactionID = generateRandomID();\r\n          console.log(randomTransactionID);\r\n          handleSuccessApi(randomTransactionID);\r\n          Swal.fire({\r\n            title: \"Payment succeeded!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n          if (userType === \"candidate\") {\r\n            navigate(\"/candidates/myaccount\");\r\n          }\r\n          if (userType === \"recruiter\") {\r\n            navigate(\"/user/myprofile\");\r\n          }\r\n          break;\r\n        case \"processing\":\r\n          setMessage(\"Your payment is processing.\");\r\n          Swal.fire({\r\n            title: \"Your payment is processing\",\r\n            icon: \"warning\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n          if (userType === \"candidate\") {\r\n            navigate(\"/candidates/myaccount\");\r\n          }\r\n          if (userType === \"recruiter\") {\r\n            navigate(\"/user/myprofile\");\r\n          }\r\n          break;\r\n        case \"requires_payment_method\":\r\n          setMessage(\"Your payment was not successful, please try again.\");\r\n          Swal.fire({\r\n            title: \"Your payment was not successful, please try again\",\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n          if (userType === \"candidate\") {\r\n            navigate(\"/candidates/myaccount\");\r\n          }\r\n          if (userType === \"recruiter\") {\r\n            navigate(\"/user/myprofile\");\r\n          }\r\n          break;\r\n        default:\r\n          setMessage(\"Something went wrong.\");\r\n          Swal.fire({\r\n            title: \"Something went wrong\",\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n          if (userType === \"candidate\") {\r\n            navigate(\"/candidates/myaccount\");\r\n          }\r\n          if (userType === \"recruiter\") {\r\n            navigate(\"/user/myprofile\");\r\n          }\r\n          break;\r\n      }\r\n    });\r\n  }, [stripe]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js hasn't yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    const { error } = await stripe.confirmPayment({\r\n      elements,\r\n      confirmParams: {\r\n        // Make sure to change this to your payment completion page\r\n        return_url:  `https://job-board-software.logicspice.com/payment/paymentoption/${slug}`,\r\n      },\r\n    });\r\n\r\n    // This point will only be reached if there is an immediate error when\r\n    // confirming the payment. Otherwise, your customer will be redirected to\r\n    // your `return_url`. For some payment methods like iDEAL, your customer will\r\n    // be redirected to an intermediate site first to authorize the payment, then\r\n    // redirected to the `return_url`.\r\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n      setMessage(error.message);\r\n      Swal.fire({\r\n        title: error.message,\r\n        icon: \"warning\",\r\n        confirmButtonText: \"Close\",\r\n      })\r\n    } else {\r\n      console.log(error.message);\r\n      Swal.fire({\r\n        title: error.message,\r\n        icon: \"warning\",\r\n        confirmButtonText: \"Close\",\r\n      })\r\n      setMessage(\"An unexpected error occurred.\");\r\n    }\r\n\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const paymentElementOptions = {\r\n    layout: \"tabs\",\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"stripeFormBox\"\r\n        style={{\r\n          padding: \"40px\",\r\n          margin: \"auto\",\r\n          marginTop: \"200px\",\r\n          width: \"600px\",\r\n          boxShadow: \"rgba(0, 0, 0, 0.24) 0px 3px 8px\",\r\n          borderRadius: \"5px\",\r\n          display: `${paymentStatus} && none`,\r\n        }}\r\n      >\r\n        <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n          <PaymentElement\r\n            id=\"payment-element\"\r\n            options={paymentElementOptions}\r\n          />\r\n          <button\r\n            className=\"payButtonStripe\"\r\n            disabled={isLoading || !stripe || !elements}\r\n            id=\"submit\"\r\n          >\r\n            <span id=\"button-text\">\r\n              {isLoading ? (\r\n                <div className=\"spinner\" id=\"spinner\"></div>\r\n              ) : (\r\n                \"Pay now\"\r\n              )}\r\n            </span>\r\n          </button>\r\n        </form>\r\n      </div>\r\n\r\n      {/* Show any error or success messages */}\r\n      {message && (\r\n        <>\r\n          <div id=\"payment-message\" className=\"stripePaymentMessage\"></div>\r\n          <Link to={userType === \"candidate\" ? \"/candidates/myaccount\" : \"/user/myprofile\"} className=\"navButton1\">My Profile</Link>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"names":["CheckoutForm","stripe","useStripe","elements","useElements","navigate","useNavigate","transactionID","transaction_id","message","setMessage","useState","isLoading","setIsLoading","paymentStatus","setPaymentStatus","slug","useParams","userType","Cookies","tokenKey","useEffect","clientSecret","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","_ref","paymentIntent","status","randomTransactionID","characters","randomID","i","randomIndex","Math","floor","random","charAt","generateRandomID","console","log","async","orderID","currentSlug","sessionStorage","getItem","axios","BaseApi","headers","key","ApiKey","token","error","handleSuccessApi","Swal","title","icon","confirmButtonText","_jsxs","_Fragment","children","_jsx","className","style","padding","margin","marginTop","width","boxShadow","borderRadius","display","id","onSubmit","e","preventDefault","confirmPayment","confirmParams","return_url","type","PaymentElement","options","layout","disabled","Link","to"],"sourceRoot":""}