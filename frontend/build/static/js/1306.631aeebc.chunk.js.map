{"version":3,"file":"static/js/1306.631aeebc.chunk.js","mappings":"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","sources":["Components/element/ForgotPassword.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Footer from \"./Footer\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport NavBar from \"./NavBar\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../api/BaseApi\";\r\nimport Swal from \"sweetalert2\";\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\nimport Cookies from \"js-cookie\";\r\nimport HTMLReactParser from \"html-react-parser\";\r\nimport ApiKey from \"../api/ApiKey\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst ForgotPassword = () => {\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [t, i18n] = useTranslation(\"global\");\r\n\r\n  const [errors, setErrors] = useState({\r\n    email: \"\",\r\n  });\r\n\r\n  const [isCaptchaVerified, setIsCaptchaVerified] = useState(false);\r\n\r\n  let primaryColor = Cookies.get(\"primaryColor\");\r\n  let secondaryColor = Cookies.get(\"secondaryColor\");\r\n  let captchaKey = Cookies.get(\"captchaKey\");\r\n  const tokenKey = Cookies.get(\"tokenClient\");\r\n  const currentLanguage = Cookies.get(\"selectedLanguage\") || \"en\";\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [hoverColor, setHoverColor] = useState(false);\r\n\r\n  const handleMouseEnter = () => {\r\n    setHoverColor(true);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoverColor(false);\r\n  };\r\n\r\n  const [pageContent, setPageContent] = useState([]);\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(BaseApi + `/users/apps_forgotPassword`);\r\n      setLoading(false);\r\n      setPageContent(response.data.response);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.log(\"Cannot get data of benefit page\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // getData();\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      [name]: \"\",\r\n    }));\r\n  };\r\n  const handleClick = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const newErrors = {};\r\n\r\n      if (formData.email === \"\") {\r\n        newErrors.email = t(\"forgotPassword.emailRequired\");\r\n      } else if (!isValidEmail(formData.email)) {\r\n        newErrors.email = t(\"forgotPassword.invalidEmail\");\r\n      }\r\n\r\n    //   if (!isCaptchaVerified) {\r\n    //     newErrors.captcha = \"Please verify captcha\";\r\n    //   }\r\n\r\n      setErrors(newErrors);\r\n\r\n      // Function to validate email format\r\n      function isValidEmail(email) {\r\n        // Use a regular expression to validate email format\r\n        const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\r\n        return emailPattern.test(email);\r\n      }\r\n\r\n      if (Object.keys(newErrors).length === 0) {\r\n        // if (isCaptchaVerified) {\r\n          setLoading(true);\r\n\r\n          const updatedData = {\r\n            ...formData,\r\n            language: currentLanguage\r\n          }\r\n          const response = await axios.post(\r\n            BaseApi + \"/users/forgotPassword\",\r\n            updatedData,\r\n            {\r\n                headers: {\r\n                  \"Content-Type\": \"application/json\",\r\n                  key: ApiKey,\r\n                  token: tokenKey,\r\n                },\r\n              }\r\n          );\r\n          setLoading(false);\r\n          // console.log(\"yaha\")\r\n          if (response.data.status === 200) {\r\n            navigate(window.history.back());\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"success\",\r\n              confirmButtonText: t(\"forgotPassword.close\"),\r\n            });\r\n            \r\n          } else if (response.data.status === 500) {\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"error\",\r\n              confirmButtonText: t(\"forgotPassword.close\"),\r\n            });\r\n          } else {\r\n            Swal.fire({\r\n              title: response.data.message,\r\n              icon: \"warning\",\r\n              confirmButtonText: t(\"forgotPassword.close\"),\r\n            });\r\n          }\r\n        }\r\n    //   }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      Swal.fire({\r\n        title: t(\"forgotPassword.failedTitle\"),\r\n        text: t(\"forgotPassword.failedTxt\"),\r\n        icon: \"error\",\r\n        confirmButtonText: t(\"forgotPassword.close\"),\r\n      });\r\n    }\r\n    console.log(formData);\r\n  };\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      {loading ? (\r\n        <div className=\"loader-container\"></div>\r\n      ) : (\r\n        <>\r\n          <div className=\"privacyPolicy\">\r\n            <div className=\"text-center PPSection1\">\r\n              <h1 className=\"\">{t(\"forgotPassword.forgotPassword\")}</h1>\r\n              <h6 className=\"text-muted fw-normal\">\r\n                {\" \"}\r\n                <Link to=\"/\" style={{ color: \"grey\" }}>\r\n                  {t(\"forgotPassword.home\")}\r\n                </Link>{\" \"}\r\n                /{t(\"forgotPassword.forgotPassword\")}\r\n                {/* /{pageContent.static_page_title} */}\r\n              </h6>\r\n            </div>\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"card forgotPasswordCard\">\r\n                  <div className=\"card-body\">\r\n                    <h2 className=\"text-center pb-4 pt-2\">\r\n                      {t(\"forgotPassword.forgot\")}\r\n                      <span className=\"textGradient\">\r\n                        {\" \"}\r\n                        <span className=\"SubHaddingTxt\"> {t(\"forgotPassword.password\")}</span>\r\n                      </span>\r\n                    </h2>\r\n                    <p className=\"forgotPasswordProcessTxt\">\r\n                      {t(\"forgotPassword.text1\")}\r\n                    </p>\r\n                    <form>\r\n                      <div className=\"mb-2\">\r\n                        <input\r\n                          type=\"email\"\r\n                          className={`form-control ${\r\n                            errors.email && \"input-error\"\r\n                          }`}\r\n                          id=\"exampleInputEmail1\"\r\n                          aria-describedby=\"emailHelp\"\r\n                          name=\"email\"\r\n                          value={formData.email}\r\n                          placeholder={t(\"forgotPassword.emailAddress\")}\r\n                          onChange={handleChange}\r\n                        />\r\n                        {errors.email && (\r\n                          <div className=\"text-danger\">{errors.email}</div>\r\n                        )}\r\n                      </div>\r\n                      <p className=\"forgotPasswordReturnLogin text-muted\">\r\n                        {t(\"forgotPassword.text2\")}{\" \"}\r\n                        <Link onClick={() => window.history.back()}>\r\n                          {t(\"forgotPassword.loginPage\")}\r\n                        </Link>\r\n                      </p>\r\n\r\n                      {/* <div className=\"reCaptchaLogin mb-4\">\r\n                        <ReCAPTCHA\r\n                          sitekey={captchaKey}\r\n                          // sitekey=\"6Ld8bV8nAAAAAEp24xWlKsVFhVDYlBctFF50MI1x\"\r\n                          onChange={(value) => setIsCaptchaVerified(value)}\r\n                        />\r\n                        {errors.captcha && (\r\n                          <div className=\"text-danger\">{errors.captcha}</div>\r\n                        )}\r\n                      </div> */}\r\n                      <button\r\n                        type=\"submit\"\r\n                        className=\"btn w-100 mt-4 mb-3\"\r\n                        onClick={handleClick}\r\n                        style={{\r\n                          backgroundColor: `${\r\n                            secondaryColor &&\r\n                            (hoverColor ? secondaryColor : primaryColor)\r\n                          }`,\r\n                        }}\r\n                        onMouseEnter={handleMouseEnter}\r\n                        onMouseLeave={handleMouseLeave}\r\n                      >\r\n                        {t(\"forgotPassword.submitButton\")}\r\n                      </button>\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Footer />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n"],"names":["ForgotPassword","formData","setFormData","useState","email","loading","setLoading","t","i18n","useTranslation","errors","setErrors","isCaptchaVerified","setIsCaptchaVerified","primaryColor","Cookies","secondaryColor","tokenKey","currentLanguage","navigate","useNavigate","hoverColor","setHoverColor","pageContent","setPageContent","useEffect","window","scrollTo","_jsxs","_Fragment","children","_jsx","NavBar","className","Link","to","style","color","type","id","name","value","placeholder","onChange","e","target","prevData","prev","onClick","history","back","async","preventDefault","newErrors","isValidEmail","test","Object","keys","length","updatedData","language","response","axios","BaseApi","headers","key","ApiKey","token","data","status","Swal","title","message","icon","confirmButtonText","error","text","console","log","backgroundColor","onMouseEnter","handleMouseEnter","onMouseLeave","handleMouseLeave","Footer"],"sourceRoot":""}