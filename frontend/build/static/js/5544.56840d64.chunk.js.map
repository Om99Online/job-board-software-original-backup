{"version":3,"file":"static/js/5544.56840d64.chunk.js","mappings":"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","sources":["Components/adminpanel/Manage Newsletter/APSendNewsLetterEmail.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport APNavBar from \"../Elements/APNavBar\";\r\nimport APSidebar from \"../APSidebar/APSidebar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Link from \"@mui/material/Link\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport axios from \"axios\";\r\nimport BaseApi from \"../../api/BaseApi\";\r\nimport ApiKey from \"../../api/ApiKey\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Cookies from \"js-cookie\";\r\nimport Select from \"react-select\";\r\nimport APFooter from \"../Elements/APFooter\";\r\n\r\nconst APSendNewsLetterEmail = () => {\r\n  const [userData, setUserData] = useState({\r\n    usertype: \"\",\r\n    template_id: \"\",\r\n    jobseekstatus: 1,\r\n    empstatus: 1,\r\n    jobseekers: 1,\r\n    employers: 1,\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    usertype: \"\",\r\n    template_id: \"\",\r\n    jobseekstatus: \"\",\r\n    empstatus: \"\",\r\n    jobseekers: \"\",\r\n    employers: \"\",\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [templates, setTemplates] = useState([]);\r\n  const [employersList, setEmployersList] = useState([]);\r\n  const [jobseekersList, setJobseekersList] = useState([]);\r\n  const [toggleEmployers, setToggleEmployers] = useState(false);\r\n  const [toggleJobseekers, setToggleJobseekers] = useState(false);\r\n  const tokenKey = Cookies.get(\"token\");\r\n  const adminID = Cookies.get(\"adminID\");\r\n  const [usertype, setUserType] = useState(\"\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"usertype\") {\r\n      const selectedUserType = e.target.value;\r\n      setUserType(selectedUserType);\r\n\r\n      // Determine whether to show/hide select boxes based on user type and email status\r\n      if (selectedUserType === \"recruiter\" && value === \"2\") {\r\n        setToggleEmployers(true);\r\n        setToggleJobseekers(false);\r\n      } else if (selectedUserType === \"candidate\" && value === \"2\") {\r\n        setToggleEmployers(false);\r\n        setToggleJobseekers(true);\r\n      } else {\r\n        setToggleEmployers(false);\r\n        setToggleJobseekers(false);\r\n      }\r\n    }\r\n    if (name === \"empstatus\") {\r\n      const selectedStatus = e.target.value;\r\n\r\n      if (selectedStatus === \"2\") {\r\n        setToggleEmployers(true);\r\n        setToggleJobseekers(false);\r\n      }\r\n    }\r\n    if (name === \"jobseekstatus\") {\r\n      const selectedStatus = e.target.value;\r\n\r\n      if (selectedStatus === \"2\") {\r\n        setToggleJobseekers(true);\r\n        setToggleEmployers(false);\r\n      }\r\n    }\r\n    setUserData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      [name]: \"\",\r\n    }));\r\n    // console.log(userData.template_id);\r\n    // console.log(userData.usertype);\r\n    // console.log(userData.empstatus, userData.jobseekstatus);\r\n    console.log(userData);\r\n  };\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        BaseApi + \"/admin/newsletter/admin_sendNewsletter\",\r\n        null,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            key: ApiKey,\r\n            token: tokenKey,\r\n            adminid: adminID,\r\n          },\r\n        }\r\n      );\r\n      setLoading(false);\r\n      setUserData(response.data.response);\r\n      setTemplates(response.data.response.templates);\r\n      setEmployersList(response.data.response.employerUserList);\r\n      setJobseekersList(response.data.response.jobseekerUserList);\r\n    } catch (error) {\r\n      console.log(\"Error at SMTP data fetching\");\r\n    }\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    var employers = document.getElementsByName(\"employers\");\r\n    var jobseekers = document.getElementsByName(\"jobseekers\");\r\n    var employersArray = [];\r\n    var jobseekersArray = [];\r\n\r\n    employers.forEach((element) => {\r\n      employersArray.push(element.value);\r\n    });\r\n    jobseekers.forEach((element) => {\r\n      jobseekersArray.push(element.value);\r\n    });\r\n    console.log(employersArray);\r\n    setUserData({\r\n      ...userData,\r\n      employers: employersArray,\r\n      jobseekers: jobseekersArray,\r\n    });\r\n    try {\r\n      const {\r\n        usertype,\r\n        template_id,\r\n        jobseekstatus,\r\n        empstatus,\r\n        jobseekers,\r\n        employers,\r\n      } = userData;\r\n      if (!usertype || !template_id) {\r\n        setErrors({\r\n          usertype: usertype ? \"\" : \"Usertype is required\",\r\n          template_id: template_id ? \"\" : \"Newsletter template is required\",\r\n          // jobseekstatus: jobseekstatus ? \"\" : \"Email type is required\",\r\n          // empstatus: empstatus ? \"\" : \"Email type is required\",\r\n        });\r\n        return;\r\n      }\r\n      if(usertype === \"recruiter\") {\r\n        if(!empstatus) {\r\n          setErrors({\r\n            empstatus: empstatus ? \"\" : \"Email type is required\"\r\n          })\r\n          return;\r\n        }\r\n      }\r\n      if(usertype === \"candidate\") {\r\n        if(!jobseekstatus) {\r\n          setErrors({\r\n            jobseekstatus: jobseekstatus ? \"\" : \"Email type is required\"\r\n          })\r\n          return;\r\n        }\r\n      }\r\n      if (usertype === \"recruiter\" && userData.empstatus === \"2\" && selectedEmployers.length === 0) {\r\n        // Show an error message for the \"employers\" field\r\n        console.log(\"here\")\r\n        setErrors({\r\n          employers: \"Please select employers\" });\r\n        return;\r\n      }\r\n      if (usertype === \"candidate\" && jobseekstatus === \"2\" && selectedJobseekers.length === 0) {\r\n        // if (!jobseekers || jobseekers.length == 0 || jobseekers.length == null) {\r\n          setErrors({\r\n            jobseekers:  \"Jobseekers is required\",\r\n          });\r\n          return;\r\n        // }\r\n      }\r\n      if (\r\n        errors.length > 0\r\n      ) {\r\n        // If any validation errors exist, return early\r\n        return;\r\n      }\r\n      \r\n      const confirmationResult = await Swal.fire({\r\n        title: \"Send?\",\r\n        text: \"Do you want to send newsletter to subscribers?\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n      });\r\n\r\n      if (confirmationResult.isConfirmed) {\r\n        const updatedData = {\r\n          ...userData,\r\n          employers: employersArray,\r\n          jobseekers: jobseekersArray,\r\n        };\r\n        // setLoading(true);\r\n\r\n        const response = await axios.post(\r\n          BaseApi + \"/admin/newsletter/admin_sendNewsletter\",\r\n          updatedData,\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              key: ApiKey,\r\n              token: tokenKey,\r\n              adminid: adminID,\r\n            },\r\n          }\r\n        );\r\n\r\n        // setLoading(false);\r\n\r\n        if (response.data.status === 200) {\r\n          Swal.fire({\r\n            title: \"Newsletter sent successfully!\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n          getData();\r\n\r\n          window.scrollTo(0, 0);\r\n        } else {\r\n          Swal.fire({\r\n            title: response.data.message,\r\n            icon: \"error\",\r\n            confirmButtonText: \"Close\",\r\n          });\r\n        }\r\n      }\r\n      // }\r\n    } catch (error) {\r\n      // setLoading(false);\r\n      Swal.fire({\r\n        title: \"Failed\",\r\n        text: \"Could not send newsletter. Please try again later!\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Close\",\r\n      });\r\n      console.log(\"Could not update SMTP Settings!\", error);\r\n    }\r\n  };\r\n  // const handleEmployerClick = () => {\r\n  //   setToggleEmployers(true);\r\n  //   setToggleJobseekers(false);\r\n  // };\r\n  // const handleJobseekerClick = () => {\r\n  //   setToggleEmployers(false);\r\n  //   setToggleJobseekers(true);\r\n  // };\r\n\r\n  // const renderDropdown = () => {\r\n  //   if (userData.empstatus === \"2\") {\r\n  //     // Display the dropdown when \"Select Employers to Send a Newsletter\" is selected\r\n  //     return (\r\n  //       <div>\r\n  //         <label htmlFor=\"employerList\">Select Employers:</label>\r\n  //         <select id=\"employerList\" name=\"employerList\">\r\n  //           {/* Add options for employer selection */}\r\n  //           <option value=\"employer1\">Employer 1</option>\r\n  //           <option value=\"employer2\">Employer 2</option>\r\n  //           {/* Add more options as needed */}\r\n  //         </select>\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  //   // Return null when \"Send Mail to all Employers\" is selected or by default\r\n  //   return null;\r\n  // };\r\n\r\n  useEffect(() => {\r\n    // Check if tokenKey is not present\r\n    if (!tokenKey) {\r\n      // Redirect to the home page\r\n      navigate(\"/admin\");\r\n    } else {\r\n      // TokenKey is present, fetch data or perform other actions\r\n      getData();\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [tokenKey, navigate]);\r\n\r\n  const [selectedEmployers, setSelectedEmployers] = useState([]);\r\n\r\n  const handleEmployersChange = (selectedOptions) => {\r\n    setSelectedEmployers(selectedOptions); // Update selected skills\r\n    // Check if selectedOptions is not empty\r\n    if (selectedOptions.length > 0) {\r\n      // If not empty, clear the error message\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        skill: \"\",\r\n      }));\r\n    }\r\n    // If it is empty, leave the error message as is\r\n  };\r\n\r\n  const [selectedJobseekers, setSelectedJobseekers] = useState([]);\r\n\r\n  const handleJobseekersChange = (selectedOptions) => {\r\n    setSelectedJobseekers(selectedOptions); // Update selected skills\r\n    // Check if selectedOptions is not empty\r\n    if (selectedOptions.length > 0) {\r\n      // If not empty, clear the error message\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        skill: \"\",\r\n      }));\r\n    }\r\n    // If it is empty, leave the error message as is\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <APNavBar />\r\n      <div className=\"APBasic\">\r\n        <APSidebar />\r\n\r\n        {loading ? (\r\n          <>\r\n            <div className=\"loader-container\"></div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"site-min-height\">\r\n              <div className=\"breadCumb1\" role=\"presentation\">\r\n                <Breadcrumbs\r\n                  aria-label=\"breadcrumb\"\r\n                  separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                >\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/admins/dashboard\")}\r\n                  >\r\n                    Dashboard\r\n                  </Link>\r\n                  <Link\r\n                    underline=\"hover\"\r\n                    color=\"inherit\"\r\n                    onClick={() => navigate(\"/admin/newsletters/index\")}\r\n                  >\r\n                    Newsletter\r\n                  </Link>\r\n\r\n                  <Typography color=\"text.primary\">\r\n                    Send Newsletter to Newsletter Subscribers\r\n                  </Typography>\r\n                </Breadcrumbs>\r\n              </div>\r\n              <h2 className=\"adminPageHeading\">\r\n                Send Newsletter to Newsletter Subscribers\r\n              </h2>\r\n              <form className=\"adminForm\">\r\n                <div className=\"mb-4 mt-5\">\r\n                  <div class=\"mb-5 DashBoardInputBx\">\r\n                    <label for=\"formFile\" class=\"form-label\">\r\n                      Select Newsletter Template<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <select\r\n                      className={`form-select ${\r\n                        errors.template_id && \"input-error\"\r\n                      }`}\r\n                      aria-label=\"Default select example\"\r\n                      name=\"template_id\"\r\n                      value={userData.template_id}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option value=\"\">Select Newsletter Template</option>\r\n                      {templates.map((i) => {\r\n                        return <option value={i.id}>{i.subject}</option>;\r\n                      })}\r\n                    </select>\r\n                    {errors.template_id && (\r\n                      <div className=\"text-danger\">{errors.template_id}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"mb-5 DashBoardInputBx\">\r\n                    <label className=\"form-label\" htmlFor=\"userTypeSelect\">\r\n                      Select User Type<span className=\"RedStar\">*</span>\r\n                    </label>\r\n                    <div className=\"APPaymentDetailsRadio\">\r\n                      <select\r\n                        id=\"userTypeSelect\"\r\n                        className={`form-select ${\r\n                          errors.usertype ? \"input-error\" : \"\"\r\n                        }`}\r\n                        name=\"usertype\"\r\n                        value={userData.usertype}\r\n                        onChange={handleChange}\r\n                      >\r\n                        <option selected value=\"\">\r\n                          Select User Type\r\n                        </option>\r\n                        <option value=\"recruiter\">Employer</option>\r\n                        <option value=\"candidate\">Jobseeker</option>\r\n                      </select>\r\n                      {errors.usertype && (\r\n                      <div className=\"text-danger\">{errors.usertype}</div>\r\n                    )}\r\n                    </div>\r\n                  </div>\r\n\r\n                  {userData.usertype === \"recruiter\" && (\r\n                    <>\r\n                      <div className=\"mb-5 DashBoardInputBx\">\r\n                        <label className=\"form-label\" htmlFor=\"emailTypeSelect\">\r\n                          Select Sharing Option<span className=\"RedStar\">*</span>\r\n                        </label>\r\n                        <div className=\"APPaymentDetailsRadio\">\r\n                          <select\r\n                            id=\"emailTypeSelect\"\r\n                            className={`form-select ${\r\n                              errors.empstatus ? \"input-error\" : \"\"\r\n                            }`}\r\n                            name=\"empstatus\"\r\n                            value={userData.empstatus}\r\n                            onChange={handleChange}\r\n                          >\r\n                            <option selected value=\"\">\r\n                              Select sharing option\r\n                            </option>\r\n                            <option value=\"1\">\r\n                              Send Newsletter to all Employers\r\n                            </option>\r\n                            <option value=\"2\">\r\n                              Select Employers to Send a Newsletter\r\n                            </option>\r\n                          </select>\r\n                          {errors.empstatus && (\r\n                            <div className=\"text-danger\">\r\n                              {errors.empstatus}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n\r\n                      {/* {renderDropdown()}{\" \"} */}\r\n                    </>\r\n                  )}\r\n                  {userData.usertype === \"candidate\" && (\r\n                    <>\r\n                      <div className=\"mb-5 DashBoardInputBx\">\r\n                        <label className=\"form-label\" htmlFor=\"emailTypeSelect\">\r\n                          Select Sharing Option<span className=\"RedStar\">*</span>\r\n                        </label>\r\n                        <div className=\"APPaymentDetailsRadio\">\r\n                          <select\r\n                            id=\"emailTypeSelect\"\r\n                            className={`form-select ${\r\n                              errors.jobseekstatus ? \"input-error\" : \"\"\r\n                            }`}\r\n                            name=\"jobseekstatus\"\r\n                            value={userData.jobseekstatus}\r\n                            onChange={handleChange}\r\n                          >\r\n                            <option selected value=\"\">\r\n                              Select sharing option\r\n                            </option>\r\n                            <option value=\"1\">\r\n                              Send Newsletter to all Jobseekers\r\n                            </option>\r\n                            <option value=\"2\">\r\n                              Select Jobseekers to send a Newsletter\r\n                            </option>\r\n                          </select>\r\n                          {errors.jobseekstatus && (\r\n                            <div className=\"text-danger\">\r\n                              {errors.jobseekstatus}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                  {userData.empstatus === \"2\" && toggleEmployers && (\r\n                    <>\r\n                      <div class=\"mb-5 DashBoardInputBx DashBoardCreatBx skillPackage APJoditEditor\">\r\n                        <label for=\"formFile\" class=\"form-label\">\r\n                          Select Employers<span className=\"RedStar\">*</span>\r\n                        </label>\r\n                        {/* <select\r\n                          className=\"form-select\"\r\n                          aria-label=\"Default select example\"\r\n                          name=\"employers\"\r\n                          value={userData.employers}\r\n                          onChange={handleChange}\r\n                        >\r\n                          {employersList.map((i) => {\r\n                            return (\r\n                              <option value={i.id}>\r\n                                {i.first_name} {i.last_name}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </select> */}\r\n\r\n                        <Select\r\n                          // defaultValue={[colourOptions[2], colouptions[3]]}\r\n                          isMulti\r\n                          isSearchable\r\n                          name=\"employers\"\r\n                          options={employersList.map((i) => ({\r\n                            value: i.email_address,\r\n                            label: i.email_address,\r\n                          }))}\r\n                          className=\"basic-multi-select\"\r\n                          value={selectedEmployers}\r\n                          classNamePrefix=\"select\"\r\n                          onChange={handleEmployersChange}\r\n                        />\r\n                        {errors.employers && (\r\n                          <div className=\"text-danger\">{errors.employers}</div>\r\n                        )}\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                  {userData.jobseekstatus === \"2\" && toggleJobseekers && (\r\n                    <>\r\n                      <div class=\"mb-5 DashBoardInputBx DashBoardCreatBx skillPackage APJoditEditor\">\r\n                        <label for=\"formFile\" class=\"form-label\">\r\n                          Select Jobseekers <span className=\"RedStar\">*</span>\r\n                        </label>\r\n                        {/* <select\r\n                          className=\"form-select\"\r\n                          aria-label=\"Default select example\"\r\n                          name=\"jobseekers\"\r\n                          value={userData.jobseekers}\r\n                          onChange={handleChange}\r\n                        >\r\n                          <option value=\"\">Select Jobseekers</option>\r\n                          {jobseekersList.map((i) => {\r\n                            return (\r\n                              <option value={i.id}>\r\n                                {i.first_name} {i.last_name}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </select> */}\r\n\r\n                        <Select\r\n                          // defaultValue={[colourOptions[2], colouptions[3]]}\r\n                          isMulti\r\n                          isSearchable\r\n                          name=\"jobseekers\"\r\n                          options={jobseekersList.map((i) => ({\r\n                            value: i.email_address,\r\n                            label: i.first_name + \" \" + i.last_name,\r\n                          }))}\r\n                          className=\"basic-multi-select\"\r\n                          value={selectedJobseekers}\r\n                          classNamePrefix=\"select\"\r\n                          onChange={handleJobseekersChange}\r\n                        />\r\n                        {errors.jobseekers && (\r\n                          <div className=\"text-danger\">{errors.jobseekers}</div>\r\n                        )}\r\n                      </div>\r\n                    </>\r\n                  )}\r\n\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button1\"\r\n                    onClick={handleClick}\r\n                  >\r\n                    SEND\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary button2\"\r\n                    onClick={() => navigate(\"/admin/newsletters/index\")}\r\n                  >\r\n                    CANCEL\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <APFooter />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default APSendNewsLetterEmail;\r\n"],"names":["APSendNewsLetterEmail","userData","setUserData","useState","usertype","template_id","jobseekstatus","empstatus","jobseekers","employers","errors","setErrors","loading","setLoading","templates","setTemplates","employersList","setEmployersList","jobseekersList","setJobseekersList","toggleEmployers","setToggleEmployers","toggleJobseekers","setToggleJobseekers","tokenKey","Cookies","adminID","setUserType","navigate","useNavigate","handleChange","e","name","value","target","selectedUserType","prev","console","log","getData","async","response","axios","BaseApi","headers","key","ApiKey","token","adminid","data","employerUserList","jobseekerUserList","error","useEffect","window","scrollTo","selectedEmployers","setSelectedEmployers","selectedJobseekers","setSelectedJobseekers","_jsxs","_Fragment","children","_jsx","APNavBar","className","APSidebar","role","Breadcrumbs","separator","NavigateNextIcon","fontSize","Link","underline","color","onClick","Typography","class","for","onChange","map","i","id","subject","htmlFor","selected","Select","isMulti","isSearchable","options","email_address","label","classNamePrefix","selectedOptions","length","skill","first_name","last_name","type","document","getElementsByName","employersArray","jobseekersArray","forEach","element","push","Swal","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","isConfirmed","updatedData","status","message","APFooter"],"sourceRoot":""}